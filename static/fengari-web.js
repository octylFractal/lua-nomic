!function(Q,F){"object"==typeof exports&&"object"==typeof module?module.exports=F():"function"==typeof define&&define.amd?define([],F):"object"==typeof exports?exports.fengari=F():Q.fengari=F()}(window,function(){return function(Q){var F={};function B(U){if(F[U])return F[U].exports;var I=F[U]={i:U,l:!1,exports:{}};return Q[U].call(I.exports,I,I.exports,B),I.l=!0,I.exports}return B.m=Q,B.c=F,B.d=function(Q,F,U){B.o(Q,F)||Object.defineProperty(Q,F,{enumerable:!0,get:U})},B.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},B.t=function(Q,F){if(1&F&&(Q=B(Q)),8&F)return Q;if(4&F&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var U=Object.create(null);if(B.r(U),Object.defineProperty(U,"default",{enumerable:!0,value:Q}),2&F&&"string"!=typeof Q)for(var I in Q)B.d(U,I,function(F){return Q[F]}.bind(null,I));return U},B.n=function(Q){var F=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return B.d(F,"a",F),F},B.o=function(Q,F){return Object.prototype.hasOwnProperty.call(Q,F)},B.p="",B(B.s=34)}([function(module,exports,__webpack_require__){"use strict";eval("/**\n@license MIT\n\nCopyright © 2017-2018 Benoit Giannangeli\nCopyright © 2017-2018 Daurnimator\nCopyright © 1994–2017 Lua.org, PUC-Rio.\n*/\n\n\nvar core = __webpack_require__(5);\n\nmodule.exports.FENGARI_AUTHORS = core.FENGARI_AUTHORS;\nmodule.exports.FENGARI_COPYRIGHT = core.FENGARI_COPYRIGHT;\nmodule.exports.FENGARI_RELEASE = core.FENGARI_RELEASE;\nmodule.exports.FENGARI_VERSION = core.FENGARI_VERSION;\nmodule.exports.FENGARI_VERSION_MAJOR = core.FENGARI_VERSION_MAJOR;\nmodule.exports.FENGARI_VERSION_MINOR = core.FENGARI_VERSION_MINOR;\nmodule.exports.FENGARI_VERSION_NUM = core.FENGARI_VERSION_NUM;\nmodule.exports.FENGARI_VERSION_RELEASE = core.FENGARI_VERSION_RELEASE;\nmodule.exports.luastring_eq = core.luastring_eq;\nmodule.exports.luastring_indexOf = core.luastring_indexOf;\nmodule.exports.luastring_of = core.luastring_of;\nmodule.exports.to_jsstring = core.to_jsstring;\nmodule.exports.to_luastring = core.to_luastring;\nmodule.exports.to_uristring = core.to_uristring;\n\nvar luaconf = __webpack_require__(3);\n\nvar lua = __webpack_require__(2);\n\nvar lauxlib = __webpack_require__(7);\n\nvar lualib = __webpack_require__(17);\n\nmodule.exports.luaconf = luaconf;\nmodule.exports.lua = lua;\nmodule.exports.lauxlib = lauxlib;\nmodule.exports.lualib = lualib;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mZW5nYXJpLy4vbm9kZV9tb2R1bGVzL2Zlbmdhcmkvc3JjL2ZlbmdhcmkuanM/YmMzMSJdLCJuYW1lcyI6WyJjb3JlIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJGRU5HQVJJX0FVVEhPUlMiLCJGRU5HQVJJX0NPUFlSSUdIVCIsIkZFTkdBUklfUkVMRUFTRSIsIkZFTkdBUklfVkVSU0lPTiIsIkZFTkdBUklfVkVSU0lPTl9NQUpPUiIsIkZFTkdBUklfVkVSU0lPTl9NSU5PUiIsIkZFTkdBUklfVkVSU0lPTl9OVU0iLCJGRU5HQVJJX1ZFUlNJT05fUkVMRUFTRSIsImx1YXN0cmluZ19lcSIsImx1YXN0cmluZ19pbmRleE9mIiwibHVhc3RyaW5nX29mIiwidG9fanNzdHJpbmciLCJ0b19sdWFzdHJpbmciLCJ0b191cmlzdHJpbmciLCJsdWFjb25mIiwibHVhIiwibGF1eGxpYiIsImx1YWxpYiJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7QUFRYTs7QUFFYixJQUFNQSxJQUFJLEdBQUdDLG1CQUFPLENBQUMsQ0FBRCxDQUFwQjs7QUFFQUMsTUFBTSxDQUFDQyxPQUFQLENBQWVDLGVBQWYsR0FBeUNKLElBQUksQ0FBQ0ksZUFBOUM7QUFDQUYsTUFBTSxDQUFDQyxPQUFQLENBQWVFLGlCQUFmLEdBQXlDTCxJQUFJLENBQUNLLGlCQUE5QztBQUNBSCxNQUFNLENBQUNDLE9BQVAsQ0FBZUcsZUFBZixHQUF5Q04sSUFBSSxDQUFDTSxlQUE5QztBQUNBSixNQUFNLENBQUNDLE9BQVAsQ0FBZUksZUFBZixHQUF5Q1AsSUFBSSxDQUFDTyxlQUE5QztBQUNBTCxNQUFNLENBQUNDLE9BQVAsQ0FBZUsscUJBQWYsR0FBeUNSLElBQUksQ0FBQ1EscUJBQTlDO0FBQ0FOLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlTSxxQkFBZixHQUF5Q1QsSUFBSSxDQUFDUyxxQkFBOUM7QUFDQVAsTUFBTSxDQUFDQyxPQUFQLENBQWVPLG1CQUFmLEdBQXlDVixJQUFJLENBQUNVLG1CQUE5QztBQUNBUixNQUFNLENBQUNDLE9BQVAsQ0FBZVEsdUJBQWYsR0FBeUNYLElBQUksQ0FBQ1csdUJBQTlDO0FBRUFULE1BQU0sQ0FBQ0MsT0FBUCxDQUFlUyxZQUFmLEdBQW1DWixJQUFJLENBQUNZLFlBQXhDO0FBQ0FWLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlVSxpQkFBZixHQUFtQ2IsSUFBSSxDQUFDYSxpQkFBeEM7QUFDQVgsTUFBTSxDQUFDQyxPQUFQLENBQWVXLFlBQWYsR0FBbUNkLElBQUksQ0FBQ2MsWUFBeEM7QUFDQVosTUFBTSxDQUFDQyxPQUFQLENBQWVZLFdBQWYsR0FBbUNmLElBQUksQ0FBQ2UsV0FBeEM7QUFDQWIsTUFBTSxDQUFDQyxPQUFQLENBQWVhLFlBQWYsR0FBbUNoQixJQUFJLENBQUNnQixZQUF4QztBQUNBZCxNQUFNLENBQUNDLE9BQVAsQ0FBZWMsWUFBZixHQUFtQ2pCLElBQUksQ0FBQ2lCLFlBQXhDOztBQUVBLElBQU1DLE9BQU8sR0FBR2pCLG1CQUFPLENBQUMsQ0FBRCxDQUF2Qjs7QUFDQSxJQUFNa0IsR0FBRyxHQUFPbEIsbUJBQU8sQ0FBQyxDQUFELENBQXZCOztBQUNBLElBQU1tQixPQUFPLEdBQUduQixtQkFBTyxDQUFDLENBQUQsQ0FBdkI7O0FBQ0EsSUFBTW9CLE1BQU0sR0FBSXBCLG1CQUFPLENBQUMsRUFBRCxDQUF2Qjs7QUFFQUMsTUFBTSxDQUFDQyxPQUFQLENBQWVlLE9BQWYsR0FBeUJBLE9BQXpCO0FBQ0FoQixNQUFNLENBQUNDLE9BQVAsQ0FBZWdCLEdBQWYsR0FBeUJBLEdBQXpCO0FBQ0FqQixNQUFNLENBQUNDLE9BQVAsQ0FBZWlCLE9BQWYsR0FBeUJBLE9BQXpCO0FBQ0FsQixNQUFNLENBQUNDLE9BQVAsQ0FBZWtCLE1BQWYsR0FBeUJBLE1BQXpCIiwiZmlsZSI6IjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbkBsaWNlbnNlIE1JVFxuXG5Db3B5cmlnaHQgwqkgMjAxNy0yMDE4IEJlbm9pdCBHaWFubmFuZ2VsaVxuQ29weXJpZ2h0IMKpIDIwMTctMjAxOCBEYXVybmltYXRvclxuQ29weXJpZ2h0IMKpIDE5OTTigJMyMDE3IEx1YS5vcmcsIFBVQy1SaW8uXG4qL1xuXG5cInVzZSBzdHJpY3RcIjtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoXCIuL2Zlbmdhcmljb3JlLmpzXCIpO1xuXG5tb2R1bGUuZXhwb3J0cy5GRU5HQVJJX0FVVEhPUlMgICAgICAgICA9IGNvcmUuRkVOR0FSSV9BVVRIT1JTO1xubW9kdWxlLmV4cG9ydHMuRkVOR0FSSV9DT1BZUklHSFQgICAgICAgPSBjb3JlLkZFTkdBUklfQ09QWVJJR0hUO1xubW9kdWxlLmV4cG9ydHMuRkVOR0FSSV9SRUxFQVNFICAgICAgICAgPSBjb3JlLkZFTkdBUklfUkVMRUFTRTtcbm1vZHVsZS5leHBvcnRzLkZFTkdBUklfVkVSU0lPTiAgICAgICAgID0gY29yZS5GRU5HQVJJX1ZFUlNJT047XG5tb2R1bGUuZXhwb3J0cy5GRU5HQVJJX1ZFUlNJT05fTUFKT1IgICA9IGNvcmUuRkVOR0FSSV9WRVJTSU9OX01BSk9SO1xubW9kdWxlLmV4cG9ydHMuRkVOR0FSSV9WRVJTSU9OX01JTk9SICAgPSBjb3JlLkZFTkdBUklfVkVSU0lPTl9NSU5PUjtcbm1vZHVsZS5leHBvcnRzLkZFTkdBUklfVkVSU0lPTl9OVU0gICAgID0gY29yZS5GRU5HQVJJX1ZFUlNJT05fTlVNO1xubW9kdWxlLmV4cG9ydHMuRkVOR0FSSV9WRVJTSU9OX1JFTEVBU0UgPSBjb3JlLkZFTkdBUklfVkVSU0lPTl9SRUxFQVNFO1xuXG5tb2R1bGUuZXhwb3J0cy5sdWFzdHJpbmdfZXEgICAgICA9IGNvcmUubHVhc3RyaW5nX2VxO1xubW9kdWxlLmV4cG9ydHMubHVhc3RyaW5nX2luZGV4T2YgPSBjb3JlLmx1YXN0cmluZ19pbmRleE9mO1xubW9kdWxlLmV4cG9ydHMubHVhc3RyaW5nX29mICAgICAgPSBjb3JlLmx1YXN0cmluZ19vZjtcbm1vZHVsZS5leHBvcnRzLnRvX2pzc3RyaW5nICAgICAgID0gY29yZS50b19qc3N0cmluZztcbm1vZHVsZS5leHBvcnRzLnRvX2x1YXN0cmluZyAgICAgID0gY29yZS50b19sdWFzdHJpbmc7XG5tb2R1bGUuZXhwb3J0cy50b191cmlzdHJpbmcgICAgICA9IGNvcmUudG9fdXJpc3RyaW5nO1xuXG5jb25zdCBsdWFjb25mID0gcmVxdWlyZSgnLi9sdWFjb25mLmpzJyk7XG5jb25zdCBsdWEgICAgID0gcmVxdWlyZSgnLi9sdWEuanMnKTtcbmNvbnN0IGxhdXhsaWIgPSByZXF1aXJlKCcuL2xhdXhsaWIuanMnKTtcbmNvbnN0IGx1YWxpYiAgPSByZXF1aXJlKCcuL2x1YWxpYi5qcycpO1xuXG5tb2R1bGUuZXhwb3J0cy5sdWFjb25mID0gbHVhY29uZjtcbm1vZHVsZS5leHBvcnRzLmx1YSAgICAgPSBsdWE7XG5tb2R1bGUuZXhwb3J0cy5sYXV4bGliID0gbGF1eGxpYjtcbm1vZHVsZS5leHBvcnRzLmx1YWxpYiAgPSBsdWFsaWI7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///0\n")},function(module,exports,__webpack_require__){"use strict";eval('\n/*\n * Fengari specific string conversion functions\n */\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nvar luastring_from;\n\nif (typeof Uint8Array.from === "function") {\n  luastring_from = Uint8Array.from.bind(Uint8Array);\n} else {\n  luastring_from = function luastring_from(a) {\n    var i = 0;\n    var len = a.length;\n    var r = new Uint8Array(len);\n\n    while (len > i) {\n      r[i] = a[i++];\n    }\n\n    return r;\n  };\n}\n\nvar luastring_indexOf;\n\nif (typeof new Uint8Array().indexOf === "function") {\n  luastring_indexOf = function luastring_indexOf(s, v, i) {\n    return s.indexOf(v, i);\n  };\n} else {\n  /* Browsers that don\'t support Uint8Array.indexOf seem to allow using Array.indexOf on Uint8Array objects e.g. IE11 */\n  var array_indexOf = [].indexOf;\n  if (array_indexOf.call(new Uint8Array(1), 0) !== 0) throw Error("missing .indexOf");\n\n  luastring_indexOf = function luastring_indexOf(s, v, i) {\n    return array_indexOf.call(s, v, i);\n  };\n}\n\nvar luastring_of;\n\nif (typeof Uint8Array.of === "function") {\n  luastring_of = Uint8Array.of.bind(Uint8Array);\n} else {\n  luastring_of = function luastring_of() {\n    return luastring_from(arguments);\n  };\n}\n\nvar is_luastring = function is_luastring(s) {\n  return s instanceof Uint8Array;\n};\n/* test two lua strings for equality */\n\n\nvar luastring_eq = function luastring_eq(a, b) {\n  if (a !== b) {\n    var len = a.length;\n    if (len !== b.length) return false;\n    /* XXX: Should this be a constant time algorithm? */\n\n    for (var i = 0; i < len; i++) {\n      if (a[i] !== b[i]) return false;\n    }\n  }\n\n  return true;\n};\n\nvar unicode_error_message = "cannot convert invalid utf8 to javascript string";\n\nvar to_jsstring = function to_jsstring(value, from, to, replacement_char) {\n  if (!is_luastring(value)) throw new TypeError("to_jsstring expects a Uint8Array");\n\n  if (to === void 0) {\n    to = value.length;\n  } else {\n    to = Math.min(value.length, to);\n  }\n\n  var str = "";\n\n  for (var i = from !== void 0 ? from : 0; i < to;) {\n    var u0 = value[i++];\n\n    if (u0 < 0x80) {\n      /* single byte sequence */\n      str += String.fromCharCode(u0);\n    } else if (u0 < 0xC2 || u0 > 0xF4) {\n      if (!replacement_char) throw RangeError(unicode_error_message);\n      str += "�";\n    } else if (u0 <= 0xDF) {\n      /* two byte sequence */\n      if (i >= to) {\n        if (!replacement_char) throw RangeError(unicode_error_message);\n        str += "�";\n        continue;\n      }\n\n      var u1 = value[i++];\n\n      if ((u1 & 0xC0) !== 0x80) {\n        if (!replacement_char) throw RangeError(unicode_error_message);\n        str += "�";\n        continue;\n      }\n\n      str += String.fromCharCode(((u0 & 0x1F) << 6) + (u1 & 0x3F));\n    } else if (u0 <= 0xEF) {\n      /* three byte sequence */\n      if (i + 1 >= to) {\n        if (!replacement_char) throw RangeError(unicode_error_message);\n        str += "�";\n        continue;\n      }\n\n      var _u = value[i++];\n\n      if ((_u & 0xC0) !== 0x80) {\n        if (!replacement_char) throw RangeError(unicode_error_message);\n        str += "�";\n        continue;\n      }\n\n      var u2 = value[i++];\n\n      if ((u2 & 0xC0) !== 0x80) {\n        if (!replacement_char) throw RangeError(unicode_error_message);\n        str += "�";\n        continue;\n      }\n\n      var u = ((u0 & 0x0F) << 12) + ((_u & 0x3F) << 6) + (u2 & 0x3F);\n\n      if (u <= 0xFFFF) {\n        /* BMP codepoint */\n        str += String.fromCharCode(u);\n      } else {\n        /* Astral codepoint */\n        u -= 0x10000;\n        var s1 = (u >> 10) + 0xD800;\n        var s2 = u % 0x400 + 0xDC00;\n        str += String.fromCharCode(s1, s2);\n      }\n    } else {\n      /* four byte sequence */\n      if (i + 2 >= to) {\n        if (!replacement_char) throw RangeError(unicode_error_message);\n        str += "�";\n        continue;\n      }\n\n      var _u2 = value[i++];\n\n      if ((_u2 & 0xC0) !== 0x80) {\n        if (!replacement_char) throw RangeError(unicode_error_message);\n        str += "�";\n        continue;\n      }\n\n      var _u3 = value[i++];\n\n      if ((_u3 & 0xC0) !== 0x80) {\n        if (!replacement_char) throw RangeError(unicode_error_message);\n        str += "�";\n        continue;\n      }\n\n      var u3 = value[i++];\n\n      if ((u3 & 0xC0) !== 0x80) {\n        if (!replacement_char) throw RangeError(unicode_error_message);\n        str += "�";\n        continue;\n      }\n      /* Has to be astral codepoint */\n\n\n      var _u4 = ((u0 & 0x07) << 18) + ((_u2 & 0x3F) << 12) + ((_u3 & 0x3F) << 6) + (u3 & 0x3F);\n\n      _u4 -= 0x10000;\n\n      var _s = (_u4 >> 10) + 0xD800;\n\n      var _s2 = _u4 % 0x400 + 0xDC00;\n\n      str += String.fromCharCode(_s, _s2);\n    }\n  }\n\n  return str;\n};\n/* bytes allowed unescaped in a uri */\n\n\nvar uri_allowed = ";,/?:@&=+$abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789,-_.!~*\'()#".split(\'\').reduce(function (uri_allowed, c) {\n  uri_allowed[c.charCodeAt(0)] = true;\n  return uri_allowed;\n}, {});\n/* utility function to convert a lua string to a js string with uri escaping */\n\nvar to_uristring = function to_uristring(a) {\n  if (!is_luastring(a)) throw new TypeError("to_uristring expects a Uint8Array");\n  var s = "";\n\n  for (var i = 0; i < a.length; i++) {\n    var v = a[i];\n\n    if (uri_allowed[v]) {\n      s += String.fromCharCode(v);\n    } else {\n      s += "%" + (v < 0x10 ? "0" : "") + v.toString(16);\n    }\n  }\n\n  return s;\n};\n\nvar to_luastring_cache = {};\n\nvar to_luastring = function to_luastring(str, cache) {\n  if (typeof str !== "string") throw new TypeError("to_luastring expects a javascript string");\n\n  if (cache) {\n    var cached = to_luastring_cache[str];\n    if (is_luastring(cached)) return cached;\n  }\n\n  var len = str.length;\n  var outU8Array = Array(len);\n  /* array is at *least* going to be length of string */\n\n  var outIdx = 0;\n\n  for (var i = 0; i < len; ++i) {\n    var u = str.charCodeAt(i);\n\n    if (u <= 0x7F) {\n      outU8Array[outIdx++] = u;\n    } else if (u <= 0x7FF) {\n      outU8Array[outIdx++] = 0xC0 | u >> 6;\n      outU8Array[outIdx++] = 0x80 | u & 63;\n    } else {\n      /* This part is to work around possible lack of String.codePointAt */\n      if (u >= 0xD800 && u <= 0xDBFF && i + 1 < len) {\n        /* is first half of surrogate pair */\n        var v = str.charCodeAt(i + 1);\n\n        if (v >= 0xDC00 && v <= 0xDFFF) {\n          /* is valid low surrogate */\n          i++;\n          u = (u - 0xD800) * 0x400 + v + 0x2400;\n        }\n      }\n\n      if (u <= 0xFFFF) {\n        outU8Array[outIdx++] = 0xE0 | u >> 12;\n        outU8Array[outIdx++] = 0x80 | u >> 6 & 63;\n        outU8Array[outIdx++] = 0x80 | u & 63;\n      } else {\n        outU8Array[outIdx++] = 0xF0 | u >> 18;\n        outU8Array[outIdx++] = 0x80 | u >> 12 & 63;\n        outU8Array[outIdx++] = 0x80 | u >> 6 & 63;\n        outU8Array[outIdx++] = 0x80 | u & 63;\n      }\n    }\n  }\n\n  outU8Array = luastring_from(outU8Array);\n  if (cache) to_luastring_cache[str] = outU8Array;\n  return outU8Array;\n};\n\nvar from_userstring = function from_userstring(str) {\n  if (!is_luastring(str)) {\n    if (typeof str === "string") {\n      str = to_luastring(str);\n    } else {\n      throw new TypeError("expects an array of bytes or javascript string");\n    }\n  }\n\n  return str;\n};\n\nmodule.exports.luastring_from = luastring_from;\nmodule.exports.luastring_indexOf = luastring_indexOf;\nmodule.exports.luastring_of = luastring_of;\nmodule.exports.is_luastring = is_luastring;\nmodule.exports.luastring_eq = luastring_eq;\nmodule.exports.to_jsstring = to_jsstring;\nmodule.exports.to_uristring = to_uristring;\nmodule.exports.to_luastring = to_luastring;\nmodule.exports.from_userstring = from_userstring;\n/* mark for precompiled code (\'<esc>Lua\') */\n\nvar LUA_SIGNATURE = to_luastring("\\x1bLua");\nvar LUA_VERSION_MAJOR = "5";\nvar LUA_VERSION_MINOR = "3";\nvar LUA_VERSION_NUM = 503;\nvar LUA_VERSION_RELEASE = "4";\nvar LUA_VERSION = "Lua " + LUA_VERSION_MAJOR + "." + LUA_VERSION_MINOR;\nvar LUA_RELEASE = LUA_VERSION + "." + LUA_VERSION_RELEASE;\nvar LUA_COPYRIGHT = LUA_RELEASE + "  Copyright (C) 1994-2017 Lua.org, PUC-Rio";\nvar LUA_AUTHORS = "R. Ierusalimschy, L. H. de Figueiredo, W. Celes";\nmodule.exports.LUA_SIGNATURE = LUA_SIGNATURE;\nmodule.exports.LUA_VERSION_MAJOR = LUA_VERSION_MAJOR;\nmodule.exports.LUA_VERSION_MINOR = LUA_VERSION_MINOR;\nmodule.exports.LUA_VERSION_NUM = LUA_VERSION_NUM;\nmodule.exports.LUA_VERSION_RELEASE = LUA_VERSION_RELEASE;\nmodule.exports.LUA_VERSION = LUA_VERSION;\nmodule.exports.LUA_RELEASE = LUA_RELEASE;\nmodule.exports.LUA_COPYRIGHT = LUA_COPYRIGHT;\nmodule.exports.LUA_AUTHORS = LUA_AUTHORS;\nvar thread_status = {\n  LUA_OK: 0,\n  LUA_YIELD: 1,\n  LUA_ERRRUN: 2,\n  LUA_ERRSYNTAX: 3,\n  LUA_ERRMEM: 4,\n  LUA_ERRGCMM: 5,\n  LUA_ERRERR: 6\n};\nvar constant_types = {\n  LUA_TNONE: -1,\n  LUA_TNIL: 0,\n  LUA_TBOOLEAN: 1,\n  LUA_TLIGHTUSERDATA: 2,\n  LUA_TNUMBER: 3,\n  LUA_TSTRING: 4,\n  LUA_TTABLE: 5,\n  LUA_TFUNCTION: 6,\n  LUA_TUSERDATA: 7,\n  LUA_TTHREAD: 8,\n  LUA_NUMTAGS: 9\n};\nconstant_types.LUA_TSHRSTR = constant_types.LUA_TSTRING | 0 << 4;\n/* short strings */\n\nconstant_types.LUA_TLNGSTR = constant_types.LUA_TSTRING | 1 << 4;\n/* long strings */\n\nconstant_types.LUA_TNUMFLT = constant_types.LUA_TNUMBER | 0 << 4;\n/* float numbers */\n\nconstant_types.LUA_TNUMINT = constant_types.LUA_TNUMBER | 1 << 4;\n/* integer numbers */\n\nconstant_types.LUA_TLCL = constant_types.LUA_TFUNCTION | 0 << 4;\n/* Lua closure */\n\nconstant_types.LUA_TLCF = constant_types.LUA_TFUNCTION | 1 << 4;\n/* light C function */\n\nconstant_types.LUA_TCCL = constant_types.LUA_TFUNCTION | 2 << 4;\n/* C closure */\n\n/*\n** Comparison and arithmetic functions\n*/\n\nvar LUA_OPADD = 0;\n/* ORDER TM, ORDER OP */\n\nvar LUA_OPSUB = 1;\nvar LUA_OPMUL = 2;\nvar LUA_OPMOD = 3;\nvar LUA_OPPOW = 4;\nvar LUA_OPDIV = 5;\nvar LUA_OPIDIV = 6;\nvar LUA_OPBAND = 7;\nvar LUA_OPBOR = 8;\nvar LUA_OPBXOR = 9;\nvar LUA_OPSHL = 10;\nvar LUA_OPSHR = 11;\nvar LUA_OPUNM = 12;\nvar LUA_OPBNOT = 13;\nvar LUA_OPEQ = 0;\nvar LUA_OPLT = 1;\nvar LUA_OPLE = 2;\nvar LUA_MINSTACK = 20;\n\nvar _require = __webpack_require__(3),\n    LUAI_MAXSTACK = _require.LUAI_MAXSTACK;\n\nvar LUA_REGISTRYINDEX = -LUAI_MAXSTACK - 1000;\n\nvar lua_upvalueindex = function lua_upvalueindex(i) {\n  return LUA_REGISTRYINDEX - i;\n};\n/* predefined values in the registry */\n\n\nvar LUA_RIDX_MAINTHREAD = 1;\nvar LUA_RIDX_GLOBALS = 2;\nvar LUA_RIDX_LAST = LUA_RIDX_GLOBALS;\n\nvar lua_Debug = function lua_Debug() {\n  _classCallCheck(this, lua_Debug);\n\n  this.event = NaN;\n  this.name = null;\n  /* (n) */\n\n  this.namewhat = null;\n  /* (n) \'global\', \'local\', \'field\', \'method\' */\n\n  this.what = null;\n  /* (S) \'Lua\', \'C\', \'main\', \'tail\' */\n\n  this.source = null;\n  /* (S) */\n\n  this.currentline = NaN;\n  /* (l) */\n\n  this.linedefined = NaN;\n  /* (S) */\n\n  this.lastlinedefined = NaN;\n  /* (S) */\n\n  this.nups = NaN;\n  /* (u) number of upvalues */\n\n  this.nparams = NaN;\n  /* (u) number of parameters */\n\n  this.isvararg = NaN;\n  /* (u) */\n\n  this.istailcall = NaN;\n  /* (t) */\n\n  this.short_src = null;\n  /* (S) */\n\n  /* private part */\n\n  this.i_ci = null;\n  /* active function */\n};\n/*\n** Event codes\n*/\n\n\nvar LUA_HOOKCALL = 0;\nvar LUA_HOOKRET = 1;\nvar LUA_HOOKLINE = 2;\nvar LUA_HOOKCOUNT = 3;\nvar LUA_HOOKTAILCALL = 4;\n/*\n** Event masks\n*/\n\nvar LUA_MASKCALL = 1 << LUA_HOOKCALL;\nvar LUA_MASKRET = 1 << LUA_HOOKRET;\nvar LUA_MASKLINE = 1 << LUA_HOOKLINE;\nvar LUA_MASKCOUNT = 1 << LUA_HOOKCOUNT;\nmodule.exports.LUA_HOOKCALL = LUA_HOOKCALL;\nmodule.exports.LUA_HOOKCOUNT = LUA_HOOKCOUNT;\nmodule.exports.LUA_HOOKLINE = LUA_HOOKLINE;\nmodule.exports.LUA_HOOKRET = LUA_HOOKRET;\nmodule.exports.LUA_HOOKTAILCALL = LUA_HOOKTAILCALL;\nmodule.exports.LUA_MASKCALL = LUA_MASKCALL;\nmodule.exports.LUA_MASKCOUNT = LUA_MASKCOUNT;\nmodule.exports.LUA_MASKLINE = LUA_MASKLINE;\nmodule.exports.LUA_MASKRET = LUA_MASKRET;\nmodule.exports.LUA_MINSTACK = LUA_MINSTACK;\nmodule.exports.LUA_MULTRET = -1;\nmodule.exports.LUA_OPADD = LUA_OPADD;\nmodule.exports.LUA_OPBAND = LUA_OPBAND;\nmodule.exports.LUA_OPBNOT = LUA_OPBNOT;\nmodule.exports.LUA_OPBOR = LUA_OPBOR;\nmodule.exports.LUA_OPBXOR = LUA_OPBXOR;\nmodule.exports.LUA_OPDIV = LUA_OPDIV;\nmodule.exports.LUA_OPEQ = LUA_OPEQ;\nmodule.exports.LUA_OPIDIV = LUA_OPIDIV;\nmodule.exports.LUA_OPLE = LUA_OPLE;\nmodule.exports.LUA_OPLT = LUA_OPLT;\nmodule.exports.LUA_OPMOD = LUA_OPMOD;\nmodule.exports.LUA_OPMUL = LUA_OPMUL;\nmodule.exports.LUA_OPPOW = LUA_OPPOW;\nmodule.exports.LUA_OPSHL = LUA_OPSHL;\nmodule.exports.LUA_OPSHR = LUA_OPSHR;\nmodule.exports.LUA_OPSUB = LUA_OPSUB;\nmodule.exports.LUA_OPUNM = LUA_OPUNM;\nmodule.exports.LUA_REGISTRYINDEX = LUA_REGISTRYINDEX;\nmodule.exports.LUA_RIDX_GLOBALS = LUA_RIDX_GLOBALS;\nmodule.exports.LUA_RIDX_LAST = LUA_RIDX_LAST;\nmodule.exports.LUA_RIDX_MAINTHREAD = LUA_RIDX_MAINTHREAD;\nmodule.exports.constant_types = constant_types;\nmodule.exports.lua_Debug = lua_Debug;\nmodule.exports.lua_upvalueindex = lua_upvalueindex;\nmodule.exports.thread_status = thread_status;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n')},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar defs = __webpack_require__(1);\n\nvar lapi = __webpack_require__(19);\n\nvar ldebug = __webpack_require__(11);\n\nvar ldo = __webpack_require__(8);\n\nvar lstate = __webpack_require__(12);\n\nmodule.exports.LUA_AUTHORS = defs.LUA_AUTHORS;\nmodule.exports.LUA_COPYRIGHT = defs.LUA_COPYRIGHT;\nmodule.exports.LUA_ERRERR = defs.thread_status.LUA_ERRERR;\nmodule.exports.LUA_ERRGCMM = defs.thread_status.LUA_ERRGCMM;\nmodule.exports.LUA_ERRMEM = defs.thread_status.LUA_ERRMEM;\nmodule.exports.LUA_ERRRUN = defs.thread_status.LUA_ERRRUN;\nmodule.exports.LUA_ERRSYNTAX = defs.thread_status.LUA_ERRSYNTAX;\nmodule.exports.LUA_HOOKCALL = defs.LUA_HOOKCALL;\nmodule.exports.LUA_HOOKCOUNT = defs.LUA_HOOKCOUNT;\nmodule.exports.LUA_HOOKLINE = defs.LUA_HOOKLINE;\nmodule.exports.LUA_HOOKRET = defs.LUA_HOOKRET;\nmodule.exports.LUA_HOOKTAILCALL = defs.LUA_HOOKTAILCALL;\nmodule.exports.LUA_MASKCALL = defs.LUA_MASKCALL;\nmodule.exports.LUA_MASKCOUNT = defs.LUA_MASKCOUNT;\nmodule.exports.LUA_MASKLINE = defs.LUA_MASKLINE;\nmodule.exports.LUA_MASKRET = defs.LUA_MASKRET;\nmodule.exports.LUA_MINSTACK = defs.LUA_MINSTACK;\nmodule.exports.LUA_MULTRET = defs.LUA_MULTRET;\nmodule.exports.LUA_NUMTAGS = defs.constant_types.LUA_NUMTAGS;\nmodule.exports.LUA_OK = defs.thread_status.LUA_OK;\nmodule.exports.LUA_OPADD = defs.LUA_OPADD;\nmodule.exports.LUA_OPBAND = defs.LUA_OPBAND;\nmodule.exports.LUA_OPBNOT = defs.LUA_OPBNOT;\nmodule.exports.LUA_OPBOR = defs.LUA_OPBOR;\nmodule.exports.LUA_OPBXOR = defs.LUA_OPBXOR;\nmodule.exports.LUA_OPDIV = defs.LUA_OPDIV;\nmodule.exports.LUA_OPEQ = defs.LUA_OPEQ;\nmodule.exports.LUA_OPIDIV = defs.LUA_OPIDIV;\nmodule.exports.LUA_OPLE = defs.LUA_OPLE;\nmodule.exports.LUA_OPLT = defs.LUA_OPLT;\nmodule.exports.LUA_OPMOD = defs.LUA_OPMOD;\nmodule.exports.LUA_OPMUL = defs.LUA_OPMUL;\nmodule.exports.LUA_OPPOW = defs.LUA_OPPOW;\nmodule.exports.LUA_OPSHL = defs.LUA_OPSHL;\nmodule.exports.LUA_OPSHR = defs.LUA_OPSHR;\nmodule.exports.LUA_OPSUB = defs.LUA_OPSUB;\nmodule.exports.LUA_OPUNM = defs.LUA_OPUNM;\nmodule.exports.LUA_REGISTRYINDEX = defs.LUA_REGISTRYINDEX;\nmodule.exports.LUA_RELEASE = defs.LUA_RELEASE;\nmodule.exports.LUA_RIDX_GLOBALS = defs.LUA_RIDX_GLOBALS;\nmodule.exports.LUA_RIDX_LAST = defs.LUA_RIDX_LAST;\nmodule.exports.LUA_RIDX_MAINTHREAD = defs.LUA_RIDX_MAINTHREAD;\nmodule.exports.LUA_SIGNATURE = defs.LUA_SIGNATURE;\nmodule.exports.LUA_TNONE = defs.constant_types.LUA_TNONE;\nmodule.exports.LUA_TNIL = defs.constant_types.LUA_TNIL;\nmodule.exports.LUA_TBOOLEAN = defs.constant_types.LUA_TBOOLEAN;\nmodule.exports.LUA_TLIGHTUSERDATA = defs.constant_types.LUA_TLIGHTUSERDATA;\nmodule.exports.LUA_TNUMBER = defs.constant_types.LUA_TNUMBER;\nmodule.exports.LUA_TSTRING = defs.constant_types.LUA_TSTRING;\nmodule.exports.LUA_TTABLE = defs.constant_types.LUA_TTABLE;\nmodule.exports.LUA_TFUNCTION = defs.constant_types.LUA_TFUNCTION;\nmodule.exports.LUA_TUSERDATA = defs.constant_types.LUA_TUSERDATA;\nmodule.exports.LUA_TTHREAD = defs.constant_types.LUA_TTHREAD;\nmodule.exports.LUA_VERSION = defs.LUA_VERSION;\nmodule.exports.LUA_VERSION_MAJOR = defs.LUA_VERSION_MAJOR;\nmodule.exports.LUA_VERSION_MINOR = defs.LUA_VERSION_MINOR;\nmodule.exports.LUA_VERSION_NUM = defs.LUA_VERSION_NUM;\nmodule.exports.LUA_VERSION_RELEASE = defs.LUA_VERSION_RELEASE;\nmodule.exports.LUA_YIELD = defs.thread_status.LUA_YIELD;\nmodule.exports.lua_Debug = defs.lua_Debug;\nmodule.exports.lua_upvalueindex = defs.lua_upvalueindex;\nmodule.exports.lua_absindex = lapi.lua_absindex;\nmodule.exports.lua_arith = lapi.lua_arith;\nmodule.exports.lua_atpanic = lapi.lua_atpanic;\nmodule.exports.lua_atnativeerror = lapi.lua_atnativeerror;\nmodule.exports.lua_call = lapi.lua_call;\nmodule.exports.lua_callk = lapi.lua_callk;\nmodule.exports.lua_checkstack = lapi.lua_checkstack;\nmodule.exports.lua_close = lstate.lua_close;\nmodule.exports.lua_compare = lapi.lua_compare;\nmodule.exports.lua_concat = lapi.lua_concat;\nmodule.exports.lua_copy = lapi.lua_copy;\nmodule.exports.lua_createtable = lapi.lua_createtable;\nmodule.exports.lua_dump = lapi.lua_dump;\nmodule.exports.lua_error = lapi.lua_error;\nmodule.exports.lua_gc = lapi.lua_gc;\nmodule.exports.lua_getallocf = lapi.lua_getallocf;\nmodule.exports.lua_getextraspace = lapi.lua_getextraspace;\nmodule.exports.lua_getfield = lapi.lua_getfield;\nmodule.exports.lua_getglobal = lapi.lua_getglobal;\nmodule.exports.lua_gethook = ldebug.lua_gethook;\nmodule.exports.lua_gethookcount = ldebug.lua_gethookcount;\nmodule.exports.lua_gethookmask = ldebug.lua_gethookmask;\nmodule.exports.lua_geti = lapi.lua_geti;\nmodule.exports.lua_getinfo = ldebug.lua_getinfo;\nmodule.exports.lua_getlocal = ldebug.lua_getlocal;\nmodule.exports.lua_getmetatable = lapi.lua_getmetatable;\nmodule.exports.lua_getstack = ldebug.lua_getstack;\nmodule.exports.lua_gettable = lapi.lua_gettable;\nmodule.exports.lua_gettop = lapi.lua_gettop;\nmodule.exports.lua_getupvalue = lapi.lua_getupvalue;\nmodule.exports.lua_getuservalue = lapi.lua_getuservalue;\nmodule.exports.lua_insert = lapi.lua_insert;\nmodule.exports.lua_isboolean = lapi.lua_isboolean;\nmodule.exports.lua_iscfunction = lapi.lua_iscfunction;\nmodule.exports.lua_isfunction = lapi.lua_isfunction;\nmodule.exports.lua_isinteger = lapi.lua_isinteger;\nmodule.exports.lua_islightuserdata = lapi.lua_islightuserdata;\nmodule.exports.lua_isnil = lapi.lua_isnil;\nmodule.exports.lua_isnone = lapi.lua_isnone;\nmodule.exports.lua_isnoneornil = lapi.lua_isnoneornil;\nmodule.exports.lua_isnumber = lapi.lua_isnumber;\nmodule.exports.lua_isproxy = lapi.lua_isproxy;\nmodule.exports.lua_isstring = lapi.lua_isstring;\nmodule.exports.lua_istable = lapi.lua_istable;\nmodule.exports.lua_isthread = lapi.lua_isthread;\nmodule.exports.lua_isuserdata = lapi.lua_isuserdata;\nmodule.exports.lua_isyieldable = ldo.lua_isyieldable;\nmodule.exports.lua_len = lapi.lua_len;\nmodule.exports.lua_load = lapi.lua_load;\nmodule.exports.lua_newstate = lstate.lua_newstate;\nmodule.exports.lua_newtable = lapi.lua_newtable;\nmodule.exports.lua_newthread = lstate.lua_newthread;\nmodule.exports.lua_newuserdata = lapi.lua_newuserdata;\nmodule.exports.lua_next = lapi.lua_next;\nmodule.exports.lua_pcall = lapi.lua_pcall;\nmodule.exports.lua_pcallk = lapi.lua_pcallk;\nmodule.exports.lua_pop = lapi.lua_pop;\nmodule.exports.lua_pushboolean = lapi.lua_pushboolean;\nmodule.exports.lua_pushcclosure = lapi.lua_pushcclosure;\nmodule.exports.lua_pushcfunction = lapi.lua_pushcfunction;\nmodule.exports.lua_pushfstring = lapi.lua_pushfstring;\nmodule.exports.lua_pushglobaltable = lapi.lua_pushglobaltable;\nmodule.exports.lua_pushinteger = lapi.lua_pushinteger;\nmodule.exports.lua_pushjsclosure = lapi.lua_pushjsclosure;\nmodule.exports.lua_pushjsfunction = lapi.lua_pushjsfunction;\nmodule.exports.lua_pushlightuserdata = lapi.lua_pushlightuserdata;\nmodule.exports.lua_pushliteral = lapi.lua_pushliteral;\nmodule.exports.lua_pushlstring = lapi.lua_pushlstring;\nmodule.exports.lua_pushnil = lapi.lua_pushnil;\nmodule.exports.lua_pushnumber = lapi.lua_pushnumber;\nmodule.exports.lua_pushstring = lapi.lua_pushstring;\nmodule.exports.lua_pushthread = lapi.lua_pushthread;\nmodule.exports.lua_pushvalue = lapi.lua_pushvalue;\nmodule.exports.lua_pushvfstring = lapi.lua_pushvfstring;\nmodule.exports.lua_rawequal = lapi.lua_rawequal;\nmodule.exports.lua_rawget = lapi.lua_rawget;\nmodule.exports.lua_rawgeti = lapi.lua_rawgeti;\nmodule.exports.lua_rawgetp = lapi.lua_rawgetp;\nmodule.exports.lua_rawlen = lapi.lua_rawlen;\nmodule.exports.lua_rawset = lapi.lua_rawset;\nmodule.exports.lua_rawseti = lapi.lua_rawseti;\nmodule.exports.lua_rawsetp = lapi.lua_rawsetp;\nmodule.exports.lua_register = lapi.lua_register;\nmodule.exports.lua_remove = lapi.lua_remove;\nmodule.exports.lua_replace = lapi.lua_replace;\nmodule.exports.lua_resume = ldo.lua_resume;\nmodule.exports.lua_rotate = lapi.lua_rotate;\nmodule.exports.lua_setallof = ldo.lua_setallof;\nmodule.exports.lua_setfield = lapi.lua_setfield;\nmodule.exports.lua_setglobal = lapi.lua_setglobal;\nmodule.exports.lua_sethook = ldebug.lua_sethook;\nmodule.exports.lua_seti = lapi.lua_seti;\nmodule.exports.lua_setlocal = ldebug.lua_setlocal;\nmodule.exports.lua_setmetatable = lapi.lua_setmetatable;\nmodule.exports.lua_settable = lapi.lua_settable;\nmodule.exports.lua_settop = lapi.lua_settop;\nmodule.exports.lua_setupvalue = lapi.lua_setupvalue;\nmodule.exports.lua_setuservalue = lapi.lua_setuservalue;\nmodule.exports.lua_status = lapi.lua_status;\nmodule.exports.lua_stringtonumber = lapi.lua_stringtonumber;\nmodule.exports.lua_toboolean = lapi.lua_toboolean;\nmodule.exports.lua_todataview = lapi.lua_todataview;\nmodule.exports.lua_tointeger = lapi.lua_tointeger;\nmodule.exports.lua_tointegerx = lapi.lua_tointegerx;\nmodule.exports.lua_tojsstring = lapi.lua_tojsstring;\nmodule.exports.lua_tolstring = lapi.lua_tolstring;\nmodule.exports.lua_tonumber = lapi.lua_tonumber;\nmodule.exports.lua_tonumberx = lapi.lua_tonumberx;\nmodule.exports.lua_topointer = lapi.lua_topointer;\nmodule.exports.lua_toproxy = lapi.lua_toproxy;\nmodule.exports.lua_tostring = lapi.lua_tostring;\nmodule.exports.lua_tothread = lapi.lua_tothread;\nmodule.exports.lua_touserdata = lapi.lua_touserdata;\nmodule.exports.lua_type = lapi.lua_type;\nmodule.exports.lua_typename = lapi.lua_typename;\nmodule.exports.lua_upvalueid = lapi.lua_upvalueid;\nmodule.exports.lua_upvaluejoin = lapi.lua_upvaluejoin;\nmodule.exports.lua_version = lapi.lua_version;\nmodule.exports.lua_xmove = lapi.lua_xmove;\nmodule.exports.lua_yield = ldo.lua_yield;\nmodule.exports.lua_yieldk = ldo.lua_yieldk;\nmodule.exports.lua_tocfunction = lapi.lua_tocfunction;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mZW5nYXJpLy4vbm9kZV9tb2R1bGVzL2Zlbmdhcmkvc3JjL2x1YS5qcz9kMDE3Il0sIm5hbWVzIjpbImRlZnMiLCJyZXF1aXJlIiwibGFwaSIsImxkZWJ1ZyIsImxkbyIsImxzdGF0ZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJMVUFfQVVUSE9SUyIsIkxVQV9DT1BZUklHSFQiLCJMVUFfRVJSRVJSIiwidGhyZWFkX3N0YXR1cyIsIkxVQV9FUlJHQ01NIiwiTFVBX0VSUk1FTSIsIkxVQV9FUlJSVU4iLCJMVUFfRVJSU1lOVEFYIiwiTFVBX0hPT0tDQUxMIiwiTFVBX0hPT0tDT1VOVCIsIkxVQV9IT09LTElORSIsIkxVQV9IT09LUkVUIiwiTFVBX0hPT0tUQUlMQ0FMTCIsIkxVQV9NQVNLQ0FMTCIsIkxVQV9NQVNLQ09VTlQiLCJMVUFfTUFTS0xJTkUiLCJMVUFfTUFTS1JFVCIsIkxVQV9NSU5TVEFDSyIsIkxVQV9NVUxUUkVUIiwiTFVBX05VTVRBR1MiLCJjb25zdGFudF90eXBlcyIsIkxVQV9PSyIsIkxVQV9PUEFERCIsIkxVQV9PUEJBTkQiLCJMVUFfT1BCTk9UIiwiTFVBX09QQk9SIiwiTFVBX09QQlhPUiIsIkxVQV9PUERJViIsIkxVQV9PUEVRIiwiTFVBX09QSURJViIsIkxVQV9PUExFIiwiTFVBX09QTFQiLCJMVUFfT1BNT0QiLCJMVUFfT1BNVUwiLCJMVUFfT1BQT1ciLCJMVUFfT1BTSEwiLCJMVUFfT1BTSFIiLCJMVUFfT1BTVUIiLCJMVUFfT1BVTk0iLCJMVUFfUkVHSVNUUllJTkRFWCIsIkxVQV9SRUxFQVNFIiwiTFVBX1JJRFhfR0xPQkFMUyIsIkxVQV9SSURYX0xBU1QiLCJMVUFfUklEWF9NQUlOVEhSRUFEIiwiTFVBX1NJR05BVFVSRSIsIkxVQV9UTk9ORSIsIkxVQV9UTklMIiwiTFVBX1RCT09MRUFOIiwiTFVBX1RMSUdIVFVTRVJEQVRBIiwiTFVBX1ROVU1CRVIiLCJMVUFfVFNUUklORyIsIkxVQV9UVEFCTEUiLCJMVUFfVEZVTkNUSU9OIiwiTFVBX1RVU0VSREFUQSIsIkxVQV9UVEhSRUFEIiwiTFVBX1ZFUlNJT04iLCJMVUFfVkVSU0lPTl9NQUpPUiIsIkxVQV9WRVJTSU9OX01JTk9SIiwiTFVBX1ZFUlNJT05fTlVNIiwiTFVBX1ZFUlNJT05fUkVMRUFTRSIsIkxVQV9ZSUVMRCIsImx1YV9EZWJ1ZyIsImx1YV91cHZhbHVlaW5kZXgiLCJsdWFfYWJzaW5kZXgiLCJsdWFfYXJpdGgiLCJsdWFfYXRwYW5pYyIsImx1YV9hdG5hdGl2ZWVycm9yIiwibHVhX2NhbGwiLCJsdWFfY2FsbGsiLCJsdWFfY2hlY2tzdGFjayIsImx1YV9jbG9zZSIsImx1YV9jb21wYXJlIiwibHVhX2NvbmNhdCIsImx1YV9jb3B5IiwibHVhX2NyZWF0ZXRhYmxlIiwibHVhX2R1bXAiLCJsdWFfZXJyb3IiLCJsdWFfZ2MiLCJsdWFfZ2V0YWxsb2NmIiwibHVhX2dldGV4dHJhc3BhY2UiLCJsdWFfZ2V0ZmllbGQiLCJsdWFfZ2V0Z2xvYmFsIiwibHVhX2dldGhvb2siLCJsdWFfZ2V0aG9va2NvdW50IiwibHVhX2dldGhvb2ttYXNrIiwibHVhX2dldGkiLCJsdWFfZ2V0aW5mbyIsImx1YV9nZXRsb2NhbCIsImx1YV9nZXRtZXRhdGFibGUiLCJsdWFfZ2V0c3RhY2siLCJsdWFfZ2V0dGFibGUiLCJsdWFfZ2V0dG9wIiwibHVhX2dldHVwdmFsdWUiLCJsdWFfZ2V0dXNlcnZhbHVlIiwibHVhX2luc2VydCIsImx1YV9pc2Jvb2xlYW4iLCJsdWFfaXNjZnVuY3Rpb24iLCJsdWFfaXNmdW5jdGlvbiIsImx1YV9pc2ludGVnZXIiLCJsdWFfaXNsaWdodHVzZXJkYXRhIiwibHVhX2lzbmlsIiwibHVhX2lzbm9uZSIsImx1YV9pc25vbmVvcm5pbCIsImx1YV9pc251bWJlciIsImx1YV9pc3Byb3h5IiwibHVhX2lzc3RyaW5nIiwibHVhX2lzdGFibGUiLCJsdWFfaXN0aHJlYWQiLCJsdWFfaXN1c2VyZGF0YSIsImx1YV9pc3lpZWxkYWJsZSIsImx1YV9sZW4iLCJsdWFfbG9hZCIsImx1YV9uZXdzdGF0ZSIsImx1YV9uZXd0YWJsZSIsImx1YV9uZXd0aHJlYWQiLCJsdWFfbmV3dXNlcmRhdGEiLCJsdWFfbmV4dCIsImx1YV9wY2FsbCIsImx1YV9wY2FsbGsiLCJsdWFfcG9wIiwibHVhX3B1c2hib29sZWFuIiwibHVhX3B1c2hjY2xvc3VyZSIsImx1YV9wdXNoY2Z1bmN0aW9uIiwibHVhX3B1c2hmc3RyaW5nIiwibHVhX3B1c2hnbG9iYWx0YWJsZSIsImx1YV9wdXNoaW50ZWdlciIsImx1YV9wdXNoanNjbG9zdXJlIiwibHVhX3B1c2hqc2Z1bmN0aW9uIiwibHVhX3B1c2hsaWdodHVzZXJkYXRhIiwibHVhX3B1c2hsaXRlcmFsIiwibHVhX3B1c2hsc3RyaW5nIiwibHVhX3B1c2huaWwiLCJsdWFfcHVzaG51bWJlciIsImx1YV9wdXNoc3RyaW5nIiwibHVhX3B1c2h0aHJlYWQiLCJsdWFfcHVzaHZhbHVlIiwibHVhX3B1c2h2ZnN0cmluZyIsImx1YV9yYXdlcXVhbCIsImx1YV9yYXdnZXQiLCJsdWFfcmF3Z2V0aSIsImx1YV9yYXdnZXRwIiwibHVhX3Jhd2xlbiIsImx1YV9yYXdzZXQiLCJsdWFfcmF3c2V0aSIsImx1YV9yYXdzZXRwIiwibHVhX3JlZ2lzdGVyIiwibHVhX3JlbW92ZSIsImx1YV9yZXBsYWNlIiwibHVhX3Jlc3VtZSIsImx1YV9yb3RhdGUiLCJsdWFfc2V0YWxsb2YiLCJsdWFfc2V0ZmllbGQiLCJsdWFfc2V0Z2xvYmFsIiwibHVhX3NldGhvb2siLCJsdWFfc2V0aSIsImx1YV9zZXRsb2NhbCIsImx1YV9zZXRtZXRhdGFibGUiLCJsdWFfc2V0dGFibGUiLCJsdWFfc2V0dG9wIiwibHVhX3NldHVwdmFsdWUiLCJsdWFfc2V0dXNlcnZhbHVlIiwibHVhX3N0YXR1cyIsImx1YV9zdHJpbmd0b251bWJlciIsImx1YV90b2Jvb2xlYW4iLCJsdWFfdG9kYXRhdmlldyIsImx1YV90b2ludGVnZXIiLCJsdWFfdG9pbnRlZ2VyeCIsImx1YV90b2pzc3RyaW5nIiwibHVhX3RvbHN0cmluZyIsImx1YV90b251bWJlciIsImx1YV90b251bWJlcngiLCJsdWFfdG9wb2ludGVyIiwibHVhX3RvcHJveHkiLCJsdWFfdG9zdHJpbmciLCJsdWFfdG90aHJlYWQiLCJsdWFfdG91c2VyZGF0YSIsImx1YV90eXBlIiwibHVhX3R5cGVuYW1lIiwibHVhX3VwdmFsdWVpZCIsImx1YV91cHZhbHVlam9pbiIsImx1YV92ZXJzaW9uIiwibHVhX3htb3ZlIiwibHVhX3lpZWxkIiwibHVhX3lpZWxkayIsImx1YV90b2NmdW5jdGlvbiJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBTUEsSUFBSSxHQUFLQyxtQkFBTyxDQUFDLENBQUQsQ0FBdEI7O0FBQ0EsSUFBTUMsSUFBSSxHQUFLRCxtQkFBTyxDQUFDLEVBQUQsQ0FBdEI7O0FBQ0EsSUFBTUUsTUFBTSxHQUFHRixtQkFBTyxDQUFDLEVBQUQsQ0FBdEI7O0FBQ0EsSUFBTUcsR0FBRyxHQUFNSCxtQkFBTyxDQUFDLENBQUQsQ0FBdEI7O0FBQ0EsSUFBTUksTUFBTSxHQUFHSixtQkFBTyxDQUFDLEVBQUQsQ0FBdEI7O0FBRUFLLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlQyxXQUFmLEdBQXlDUixJQUFJLENBQUNRLFdBQTlDO0FBQ0FGLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlRSxhQUFmLEdBQXlDVCxJQUFJLENBQUNTLGFBQTlDO0FBQ0FILE1BQU0sQ0FBQ0MsT0FBUCxDQUFlRyxVQUFmLEdBQXlDVixJQUFJLENBQUNXLGFBQUwsQ0FBbUJELFVBQTVEO0FBQ0FKLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlSyxXQUFmLEdBQXlDWixJQUFJLENBQUNXLGFBQUwsQ0FBbUJDLFdBQTVEO0FBQ0FOLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlTSxVQUFmLEdBQXlDYixJQUFJLENBQUNXLGFBQUwsQ0FBbUJFLFVBQTVEO0FBQ0FQLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlTyxVQUFmLEdBQXlDZCxJQUFJLENBQUNXLGFBQUwsQ0FBbUJHLFVBQTVEO0FBQ0FSLE1BQU0sQ0FB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QzJMLFNBQTlDO0FBQ0F2TCxNQUFNLENBQUNDLE9BQVAsQ0FBZXVMLFNBQWYsR0FBeUMxTCxHQUFHLENBQUMwTCxTQUE3QztBQUNBeEwsTUFBTSxDQUFDQyxPQUFQLENBQWV3TCxVQUFmLEdBQXlDM0wsR0FBRyxDQUFDMkwsVUFBN0M7QUFDQXpMLE1BQU0sQ0FBQ0MsT0FBUCxDQUFleUwsZUFBZixHQUF5QzlMLElBQUksQ0FBQzhMLGVBQTlDIiwiZmlsZSI6IjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgZGVmcyAgID0gcmVxdWlyZShcIi4vZGVmcy5qc1wiKTtcbmNvbnN0IGxhcGkgICA9IHJlcXVpcmUoXCIuL2xhcGkuanNcIik7XG5jb25zdCBsZGVidWcgPSByZXF1aXJlKFwiLi9sZGVidWcuanNcIik7XG5jb25zdCBsZG8gICAgPSByZXF1aXJlKFwiLi9sZG8uanNcIik7XG5jb25zdCBsc3RhdGUgPSByZXF1aXJlKFwiLi9sc3RhdGUuanNcIik7XG5cbm1vZHVsZS5leHBvcnRzLkxVQV9BVVRIT1JTICAgICAgICAgICAgID0gZGVmcy5MVUFfQVVUSE9SUztcbm1vZHVsZS5leHBvcnRzLkxVQV9DT1BZUklHSFQgICAgICAgICAgID0gZGVmcy5MVUFfQ09QWVJJR0hUO1xubW9kdWxlLmV4cG9ydHMuTFVBX0VSUkVSUiAgICAgICAgICAgICAgPSBkZWZzLnRocmVhZF9zdGF0dXMuTFVBX0VSUkVSUjtcbm1vZHVsZS5leHBvcnRzLkxVQV9FUlJHQ01NICAgICAgICAgICAgID0gZGVmcy50aHJlYWRfc3RhdHVzLkxVQV9FUlJHQ01NO1xubW9kdWxlLmV4cG9ydHMuTFVBX0VSUk1FTSAgICAgICAgICAgICAgPSBkZWZzLnRocmVhZF9zdGF0dXMuTFVBX0VSUk1FTTtcbm1vZHVsZS5leHBvcnRzLkxVQV9FUlJSVU4gICAgICAgICAgICAgID0gZGVmcy50aHJlYWRfc3RhdHVzLkxVQV9FUlJSVU47XG5tb2R1bGUuZXhwb3J0cy5MVUFfRVJSU1lOVEFYICAgICAgICAgICA9IGRlZnMudGhyZWFkX3N0YXR1cy5MVUFfRVJSU1lOVEFYO1xubW9kdWxlLmV4cG9ydHMuTFVBX0hPT0tDQUxMICAgICAgICAgICAgPSBkZWZzLkxVQV9IT09LQ0FMTDtcbm1vZHVsZS5leHBvcnRzLkxVQV9IT09LQ09VTlQgICAgICAgICAgID0gZGVmcy5MVUFfSE9PS0NPVU5UO1xubW9kdWxlLmV4cG9ydHMuTFVBX0hPT0tMSU5FICAgICAgICAgICAgPSBkZWZzLkxVQV9IT09LTElORTtcbm1vZHVsZS5leHBvcnRzLkxVQV9IT09LUkVUICAgICAgICAgICAgID0gZGVmcy5MVUFfSE9PS1JFVDtcbm1vZHVsZS5leHBvcnRzLkxVQV9IT09LVEFJTENBTEwgICAgICAgID0gZGVmcy5MVUFfSE9PS1RBSUxDQUxMO1xubW9kdWxlLmV4cG9ydHMuTFVBX01BU0tDQUxMICAgICAgICAgICAgPSBkZWZzLkxVQV9NQVNLQ0FMTDtcbm1vZHVsZS5leHBvcnRzLkxVQV9NQVNLQ09VTlQgICAgICAgICAgID0gZGVmcy5MVUFfTUFTS0NPVU5UO1xubW9kdWxlLmV4cG9ydHMuTFVBX01BU0tMSU5FICAgICAgICAgICAgPSBkZWZzLkxVQV9NQVNLTElORTtcbm1vZHVsZS5leHBvcnRzLkxVQV9NQVNLUkVUICAgICAgICAgICAgID0gZGVmcy5MVUFfTUFTS1JFVDtcbm1vZHVsZS5leHBvcnRzLkxVQV9NSU5TVEFDSyAgICAgICAgICAgID0gZGVmcy5MVUFfTUlOU1RBQ0s7XG5tb2R1bGUuZXhwb3J0cy5MVUFfTVVMVFJFVCAgICAgICAgICAgICA9IGRlZnMuTFVBX01VTFRSRVQ7XG5tb2R1bGUuZXhwb3J0cy5MVUFfTlVNVEFHUyAgICAgICAgICAgICA9IGRlZnMuY29uc3RhbnRfdHlwZXMuTFVBX05VTVRBR1M7XG5tb2R1bGUuZXhwb3J0cy5MVUFfT0sgICAgICAgICAgICAgICAgICA9IGRlZnMudGhyZWFkX3N0YXR1cy5MVUFfT0s7XG5tb2R1bGUuZXhwb3J0cy5MVUFfT1BBREQgICAgICAgICAgICAgICA9IGRlZnMuTFVBX09QQUREO1xubW9kdWxlLmV4cG9ydHMuTFVBX09QQkFORCAgICAgICAgICAgICAgPSBkZWZzLkxVQV9PUEJBTkQ7XG5tb2R1bGUuZXhwb3J0cy5MVUFfT1BCTk9UICAgICAgICAgICAgICA9IGRlZnMuTFVBX09QQk5PVDtcbm1vZHVsZS5leHBvcnRzLkxVQV9PUEJPUiAgICAgICAgICAgICAgID0gZGVmcy5MVUFfT1BCT1I7XG5tb2R1bGUuZXhwb3J0cy5MVUFfT1BCWE9SICAgICAgICAgICAgICA9IGRlZnMuTFVBX09QQlhPUjtcbm1vZHVsZS5leHBvcnRzLkxVQV9PUERJViAgICAgICAgICAgICAgID0gZGVmcy5MVUFfT1BESVY7XG5tb2R1bGUuZXhwb3J0cy5MVUFfT1BFUSAgICAgICAgICAgICAgICA9IGRlZnMuTFVBX09QRVE7XG5tb2R1bGUuZXhwb3J0cy5MVUFfT1BJRElWICAgICAgICAgICAgICA9IGRlZnMuTFVBX09QSURJVjtcbm1vZHVsZS5leHBvcnRzLkxVQV9PUExFICAgICAgICAgICAgICAgID0gZGVmcy5MVUFfT1BMRTtcbm1vZHVsZS5leHBvcnRzLkxVQV9PUExUICAgICAgICAgICAgICAgID0gZGVmcy5MVUFfT1BMVDtcbm1vZHVsZS5leHBvcnRzLkxVQV9PUE1PRCAgICAgICAgICAgICAgID0gZGVmcy5MVUFfT1BNT0Q7XG5tb2R1bGUuZXhwb3J0cy5MVUFfT1BNVUwgICAgICAgICAgICAgICA9IGRlZnMuTFVBX09QTVVMO1xubW9kdWxlLmV4cG9ydHMuTFVBX09QUE9XICAgICAgICAgICAgICAgPSBkZWZzLkxVQV9PUFBPVztcbm1vZHVsZS5leHBvcnRzLkxVQV9PUFNITCAgICAgICAgICAgICAgID0gZGVmcy5MVUFfT1BTSEw7XG5tb2R1bGUuZXhwb3J0cy5MVUFfT1BTSFIgICAgICAgICAgICAgICA9IGRlZnMuTFVBX09QU0hSO1xubW9kdWxlLmV4cG9ydHMuTFVBX09QU1VCICAgICAgICAgICAgICAgPSBkZWZzLkxVQV9PUFNVQjtcbm1vZHVsZS5leHBvcnRzLkxVQV9PUFVOTSAgICAgICAgICAgICAgID0gZGVmcy5MVUFfT1BVTk07XG5tb2R1bGUuZXhwb3J0cy5MVUFfUkVHSVNUUllJTkRFWCAgICAgICA9IGRlZnMuTFVBX1JFR0lTVFJZSU5ERVg7XG5tb2R1bGUuZXhwb3J0cy5MVUFfUkVMRUFTRSAgICAgICAgICAgICA9IGRlZnMuTFVBX1JFTEVBU0U7XG5tb2R1bGUuZXhwb3J0cy5MVUFfUklEWF9HTE9CQUxTICAgICAgICA9IGRlZnMuTFVBX1JJRFhfR0xPQkFMUztcbm1vZHVsZS5leHBvcnRzLkxVQV9SSURYX0xBU1QgICAgICAgICAgID0gZGVmcy5MVUFfUklEWF9MQVNUO1xubW9kdWxlLmV4cG9ydHMuTFVBX1JJRFhfTUFJTlRIUkVBRCAgICAgPSBkZWZzLkxVQV9SSURYX01BSU5USFJFQUQ7XG5tb2R1bGUuZXhwb3J0cy5MVUFfU0lHTkFUVVJFICAgICAgICAgICA9IGRlZnMuTFVBX1NJR05BVFVSRTtcbm1vZHVsZS5leHBvcnRzLkxVQV9UTk9ORSAgICAgICAgICAgICAgID0gZGVmcy5jb25zdGFudF90eXBlcy5MVUFfVE5PTkU7XG5tb2R1bGUuZXhwb3J0cy5MVUFfVE5JTCAgICAgICAgICAgICAgICA9IGRlZnMuY29uc3RhbnRfdHlwZXMuTFVBX1ROSUw7XG5tb2R1bGUuZXhwb3J0cy5MVUFfVEJPT0xFQU4gICAgICAgICAgICA9IGRlZnMuY29uc3RhbnRfdHlwZXMuTFVBX1RCT09MRUFOO1xubW9kdWxlLmV4cG9ydHMuTFVBX1RMSUdIVFVTRVJEQVRBICAgICAgPSBkZWZzLmNvbnN0YW50X3R5cGVzLkxVQV9UTElHSFRVU0VSREFUQTtcbm1vZHVsZS5leHBvcnRzLkxVQV9UTlVNQkVSICAgICAgICAgICAgID0gZGVmcy5jb25zdGFudF90eXBlcy5MVUFfVE5VTUJFUjtcbm1vZHVsZS5leHBvcnRzLkxVQV9UU1RSSU5HICAgICAgICAgICAgID0gZGVmcy5jb25zdGFudF90eXBlcy5MVUFfVFNUUklORztcbm1vZHVsZS5leHBvcnRzLkxVQV9UVEFCTEUgICAgICAgICAgICAgID0gZGVmcy5jb25zdGFudF90eXBlcy5MVUFfVFRBQkxFO1xubW9kdWxlLmV4cG9ydHMuTFVBX1RGVU5DVElPTiAgICAgICAgICAgPSBkZWZzLmNvbnN0YW50X3R5cGVzLkxVQV9URlVOQ1RJT047XG5tb2R1bGUuZXhwb3J0cy5MVUFfVFVTRVJEQVRBICAgICAgICAgICA9IGRlZnMuY29uc3RhbnRfdHlwZXMuTFVBX1RVU0VSREFUQTtcbm1vZHVsZS5leHBvcnRzLkxVQV9UVEhSRUFEICAgICAgICAgICAgID0gZGVmcy5jb25zdGFudF90eXBlcy5MVUFfVFRIUkVBRDtcbm1vZHVsZS5leHBvcnRzLkxVQV9WRVJTSU9OICAgICAgICAgICAgID0gZGVmcy5MVUFfVkVSU0lPTjtcbm1vZHVsZS5leHBvcnRzLkxVQV9WRVJTSU9OX01BSk9SICAgICAgID0gZGVmcy5MVUFfVkVSU0lPTl9NQUpPUjtcbm1vZHVsZS5leHBvcnRzLkxVQV9WRVJTSU9OX01JTk9SICAgICAgID0gZGVmcy5MVUFfVkVSU0lPTl9NSU5PUjtcbm1vZHVsZS5leHBvcnRzLkxVQV9WRVJTSU9OX05VTSAgICAgICAgID0gZGVmcy5MVUFfVkVSU0lPTl9OVU07XG5tb2R1bGUuZXhwb3J0cy5MVUFfVkVSU0lPTl9SRUxFQVNFICAgICA9IGRlZnMuTFVBX1ZFUlNJT05fUkVMRUFTRTtcbm1vZHVsZS5leHBvcnRzLkxVQV9ZSUVMRCAgICAgICAgICAgICAgID0gZGVmcy50aHJlYWRfc3RhdHVzLkxVQV9ZSUVMRDtcbm1vZHVsZS5leHBvcnRzLmx1YV9EZWJ1ZyAgICAgICAgICAgICAgID0gZGVmcy5sdWFfRGVidWc7XG5tb2R1bGUuZXhwb3J0cy5sdWFfdXB2YWx1ZWluZGV4ICAgICAgICA9IGRlZnMubHVhX3VwdmFsdWVpbmRleDtcbm1vZHVsZS5leHBvcnRzLmx1YV9hYnNpbmRleCAgICAgICAgICAgID0gbGFwaS5sdWFfYWJzaW5kZXg7XG5tb2R1bGUuZXhwb3J0cy5sdWFfYXJpdGggICAgICAgICAgICAgICA9IGxhcGkubHVhX2FyaXRoO1xubW9kdWxlLmV4cG9ydHMubHVhX2F0cGFuaWMgICAgICAgICAgICAgPSBsYXBpLmx1YV9hdHBhbmljO1xubW9kdWxlLmV4cG9ydHMubHVhX2F0bmF0aXZlZXJyb3IgICAgICAgPSBsYXBpLmx1YV9hdG5hdGl2ZWVycm9yO1xubW9kdWxlLmV4cG9ydHMubHVhX2NhbGwgICAgICAgICAgICAgICAgPSBsYXBpLmx1YV9jYWxsO1xubW9kdWxlLmV4cG9ydHMubHVhX2NhbGxrICAgICAgICAgICAgICAgPSBsYXBpLmx1YV9jYWxsaztcbm1vZHVsZS5leHBvcnRzLmx1YV9jaGVja3N0YWNrICAgICAgICAgID0gbGFwaS5sdWFfY2hlY2tzdGFjaztcbm1vZHVsZS5leHBvcnRzLmx1YV9jbG9zZSAgICAgICAgICAgICAgID0gbHN0YXRlLmx1YV9jbG9zZTtcbm1vZHVsZS5leHBvcnRzLmx1YV9jb21wYXJlICAgICAgICAgICAgID0gbGFwaS5sdWFfY29tcGFyZTtcbm1vZHVsZS5leHBvcnRzLmx1YV9jb25jYXQgICAgICAgICAgICAgID0gbGFwaS5sdWFfY29uY2F0O1xubW9kdWxlLmV4cG9ydHMubHVhX2NvcHkgICAgICAgICAgICAgICAgPSBsYXBpLmx1YV9jb3B5O1xubW9kdWxlLmV4cG9ydHMubHVhX2NyZWF0ZXRhYmxlICAgICAgICAgPSBsYXBpLmx1YV9jcmVhdGV0YWJsZTtcbm1vZHVsZS5leHBvcnRzLmx1YV9kdW1wICAgICAgICAgICAgICAgID0gbGFwaS5sdWFfZHVtcDtcbm1vZHVsZS5leHBvcnRzLmx1YV9lcnJvciAgICAgICAgICAgICAgID0gbGFwaS5sdWFfZXJyb3I7XG5tb2R1bGUuZXhwb3J0cy5sdWFfZ2MgICAgICAgICAgICAgICAgICA9IGxhcGkubHVhX2djO1xubW9kdWxlLmV4cG9ydHMubHVhX2dldGFsbG9jZiAgICAgICAgICAgPSBsYXBpLmx1YV9nZXRhbGxvY2Y7XG5tb2R1bGUuZXhwb3J0cy5sdWFfZ2V0ZXh0cmFzcGFjZSAgICAgICA9IGxhcGkubHVhX2dldGV4dHJhc3BhY2U7XG5tb2R1bGUuZXhwb3J0cy5sdWFfZ2V0ZmllbGQgICAgICAgICAgICA9IGxhcGkubHVhX2dldGZpZWxkO1xubW9kdWxlLmV4cG9ydHMubHVhX2dldGdsb2JhbCAgICAgICAgICAgPSBsYXBpLmx1YV9nZXRnbG9iYWw7XG5tb2R1bGUuZXhwb3J0cy5sdWFfZ2V0aG9vayAgICAgICAgICAgICA9IGxkZWJ1Zy5sdWFfZ2V0aG9vaztcbm1vZHVsZS5leHBvcnRzLmx1YV9nZXRob29rY291bnQgICAgICAgID0gbGRlYnVnLmx1YV9nZXRob29rY291bnQ7XG5tb2R1bGUuZXhwb3J0cy5sdWFfZ2V0aG9va21hc2sgICAgICAgICA9IGxkZWJ1Zy5sdWFfZ2V0aG9va21hc2s7XG5tb2R1bGUuZXhwb3J0cy5sdWFfZ2V0aSAgICAgICAgICAgICAgICA9IGxhcGkubHVhX2dldGk7XG5tb2R1bGUuZXhwb3J0cy5sdWFfZ2V0aW5mbyAgICAgICAgICAgICA9IGxkZWJ1Zy5sdWFfZ2V0aW5mbztcbm1vZHVsZS5leHBvcnRzLmx1YV9nZXRsb2NhbCAgICAgICAgICAgID0gbGRlYnVnLmx1YV9nZXRsb2NhbDtcbm1vZHVsZS5leHBvcnRzLmx1YV9nZXRtZXRhdGFibGUgICAgICAgID0gbGFwaS5sdWFfZ2V0bWV0YXRhYmxlO1xubW9kdWxlLmV4cG9ydHMubHVhX2dldHN0YWNrICAgICAgICAgICAgPSBsZGVidWcubHVhX2dldHN0YWNrO1xubW9kdWxlLmV4cG9ydHMubHVhX2dldHRhYmxlICAgICAgICAgICAgPSBsYXBpLmx1YV9nZXR0YWJsZTtcbm1vZHVsZS5leHBvcnRzLmx1YV9nZXR0b3AgICAgICAgICAgICAgID0gbGFwaS5sdWFfZ2V0dG9wO1xubW9kdWxlLmV4cG9ydHMubHVhX2dldHVwdmFsdWUgICAgICAgICAgPSBsYXBpLmx1YV9nZXR1cHZhbHVlO1xubW9kdWxlLmV4cG9ydHMubHVhX2dldHVzZXJ2YWx1ZSAgICAgICAgPSBsYXBpLmx1YV9nZXR1c2VydmFsdWU7XG5tb2R1bGUuZXhwb3J0cy5sdWFfaW5zZXJ0ICAgICAgICAgICAgICA9IGxhcGkubHVhX2luc2VydDtcbm1vZHVsZS5leHBvcnRzLmx1YV9pc2Jvb2xlYW4gICAgICAgICAgID0gbGFwaS5sdWFfaXNib29sZWFuO1xubW9kdWxlLmV4cG9ydHMubHVhX2lzY2Z1bmN0aW9uICAgICAgICAgPSBsYXBpLmx1YV9pc2NmdW5jdGlvbjtcbm1vZHVsZS5leHBvcnRzLmx1YV9pc2Z1bmN0aW9uICAgICAgICAgID0gbGFwaS5sdWFfaXNmdW5jdGlvbjtcbm1vZHVsZS5leHBvcnRzLmx1YV9pc2ludGVnZXIgICAgICAgICAgID0gbGFwaS5sdWFfaXNpbnRlZ2VyO1xubW9kdWxlLmV4cG9ydHMubHVhX2lzbGlnaHR1c2VyZGF0YSAgICAgPSBsYXBpLmx1YV9pc2xpZ2h0dXNlcmRhdGE7XG5tb2R1bGUuZXhwb3J0cy5sdWFfaXNuaWwgICAgICAgICAgICAgICA9IGxhcGkubHVhX2lzbmlsO1xubW9kdWxlLmV4cG9ydHMubHVhX2lzbm9uZSAgICAgICAgICAgICAgPSBsYXBpLmx1YV9pc25vbmU7XG5tb2R1bGUuZXhwb3J0cy5sdWFfaXNub25lb3JuaWwgICAgICAgICA9IGxhcGkubHVhX2lzbm9uZW9ybmlsO1xubW9kdWxlLmV4cG9ydHMubHVhX2lzbnVtYmVyICAgICAgICAgICAgPSBsYXBpLmx1YV9pc251bWJlcjtcbm1vZHVsZS5leHBvcnRzLmx1YV9pc3Byb3h5ICAgICAgICAgICAgID0gbGFwaS5sdWFfaXNwcm94eTtcbm1vZHVsZS5leHBvcnRzLmx1YV9pc3N0cmluZyAgICAgICAgICAgID0gbGFwaS5sdWFfaXNzdHJpbmc7XG5tb2R1bGUuZXhwb3J0cy5sdWFfaXN0YWJsZSAgICAgICAgICAgICA9IGxhcGkubHVhX2lzdGFibGU7XG5tb2R1bGUuZXhwb3J0cy5sdWFfaXN0aHJlYWQgICAgICAgICAgICA9IGxhcGkubHVhX2lzdGhyZWFkO1xubW9kdWxlLmV4cG9ydHMubHVhX2lzdXNlcmRhdGEgICAgICAgICAgPSBsYXBpLmx1YV9pc3VzZXJkYXRhO1xubW9kdWxlLmV4cG9ydHMubHVhX2lzeWllbGRhYmxlICAgICAgICAgPSBsZG8ubHVhX2lzeWllbGRhYmxlO1xubW9kdWxlLmV4cG9ydHMubHVhX2xlbiAgICAgICAgICAgICAgICAgPSBsYXBpLmx1YV9sZW47XG5tb2R1bGUuZXhwb3J0cy5sdWFfbG9hZCAgICAgICAgICAgICAgICA9IGxhcGkubHVhX2xvYWQ7XG5tb2R1bGUuZXhwb3J0cy5sdWFfbmV3c3RhdGUgICAgICAgICAgICA9IGxzdGF0ZS5sdWFfbmV3c3RhdGU7XG5tb2R1bGUuZXhwb3J0cy5sdWFfbmV3dGFibGUgICAgICAgICAgICA9IGxhcGkubHVhX25ld3RhYmxlO1xubW9kdWxlLmV4cG9ydHMubHVhX25ld3RocmVhZCAgICAgICAgICAgPSBsc3RhdGUubHVhX25ld3RocmVhZDtcbm1vZHVsZS5leHBvcnRzLmx1YV9uZXd1c2VyZGF0YSAgICAgICAgID0gbGFwaS5sdWFfbmV3dXNlcmRhdGE7XG5tb2R1bGUuZXhwb3J0cy5sdWFfbmV4dCAgICAgICAgICAgICAgICA9IGxhcGkubHVhX25leHQ7XG5tb2R1bGUuZXhwb3J0cy5sdWFfcGNhbGwgICAgICAgICAgICAgICA9IGxhcGkubHVhX3BjYWxsO1xubW9kdWxlLmV4cG9ydHMubHVhX3BjYWxsayAgICAgICAgICAgICAgPSBsYXBpLmx1YV9wY2FsbGs7XG5tb2R1bGUuZXhwb3J0cy5sdWFfcG9wICAgICAgICAgICAgICAgICA9IGxhcGkubHVhX3BvcDtcbm1vZHVsZS5leHBvcnRzLmx1YV9wdXNoYm9vbGVhbiAgICAgICAgID0gbGFwaS5sdWFfcHVzaGJvb2xlYW47XG5tb2R1bGUuZXhwb3J0cy5sdWFfcHVzaGNjbG9zdXJlICAgICAgICA9IGxhcGkubHVhX3B1c2hjY2xvc3VyZTtcbm1vZHVsZS5leHBvcnRzLmx1YV9wdXNoY2Z1bmN0aW9uICAgICAgID0gbGFwaS5sdWFfcHVzaGNmdW5jdGlvbjtcbm1vZHVsZS5leHBvcnRzLmx1YV9wdXNoZnN0cmluZyAgICAgICAgID0gbGFwaS5sdWFfcHVzaGZzdHJpbmc7XG5tb2R1bGUuZXhwb3J0cy5sdWFfcHVzaGdsb2JhbHRhYmxlICAgICA9IGxhcGkubHVhX3B1c2hnbG9iYWx0YWJsZTtcbm1vZHVsZS5leHBvcnRzLmx1YV9wdXNoaW50ZWdlciAgICAgICAgID0gbGFwaS5sdWFfcHVzaGludGVnZXI7XG5tb2R1bGUuZXhwb3J0cy5sdWFfcHVzaGpzY2xvc3VyZSAgICAgICA9IGxhcGkubHVhX3B1c2hqc2Nsb3N1cmU7XG5tb2R1bGUuZXhwb3J0cy5sdWFfcHVzaGpzZnVuY3Rpb24gICAgICA9IGxhcGkubHVhX3B1c2hqc2Z1bmN0aW9uO1xubW9kdWxlLmV4cG9ydHMubHVhX3B1c2hsaWdodHVzZXJkYXRhICAgPSBsYXBpLmx1YV9wdXNobGlnaHR1c2VyZGF0YTtcbm1vZHVsZS5leHBvcnRzLmx1YV9wdXNobGl0ZXJhbCAgICAgICAgID0gbGFwaS5sdWFfcHVzaGxpdGVyYWw7XG5tb2R1bGUuZXhwb3J0cy5sdWFfcHVzaGxzdHJpbmcgICAgICAgICA9IGxhcGkubHVhX3B1c2hsc3RyaW5nO1xubW9kdWxlLmV4cG9ydHMubHVhX3B1c2huaWwgICAgICAgICAgICAgPSBsYXBpLmx1YV9wdXNobmlsO1xubW9kdWxlLmV4cG9ydHMubHVhX3B1c2hudW1iZXIgICAgICAgICAgPSBsYXBpLmx1YV9wdXNobnVtYmVyO1xubW9kdWxlLmV4cG9ydHMubHVhX3B1c2hzdHJpbmcgICAgICAgICAgPSBsYXBpLmx1YV9wdXNoc3RyaW5nO1xubW9kdWxlLmV4cG9ydHMubHVhX3B1c2h0aHJlYWQgICAgICAgICAgPSBsYXBpLmx1YV9wdXNodGhyZWFkO1xubW9kdWxlLmV4cG9ydHMubHVhX3B1c2h2YWx1ZSAgICAgICAgICAgPSBsYXBpLmx1YV9wdXNodmFsdWU7XG5tb2R1bGUuZXhwb3J0cy5sdWFfcHVzaHZmc3RyaW5nICAgICAgICA9IGxhcGkubHVhX3B1c2h2ZnN0cmluZztcbm1vZHVsZS5leHBvcnRzLmx1YV9yYXdlcXVhbCAgICAgICAgICAgID0gbGFwaS5sdWFfcmF3ZXF1YWw7XG5tb2R1bGUuZXhwb3J0cy5sdWFfcmF3Z2V0ICAgICAgICAgICAgICA9IGxhcGkubHVhX3Jhd2dldDtcbm1vZHVsZS5leHBvcnRzLmx1YV9yYXdnZXRpICAgICAgICAgICAgID0gbGFwaS5sdWFfcmF3Z2V0aTtcbm1vZHVsZS5leHBvcnRzLmx1YV9yYXdnZXRwICAgICAgICAgICAgID0gbGFwaS5sdWFfcmF3Z2V0cDtcbm1vZHVsZS5leHBvcnRzLmx1YV9yYXdsZW4gICAgICAgICAgICAgID0gbGFwaS5sdWFfcmF3bGVuO1xubW9kdWxlLmV4cG9ydHMubHVhX3Jhd3NldCAgICAgICAgICAgICAgPSBsYXBpLmx1YV9yYXdzZXQ7XG5tb2R1bGUuZXhwb3J0cy5sdWFfcmF3c2V0aSAgICAgICAgICAgICA9IGxhcGkubHVhX3Jhd3NldGk7XG5tb2R1bGUuZXhwb3J0cy5sdWFfcmF3c2V0cCAgICAgICAgICAgICA9IGxhcGkubHVhX3Jhd3NldHA7XG5tb2R1bGUuZXhwb3J0cy5sdWFfcmVnaXN0ZXIgICAgICAgICAgICA9IGxhcGkubHVhX3JlZ2lzdGVyO1xubW9kdWxlLmV4cG9ydHMubHVhX3JlbW92ZSAgICAgICAgICAgICAgPSBsYXBpLmx1YV9yZW1vdmU7XG5tb2R1bGUuZXhwb3J0cy5sdWFfcmVwbGFjZSAgICAgICAgICAgICA9IGxhcGkubHVhX3JlcGxhY2U7XG5tb2R1bGUuZXhwb3J0cy5sdWFfcmVzdW1lICAgICAgICAgICAgICA9IGxkby5sdWFfcmVzdW1lO1xubW9kdWxlLmV4cG9ydHMubHVhX3JvdGF0ZSAgICAgICAgICAgICAgPSBsYXBpLmx1YV9yb3RhdGU7XG5tb2R1bGUuZXhwb3J0cy5sdWFfc2V0YWxsb2YgICAgICAgICAgICA9IGxkby5sdWFfc2V0YWxsb2Y7XG5tb2R1bGUuZXhwb3J0cy5sdWFfc2V0ZmllbGQgICAgICAgICAgICA9IGxhcGkubHVhX3NldGZpZWxkO1xubW9kdWxlLmV4cG9ydHMubHVhX3NldGdsb2JhbCAgICAgICAgICAgPSBsYXBpLmx1YV9zZXRnbG9iYWw7XG5tb2R1bGUuZXhwb3J0cy5sdWFfc2V0aG9vayAgICAgICAgICAgICA9IGxkZWJ1Zy5sdWFfc2V0aG9vaztcbm1vZHVsZS5leHBvcnRzLmx1YV9zZXRpICAgICAgICAgICAgICAgID0gbGFwaS5sdWFfc2V0aTtcbm1vZHVsZS5leHBvcnRzLmx1YV9zZXRsb2NhbCAgICAgICAgICAgID0gbGRlYnVnLmx1YV9zZXRsb2NhbDtcbm1vZHVsZS5leHBvcnRzLmx1YV9zZXRtZXRhdGFibGUgICAgICAgID0gbGFwaS5sdWFfc2V0bWV0YXRhYmxlO1xubW9kdWxlLmV4cG9ydHMubHVhX3NldHRhYmxlICAgICAgICAgICAgPSBsYXBpLmx1YV9zZXR0YWJsZTtcbm1vZHVsZS5leHBvcnRzLmx1YV9zZXR0b3AgICAgICAgICAgICAgID0gbGFwaS5sdWFfc2V0dG9wO1xubW9kdWxlLmV4cG9ydHMubHVhX3NldHVwdmFsdWUgICAgICAgICAgPSBsYXBpLmx1YV9zZXR1cHZhbHVlO1xubW9kdWxlLmV4cG9ydHMubHVhX3NldHVzZXJ2YWx1ZSAgICAgICAgPSBsYXBpLmx1YV9zZXR1c2VydmFsdWU7XG5tb2R1bGUuZXhwb3J0cy5sdWFfc3RhdHVzICAgICAgICAgICAgICA9IGxhcGkubHVhX3N0YXR1cztcbm1vZHVsZS5leHBvcnRzLmx1YV9zdHJpbmd0b251bWJlciAgICAgID0gbGFwaS5sdWFfc3RyaW5ndG9udW1iZXI7XG5tb2R1bGUuZXhwb3J0cy5sdWFfdG9ib29sZWFuICAgICAgICAgICA9IGxhcGkubHVhX3RvYm9vbGVhbjtcbm1vZHVsZS5leHBvcnRzLmx1YV90b2RhdGF2aWV3ICAgICAgICAgID0gbGFwaS5sdWFfdG9kYXRhdmlldztcbm1vZHVsZS5leHBvcnRzLmx1YV90b2ludGVnZXIgICAgICAgICAgID0gbGFwaS5sdWFfdG9pbnRlZ2VyO1xubW9kdWxlLmV4cG9ydHMubHVhX3RvaW50ZWdlcnggICAgICAgICAgPSBsYXBpLmx1YV90b2ludGVnZXJ4O1xubW9kdWxlLmV4cG9ydHMubHVhX3RvanNzdHJpbmcgICAgICAgICAgPSBsYXBpLmx1YV90b2pzc3RyaW5nO1xubW9kdWxlLmV4cG9ydHMubHVhX3RvbHN0cmluZyAgICAgICAgICAgPSBsYXBpLmx1YV90b2xzdHJpbmc7XG5tb2R1bGUuZXhwb3J0cy5sdWFfdG9udW1iZXIgICAgICAgICAgICA9IGxhcGkubHVhX3RvbnVtYmVyO1xubW9kdWxlLmV4cG9ydHMubHVhX3RvbnVtYmVyeCAgICAgICAgICAgPSBsYXBpLmx1YV90b251bWJlcng7XG5tb2R1bGUuZXhwb3J0cy5sdWFfdG9wb2ludGVyICAgICAgICAgICA9IGxhcGkubHVhX3RvcG9pbnRlcjtcbm1vZHVsZS5leHBvcnRzLmx1YV90b3Byb3h5ICAgICAgICAgICAgID0gbGFwaS5sdWFfdG9wcm94eTtcbm1vZHVsZS5leHBvcnRzLmx1YV90b3N0cmluZyAgICAgICAgICAgID0gbGFwaS5sdWFfdG9zdHJpbmc7XG5tb2R1bGUuZXhwb3J0cy5sdWFfdG90aHJlYWQgICAgICAgICAgICA9IGxhcGkubHVhX3RvdGhyZWFkO1xubW9kdWxlLmV4cG9ydHMubHVhX3RvdXNlcmRhdGEgICAgICAgICAgPSBsYXBpLmx1YV90b3VzZXJkYXRhO1xubW9kdWxlLmV4cG9ydHMubHVhX3R5cGUgICAgICAgICAgICAgICAgPSBsYXBpLmx1YV90eXBlO1xubW9kdWxlLmV4cG9ydHMubHVhX3R5cGVuYW1lICAgICAgICAgICAgPSBsYXBpLmx1YV90eXBlbmFtZTtcbm1vZHVsZS5leHBvcnRzLmx1YV91cHZhbHVlaWQgICAgICAgICAgID0gbGFwaS5sdWFfdXB2YWx1ZWlkO1xubW9kdWxlLmV4cG9ydHMubHVhX3VwdmFsdWVqb2luICAgICAgICAgPSBsYXBpLmx1YV91cHZhbHVlam9pbjtcbm1vZHVsZS5leHBvcnRzLmx1YV92ZXJzaW9uICAgICAgICAgICAgID0gbGFwaS5sdWFfdmVyc2lvbjtcbm1vZHVsZS5leHBvcnRzLmx1YV94bW92ZSAgICAgICAgICAgICAgID0gbGFwaS5sdWFfeG1vdmU7XG5tb2R1bGUuZXhwb3J0cy5sdWFfeWllbGQgICAgICAgICAgICAgICA9IGxkby5sdWFfeWllbGQ7XG5tb2R1bGUuZXhwb3J0cy5sdWFfeWllbGRrICAgICAgICAgICAgICA9IGxkby5sdWFfeWllbGRrO1xubW9kdWxlLmV4cG9ydHMubHVhX3RvY2Z1bmN0aW9uICAgICAgICAgPSBsYXBpLmx1YV90b2NmdW5jdGlvbjtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2\n")},function(module,exports,__webpack_require__){"use strict";eval('\n\nvar conf = void 0 ? JSON.parse(void 0) : {};\n\nvar _require = __webpack_require__(1),\n    LUA_VERSION_MAJOR = _require.LUA_VERSION_MAJOR,\n    LUA_VERSION_MINOR = _require.LUA_VERSION_MINOR,\n    to_luastring = _require.to_luastring;\n/*\n** LUA_PATH_SEP is the character that separates templates in a path.\n** LUA_PATH_MARK is the string that marks the substitution points in a\n** template.\n** LUA_EXEC_DIR in a Windows path is replaced by the executable\'s\n** directory.\n*/\n\n\nvar LUA_PATH_SEP = ";";\nmodule.exports.LUA_PATH_SEP = LUA_PATH_SEP;\nvar LUA_PATH_MARK = "?";\nmodule.exports.LUA_PATH_MARK = LUA_PATH_MARK;\nvar LUA_EXEC_DIR = "!";\nmodule.exports.LUA_EXEC_DIR = LUA_EXEC_DIR;\n/*\n@@ LUA_PATH_DEFAULT is the default path that Lua uses to look for\n** Lua libraries.\n@@ LUA_JSPATH_DEFAULT is the default path that Lua uses to look for\n** JS libraries.\n** CHANGE them if your machine has a non-conventional directory\n** hierarchy or if you want to install your libraries in\n** non-conventional directories.\n*/\n\nvar LUA_VDIR = LUA_VERSION_MAJOR + "." + LUA_VERSION_MINOR;\nmodule.exports.LUA_VDIR = LUA_VDIR;\n\nif (true) {\n  var LUA_DIRSEP = "/";\n  module.exports.LUA_DIRSEP = LUA_DIRSEP;\n  var LUA_LDIR = "./lua/" + LUA_VDIR + "/";\n  module.exports.LUA_LDIR = LUA_LDIR;\n  var LUA_JSDIR = LUA_LDIR;\n  module.exports.LUA_JSDIR = LUA_JSDIR;\n  var LUA_PATH_DEFAULT = to_luastring(LUA_LDIR + "?.lua;" + LUA_LDIR + "?/init.lua;" +\n  /* LUA_JSDIR excluded as it is equal to LUA_LDIR */\n  "./?.lua;./?/init.lua");\n  module.exports.LUA_PATH_DEFAULT = LUA_PATH_DEFAULT;\n  var LUA_JSPATH_DEFAULT = to_luastring(LUA_JSDIR + "?.js;" + LUA_JSDIR + "loadall.js;./?.js");\n  module.exports.LUA_JSPATH_DEFAULT = LUA_JSPATH_DEFAULT;\n} else { var _LUA_JSPATH_DEFAULT2, _LUA_PATH_DEFAULT2, LUA_JSDIR2, _LUA_JSDIR2, LUA_LDIR2, _LUA_LDIR2, LUA_ROOT2, LUA_ROOT, _LUA_DIRSEP2, _LUA_JSPATH_DEFAULT, _LUA_PATH_DEFAULT, LUA_SHRDIR, _LUA_JSDIR, _LUA_LDIR, _LUA_DIRSEP; }\n/*\n@@ LUA_COMPAT_FLOATSTRING makes Lua format integral floats without a\n@@ a float mark (\'.0\').\n** This macro is not on by default even in compatibility mode,\n** because this is not really an incompatibility.\n*/\n\n\nvar LUA_COMPAT_FLOATSTRING = conf.LUA_COMPAT_FLOATSTRING || false;\nvar LUA_MAXINTEGER = 2147483647;\nvar LUA_MININTEGER = -2147483648;\n/*\n@@ LUAI_MAXSTACK limits the size of the Lua stack.\n** CHANGE it if you need a different limit. This limit is arbitrary;\n** its only purpose is to stop Lua from consuming unlimited stack\n** space (and to reserve some numbers for pseudo-indices).\n*/\n\nvar LUAI_MAXSTACK = conf.LUAI_MAXSTACK || 1000000;\n/*\n@@ LUA_IDSIZE gives the maximum size for the description of the source\n@@ of a function in debug information.\n** CHANGE it if you want a different size.\n*/\n\nvar LUA_IDSIZE = conf.LUA_IDSIZE || 60 - 1;\n/* fengari uses 1 less than lua as we don\'t embed the null byte */\n\nvar lua_integer2str = function lua_integer2str(n) {\n  return String(n);\n  /* should match behaviour of LUA_INTEGER_FMT */\n};\n\nvar lua_number2str = function lua_number2str(n) {\n  return String(Number(n.toPrecision(14)));\n  /* should match behaviour of LUA_NUMBER_FMT */\n};\n\nvar lua_numbertointeger = function lua_numbertointeger(n) {\n  return n >= LUA_MININTEGER && n < -LUA_MININTEGER ? n : false;\n};\n\nvar LUA_INTEGER_FRMLEN = "";\nvar LUA_NUMBER_FRMLEN = "";\nvar LUA_INTEGER_FMT = "%".concat(LUA_INTEGER_FRMLEN, "d");\nvar LUA_NUMBER_FMT = "%.14g";\n\nvar lua_getlocaledecpoint = function lua_getlocaledecpoint() {\n  /* we hard-code the decimal point to \'.\' as a user cannot change the\n     locale in most JS environments, and in that you can, a multi-byte\n     locale is common.\n  */\n  return 46\n  /* \'.\'.charCodeAt(0) */\n  ;\n};\n\nvar luai_apicheck = function luai_apicheck(l, e) {\n  if (!e) throw Error(e);\n};\n/*\n@@ LUAL_BUFFERSIZE is the buffer size used by the lauxlib buffer system.\n*/\n\n\nvar LUAL_BUFFERSIZE = conf.LUAL_BUFFERSIZE || 8192; // See: http://croquetweak.blogspot.fr/2014/08/deconstructing-floats-frexp-and-ldexp.html\n\nvar frexp = function frexp(value) {\n  if (value === 0) return [value, 0];\n  var data = new DataView(new ArrayBuffer(8));\n  data.setFloat64(0, value);\n  var bits = data.getUint32(0) >>> 20 & 0x7FF;\n\n  if (bits === 0) {\n    // denormal\n    data.setFloat64(0, value * Math.pow(2, 64)); // exp + 64\n\n    bits = (data.getUint32(0) >>> 20 & 0x7FF) - 64;\n  }\n\n  var exponent = bits - 1022;\n  var mantissa = ldexp(value, -exponent);\n  return [mantissa, exponent];\n};\n\nvar ldexp = function ldexp(mantissa, exponent) {\n  var steps = Math.min(3, Math.ceil(Math.abs(exponent) / 1023));\n  var result = mantissa;\n\n  for (var i = 0; i < steps; i++) {\n    result *= Math.pow(2, Math.floor((exponent + i) / steps));\n  }\n\n  return result;\n};\n\nmodule.exports.LUAI_MAXSTACK = LUAI_MAXSTACK;\nmodule.exports.LUA_COMPAT_FLOATSTRING = LUA_COMPAT_FLOATSTRING;\nmodule.exports.LUA_IDSIZE = LUA_IDSIZE;\nmodule.exports.LUA_INTEGER_FMT = LUA_INTEGER_FMT;\nmodule.exports.LUA_INTEGER_FRMLEN = LUA_INTEGER_FRMLEN;\nmodule.exports.LUA_MAXINTEGER = LUA_MAXINTEGER;\nmodule.exports.LUA_MININTEGER = LUA_MININTEGER;\nmodule.exports.LUA_NUMBER_FMT = LUA_NUMBER_FMT;\nmodule.exports.LUA_NUMBER_FRMLEN = LUA_NUMBER_FRMLEN;\nmodule.exports.LUAL_BUFFERSIZE = LUAL_BUFFERSIZE;\nmodule.exports.frexp = frexp;\nmodule.exports.ldexp = ldexp;\nmodule.exports.lua_getlocaledecpoint = lua_getlocaledecpoint;\nmodule.exports.lua_integer2str = lua_integer2str;\nmodule.exports.lua_number2str = lua_number2str;\nmodule.exports.lua_numbertointeger = lua_numbertointeger;\nmodule.exports.luai_apicheck = luai_apicheck;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mZW5nYXJpLy4vbm9kZV9tb2R1bGVzL2Zlbmdhcmkvc3JjL2x1YWNvbmYuanM/ZmY2MyJdLCJuYW1lcyI6WyJjb25mIiwicHJvY2VzcyIsIkpTT04iLCJwYXJzZSIsInJlcXVpcmUiLCJMVUFfVkVSU0lPTl9NQUpPUiIsIkxVQV9WRVJTSU9OX01JTk9SIiwidG9fbHVhc3RyaW5nIiwiTFVBX1BBVEhfU0VQIiwibW9kdWxlIiwiZXhwb3J0cyIsIkxVQV9QQVRIX01BUksiLCJMVUFfRVhFQ19ESVIiLCJMVUFfVkRJUiIsIkxVQV9ESVJTRVAiLCJMVUFfTERJUiIsIkxVQV9KU0RJUiIsIkxVQV9QQVRIX0RFRkFVTFQiLCJMVUFfSlNQQVRIX0RFRkFVTFQiLCJMVUFfQ09NUEFUX0ZMT0FUU1RSSU5HIiwiTFVBX01BWElOVEVHRVIiLCJMVUFfTUlOSU5URUdFUiIsIkxVQUlfTUFYU1RBQ0siLCJMVUFfSURTSVpFIiwibHVhX2ludGVnZXIyc3RyIiwibiIsIlN0cmluZyIsImx1YV9udW1iZXIyc3RyIiwiTnVtYmVyIiwidG9QcmVjaXNpb24iLCJsdWFfbnVtYmVydG9pbnRlZ2VyIiwiTFVBX0lOVEVHRVJfRlJNTEVOIiwiTFVBX05VTUJFUl9GUk1MRU4iLCJMVUFfSU5URUdFUl9GTVQiLCJMVUFfTlVNQkVSX0ZNVCIsImx1YV9nZXRsb2NhbGVkZWNwb2ludCIsImx1YWlfYXBpY2hlY2siLCJsIiwiZSIsIkVycm9yIiwiTFVBTF9CVUZGRVJTSVpFIiwiZnJleHAiLCJ2YWx1ZSIsImRhdGEiLCJEYXRhVmlldyIsIkFycmF5QnVmZmVyIiwic2V0RmxvYXQ2NCIsImJpdHMiLCJnZXRVaW50MzIiLCJNYXRoIiwicG93IiwiZXhwb25lbnQiLCJtYW50aXNzYSIsImxkZXhwIiwic3RlcHMiLCJtaW4iLCJjZWlsIiwiYWJzIiwicmVzdWx0IiwiaSIsImZsb29yIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFNQSxJQUFJLEdBQUlDLE1BQUEsR0FBMEJDLElBQUksQ0FBQ0MsS0FBTCxDQUFXRixNQUFYLENBQTFCLEdBQWdFLEVBQTlFOztlQU1JRyxtQkFBTyxDQUFDLENBQUQsQztJQUhQQyxpQixZQUFBQSxpQjtJQUNBQyxpQixZQUFBQSxpQjtJQUNBQyxZLFlBQUFBLFk7QUFHSjs7Ozs7Ozs7O0FBT0EsSUFBTUMsWUFBWSxHQUFJLEdBQXRCO0FBQ0FDLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlRixZQUFmLEdBQThCQSxZQUE5QjtBQUVBLElBQU1HLGFBQWEsR0FBRyxHQUF0QjtBQUNBRixNQUFNLENBQUNDLE9BQVAsQ0FBZUMsYUFBZixHQUErQkEsYUFBL0I7QUFFQSxJQUFNQyxZQUFZLEdBQUksR0FBdEI7QUFDQUgsTUFBTSxDQUFDQyxPQUFQLENBQWVFLFlBQWYsR0FBOEJBLFlBQTlCO0FBRUE7Ozs7Ozs7Ozs7QUFTQSxJQUFNQyxRQUFRLEdBQUdSLGlCQUFpQixHQUFHLEdBQXBCLEdBQTBCQyxpQkFBM0M7QUFDQUcsTUFBTSxDQUFDQyxPQUFQLENBQWVHLFFBQWYsR0FBMEJBLFFBQTFCOztBQUVBLElBQUksSUFBSixFQUFvQztBQUNoQyxNQUFNQyxVQUFVLEdBQUcsR0FBbkI7QUFDQUwsUUFBTSxDQUFDQyxPQUFQLENBQWVJLFVBQWYsR0FBNEJBLFVBQTVCO0FBRUEsTUFBTUMsUUFBUSxHQUFHLFdBQVdGLFFBQVgsR0FBc0IsR0FBdkM7QUFDQUosUUFBTSxDQUFDQyxPQUFQLENBQWVLLFFBQWYsR0FBMEJBLFFBQTFCO0FBRUEsTUFBTUMsU0FBUyxHQUFHRCxRQUFsQjtBQUNBTixRQUFNLENBQUNDLE9BQVAsQ0FBZU0sU0FBZixHQUEyQkEsU0FBM0I7QUFFQSxNQUFNQyxnQkFBZ0IsR0FBR1YsWUFBWSxDQUNqQ1EsUUFBUSxHQUFHLFFBQVgsR0FBc0JBLFFBQXRCLEdBQWlDLGFBQWpDO0FBQ0E7QUFDQSx3QkFIaUMsQ0FBckM7QUFLQU4sUUFBTSxDQUFDQyxPQUFQLENBQWVPLGdCQUFmLEdBQWtDQSxnQkFBbEM7QUFFQSxNQUFNQyxrQkFBa0IsR0FBR1gsWUFBWSxDQUNuQ1MsU0FBUyxHQUFHLE9BQVosR0FBc0JBLFNBQXRCLEdBQWtDLG1CQURDLENBQXZDO0FBR0FQLFFBQU0sQ0FBQ0MsT0FBUCxDQUFlUSxrQkFBZixHQUFvQ0Esa0JBQXBDO0FBQ0gsQ0FyQkQsTUFxQk8sNE5BNkROO0FBRUQ7Ozs7Ozs7O0FBTUEsSUFBTUMsc0JBQXNCLEdBQUduQixJQUFJLENBQUNtQixzQkFBTCxJQUErQixLQUE5RDtBQUVBLElBQU1DLGNBQWMsR0FBRyxVQUF2QjtBQUNBLElBQU1DLGNBQWMsR0FBRyxDQUFDLFVBQXhCO0FBRUE7Ozs7Ozs7QUFNQSxJQUFNQyxhQUFhLEdBQUd0QixJQUFJLENBQUNzQixhQUFMLElBQXNCLE9BQTVDO0FBRUE7Ozs7OztBQUtBLElBQU1DLFVBQVUsR0FBR3ZCLElBQUksQ0FBQ3VCLFVBQUwsSUFBb0IsS0FBRyxDQUExQztBQUE4Qzs7QUFFOUMsSUFBTUMsZUFBZSxHQUFHLFNBQWxCQSxlQUFrQixDQUFTQyxDQUFULEVBQVk7QUFDaEMsU0FBT0MsTUFBTSxDQUFDRCxDQUFELENBQWI7QUFBa0I7QUFDckIsQ0FGRDs7QUFJQSxJQUFNRSxjQUFjLEdBQUcsU0FBakJBLGNBQWlCLENBQVNGLENBQVQsRUFBWTtBQUMvQixTQUFPQyxNQUFNLENBQUNFLE1BQU0sQ0FBQ0gsQ0FBQyxDQUFDSSxXQUFGLENBQWMsRUFBZCxDQUFELENBQVAsQ0FBYjtBQUEwQztBQUM3QyxDQUZEOztBQUlBLElBQU1DLG1CQUFtQixHQUFHLFNBQXRCQSxtQkFBc0IsQ0FBU0wsQ0FBVCxFQUFZO0FBQ3BDLFNBQU9BLENBQUMsSUFBSUosY0FBTCxJQUF1QkksQ0FBQyxHQUFHLENBQUNKLGNBQTVCLEdBQTZDSSxDQUE3QyxHQUFpRCxLQUF4RDtBQUNILENBRkQ7O0FBSUEsSUFBTU0sa0JBQWtCLEdBQUcsRUFBM0I7QUFDQSxJQUFNQyxpQkFBaUIsR0FBRyxFQUExQjtBQUVBLElBQU1DLGVBQWUsY0FBT0Ysa0JBQVAsTUFBckI7QUFDQSxJQUFNRyxjQUFjLEdBQUksT0FBeEI7O0FBRUEsSUFBTUMscUJBQXFCLEdBQUcsU0FBeEJBLHFCQUF3QixHQUFXO0FBQ3JDOzs7O0FBSUEsU0FBTztBQUFHO0FBQVY7QUFDSCxDQU5EOztBQVFBLElBQU1DLGFBQWEsR0FBRyxTQUFoQkEsYUFBZ0IsQ0FBU0MsQ0FBVCxFQUFZQyxDQUFaLEVBQWU7QUFDakMsTUFBSSxDQUFDQSxDQUFMLEVBQVEsTUFBTUMsS0FBSyxDQUFDRCxDQUFELENBQVg7QUFDWCxDQUZEO0FBSUE7Ozs7O0FBR0EsSUFBTUUsZUFBZSxHQUFHeEMsSUFBSSxDQUFDd0MsZUFBTCxJQUF3QixJQUFoRCxDLENBRUE7O0FBQ0EsSUFBTUMsS0FBSyxHQUFHLFNBQVJBLEtBQVEsQ0FBU0MsS0FBVCxFQUFnQjtBQUMxQixNQUFJQSxLQUFLLEtBQUssQ0FBZCxFQUFpQixPQUFPLENBQUNBLEtBQUQsRUFBUSxDQUFSLENBQVA7QUFDakIsTUFBSUMsSUFBSSxHQUFHLElBQUlDLFFBQUosQ0FBYSxJQUFJQyxXQUFKLENBQWdCLENBQWhCLENBQWIsQ0FBWDtBQUNBRixNQUFJLENBQUNHLFVBQUwsQ0FBZ0IsQ0FBaEIsRUFBbUJKLEtBQW5CO0FBQ0EsTUFBSUssSUFBSSxHQUFJSixJQUFJLENBQUNLLFNBQUwsQ0FBZSxDQUFmLE1BQXNCLEVBQXZCLEdBQTZCLEtBQXhDOztBQUNBLE1BQUlELElBQUksS0FBSyxDQUFiLEVBQWdCO0FBQUU7QUFDZEosUUFBSSxDQUFDRyxVQUFMLENBQWdCLENBQWhCLEVBQW1CSixLQUFLLEdBQUdPLElBQUksQ0FBQ0MsR0FBTCxDQUFTLENBQVQsRUFBWSxFQUFaLENBQTNCLEVBRFksQ0FDa0M7O0FBQzlDSCxRQUFJLEdBQUcsQ0FBRUosSUFBSSxDQUFDSyxTQUFMLENBQWUsQ0FBZixNQUFzQixFQUF2QixHQUE2QixLQUE5QixJQUF1QyxFQUE5QztBQUNIOztBQUNELE1BQUlHLFFBQVEsR0FBR0osSUFBSSxHQUFHLElBQXRCO0FBQ0EsTUFBSUssUUFBUSxHQUFHQyxLQUFLLENBQUNYLEtBQUQsRUFBUSxDQUFDUyxRQUFULENBQXBCO0FBQ0EsU0FBTyxDQUFDQyxRQUFELEVBQVdELFFBQVgsQ0FBUDtBQUNILENBWkQ7O0FBY0EsSUFBTUUsS0FBSyxHQUFHLFNBQVJBLEtBQVEsQ0FBU0QsUUFBVCxFQUFtQkQsUUFBbkIsRUFBNkI7QUFDdkMsTUFBSUcsS0FBSyxHQUFHTCxJQUFJLENBQUNNLEdBQUwsQ0FBUyxDQUFULEVBQVlOLElBQUksQ0FBQ08sSUFBTCxDQUFVUCxJQUFJLENBQUNRLEdBQUwsQ0FBU04sUUFBVCxJQUFxQixJQUEvQixDQUFaLENBQVo7QUFDQSxNQUFJTyxNQUFNLEdBQUdOLFFBQWI7O0FBQ0EsT0FBSyxJQUFJTyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHTCxLQUFwQixFQUEyQkssQ0FBQyxFQUE1QjtBQUNJRCxVQUFNLElBQUlULElBQUksQ0FBQ0MsR0FBTCxDQUFTLENBQVQsRUFBWUQsSUFBSSxDQUFDVyxLQUFMLENBQVcsQ0FBQ1QsUUFBUSxHQUFHUSxDQUFaLElBQWlCTCxLQUE1QixDQUFaLENBQVY7QUFESjs7QUFFQSxTQUFPSSxNQUFQO0FBQ0gsQ0FORDs7QUFRQWpELE1BQU0sQ0FBQ0MsT0FBUCxDQUFlWSxhQUFmLEdBQXdDQSxhQUF4QztBQUNBYixNQUFNLENBQUNDLE9BQVAsQ0FBZVMsc0JBQWYsR0FBd0NBLHNCQUF4QztBQUNBVixNQUFNLENBQUNDLE9BQVAsQ0FBZWEsVUFBZixHQUF3Q0EsVUFBeEM7QUFDQWQsTUFBTSxDQUFDQyxPQUFQLENBQWV1QixlQUFmLEdBQXdDQSxlQUF4QztBQUNBeEIsTUFBTSxDQUFDQyxPQUFQLENBQWVxQixrQkFBZixHQUF3Q0Esa0JBQXhDO0FBQ0F0QixNQUFNLENBQUNDLE9BQVAsQ0FBZVUsY0FBZixHQUF3Q0EsY0FBeEM7QUFDQVgsTUFBTSxDQUFDQyxPQUFQLENBQWVXLGNBQWYsR0FBd0NBLGNBQXhDO0FBQ0FaLE1BQU0sQ0FBQ0MsT0FBUCxDQUFld0IsY0FBZixHQUF3Q0EsY0FBeEM7QUFDQXpCLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlc0IsaUJBQWYsR0FBd0NBLGlCQUF4QztBQUNBdkIsTUFBTSxDQUFDQyxPQUFQLENBQWU4QixlQUFmLEdBQXdDQSxlQUF4QztBQUNBL0IsTUFBTSxDQUFDQyxPQUFQLENBQWUrQixLQUFmLEdBQXdDQSxLQUF4QztBQUNBaEMsTUFBTSxDQUFDQyxPQUFQLENBQWUyQyxLQUFmLEdBQXdDQSxLQUF4QztBQUNBNUMsTUFBTSxDQUFDQyxPQUFQLENBQWV5QixxQkFBZixHQUF3Q0EscUJBQXhDO0FBQ0ExQixNQUFNLENBQUNDLE9BQVAsQ0FBZWMsZUFBZixHQUF3Q0EsZUFBeEM7QUFDQWYsTUFBTSxDQUFDQyxPQUFQLENBQWVpQixjQUFmLEdBQXdDQSxjQUF4QztBQUNBbEIsTUFBTSxDQUFDQyxPQUFQLENBQWVvQixtQkFBZixHQUF3Q0EsbUJBQXhDO0FBQ0FyQixNQUFNLENBQUNDLE9BQVAsQ0FBZTBCLGFBQWYsR0FBd0NBLGFBQXhDIiwiZmlsZSI6IjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgY29uZiA9IChwcm9jZXNzLmVudi5GRU5HQVJJQ09ORiA/IEpTT04ucGFyc2UocHJvY2Vzcy5lbnYuRkVOR0FSSUNPTkYpIDoge30pO1xuXG5jb25zdCB7XG4gICAgTFVBX1ZFUlNJT05fTUFKT1IsXG4gICAgTFVBX1ZFUlNJT05fTUlOT1IsXG4gICAgdG9fbHVhc3RyaW5nXG59ID0gcmVxdWlyZSgnLi9kZWZzLmpzJyk7XG5cbi8qXG4qKiBMVUFfUEFUSF9TRVAgaXMgdGhlIGNoYXJhY3RlciB0aGF0IHNlcGFyYXRlcyB0ZW1wbGF0ZXMgaW4gYSBwYXRoLlxuKiogTFVBX1BBVEhfTUFSSyBpcyB0aGUgc3RyaW5nIHRoYXQgbWFya3MgdGhlIHN1YnN0aXR1dGlvbiBwb2ludHMgaW4gYVxuKiogdGVtcGxhdGUuXG4qKiBMVUFfRVhFQ19ESVIgaW4gYSBXaW5kb3dzIHBhdGggaXMgcmVwbGFjZWQgYnkgdGhlIGV4ZWN1dGFibGUnc1xuKiogZGlyZWN0b3J5LlxuKi9cbmNvbnN0IExVQV9QQVRIX1NFUCAgPSBcIjtcIjtcbm1vZHVsZS5leHBvcnRzLkxVQV9QQVRIX1NFUCA9IExVQV9QQVRIX1NFUDtcblxuY29uc3QgTFVBX1BBVEhfTUFSSyA9IFwiP1wiO1xubW9kdWxlLmV4cG9ydHMuTFVBX1BBVEhfTUFSSyA9IExVQV9QQVRIX01BUks7XG5cbmNvbnN0IExVQV9FWEVDX0RJUiAgPSBcIiFcIjtcbm1vZHVsZS5leHBvcnRzLkxVQV9FWEVDX0RJUiA9IExVQV9FWEVDX0RJUjtcblxuLypcbkBAIExVQV9QQVRIX0RFRkFVTFQgaXMgdGhlIGRlZmF1bHQgcGF0aCB0aGF0IEx1YSB1c2VzIHRvIGxvb2sgZm9yXG4qKiBMdWEgbGlicmFyaWVzLlxuQEAgTFVBX0pTUEFUSF9ERUZBVUxUIGlzIHRoZSBkZWZhdWx0IHBhdGggdGhhdCBMdWEgdXNlcyB0byBsb29rIGZvclxuKiogSlMgbGlicmFyaWVzLlxuKiogQ0hBTkdFIHRoZW0gaWYgeW91ciBtYWNoaW5lIGhhcyBhIG5vbi1jb252ZW50aW9uYWwgZGlyZWN0b3J5XG4qKiBoaWVyYXJjaHkgb3IgaWYgeW91IHdhbnQgdG8gaW5zdGFsbCB5b3VyIGxpYnJhcmllcyBpblxuKiogbm9uLWNvbnZlbnRpb25hbCBkaXJlY3Rvcmllcy5cbiovXG5jb25zdCBMVUFfVkRJUiA9IExVQV9WRVJTSU9OX01BSk9SICsgXCIuXCIgKyBMVUFfVkVSU0lPTl9NSU5PUjtcbm1vZHVsZS5leHBvcnRzLkxVQV9WRElSID0gTFVBX1ZESVI7XG5cbmlmICh0eXBlb2YgcHJvY2VzcyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNvbnN0IExVQV9ESVJTRVAgPSBcIi9cIjtcbiAgICBtb2R1bGUuZXhwb3J0cy5MVUFfRElSU0VQID0gTFVBX0RJUlNFUDtcblxuICAgIGNvbnN0IExVQV9MRElSID0gXCIuL2x1YS9cIiArIExVQV9WRElSICsgXCIvXCI7XG4gICAgbW9kdWxlLmV4cG9ydHMuTFVBX0xESVIgPSBMVUFfTERJUjtcblxuICAgIGNvbnN0IExVQV9KU0RJUiA9IExVQV9MRElSO1xuICAgIG1vZHVsZS5leHBvcnRzLkxVQV9KU0RJUiA9IExVQV9KU0RJUjtcblxuICAgIGNvbnN0IExVQV9QQVRIX0RFRkFVTFQgPSB0b19sdWFzdHJpbmcoXG4gICAgICAgIExVQV9MRElSICsgXCI/Lmx1YTtcIiArIExVQV9MRElSICsgXCI/L2luaXQubHVhO1wiICtcbiAgICAgICAgLyogTFVBX0pTRElSIGV4Y2x1ZGVkIGFzIGl0IGlzIGVxdWFsIHRvIExVQV9MRElSICovXG4gICAgICAgIFwiLi8/Lmx1YTsuLz8vaW5pdC5sdWFcIlxuICAgICk7XG4gICAgbW9kdWxlLmV4cG9ydHMuTFVBX1BBVEhfREVGQVVMVCA9IExVQV9QQVRIX0RFRkFVTFQ7XG5cbiAgICBjb25zdCBMVUFfSlNQQVRIX0RFRkFVTFQgPSB0b19sdWFzdHJpbmcoXG4gICAgICAgIExVQV9KU0RJUiArIFwiPy5qcztcIiArIExVQV9KU0RJUiArIFwibG9hZGFsbC5qczsuLz8uanNcIlxuICAgICk7XG4gICAgbW9kdWxlLmV4cG9ydHMuTFVBX0pTUEFUSF9ERUZBVUxUID0gTFVBX0pTUEFUSF9ERUZBVUxUO1xufSBlbHNlIGlmIChyZXF1aXJlKCdvcycpLnBsYXRmb3JtKCkgPT09ICd3aW4zMicpIHtcbiAgICBjb25zdCBMVUFfRElSU0VQID0gXCJcXFxcXCI7XG4gICAgbW9kdWxlLmV4cG9ydHMuTFVBX0RJUlNFUCA9IExVQV9ESVJTRVA7XG5cbiAgICAvKlxuICAgICoqIEluIFdpbmRvd3MsIGFueSBleGNsYW1hdGlvbiBtYXJrICgnIScpIGluIHRoZSBwYXRoIGlzIHJlcGxhY2VkIGJ5IHRoZVxuICAgICoqIHBhdGggb2YgdGhlIGRpcmVjdG9yeSBvZiB0aGUgZXhlY3V0YWJsZSBmaWxlIG9mIHRoZSBjdXJyZW50IHByb2Nlc3MuXG4gICAgKi9cbiAgICBjb25zdCBMVUFfTERJUiA9IFwiIVxcXFxsdWFcXFxcXCI7XG4gICAgbW9kdWxlLmV4cG9ydHMuTFVBX0xESVIgPSBMVUFfTERJUjtcblxuICAgIGNvbnN0IExVQV9KU0RJUiA9IFwiIVxcXFxcIjtcbiAgICBtb2R1bGUuZXhwb3J0cy5MVUFfSlNESVIgPSBMVUFfSlNESVI7XG5cbiAgICBjb25zdCBMVUFfU0hSRElSID0gXCIhXFxcXC4uXFxcXHNoYXJlXFxcXGx1YVxcXFxcIiArIExVQV9WRElSICsgXCJcXFxcXCI7XG4gICAgbW9kdWxlLmV4cG9ydHMuTFVBX1NIUkRJUiA9IExVQV9TSFJESVI7XG5cbiAgICBjb25zdCBMVUFfUEFUSF9ERUZBVUxUID0gdG9fbHVhc3RyaW5nKFxuICAgICAgICBMVUFfTERJUiArIFwiPy5sdWE7XCIgKyBMVUFfTERJUiArIFwiP1xcXFxpbml0Lmx1YTtcIiArXG4gICAgICAgIExVQV9KU0RJUiArIFwiPy5sdWE7XCIgKyBMVUFfSlNESVIgKyBcIj9cXFxcaW5pdC5sdWE7XCIgK1xuICAgICAgICBMVUFfU0hSRElSICsgXCI/Lmx1YTtcIiArIExVQV9TSFJESVIgKyBcIj9cXFxcaW5pdC5sdWE7XCIgK1xuICAgICAgICBcIi5cXFxcPy5sdWE7LlxcXFw/XFxcXGluaXQubHVhXCJcbiAgICApO1xuICAgIG1vZHVsZS5leHBvcnRzLkxVQV9QQVRIX0RFRkFVTFQgPSBMVUFfUEFUSF9ERUZBVUxUO1xuXG4gICAgY29uc3QgTFVBX0pTUEFUSF9ERUZBVUxUID0gdG9fbHVhc3RyaW5nKFxuICAgICAgICBMVUFfSlNESVIgKyBcIj8uanM7XCIgK1xuICAgICAgICBMVUFfSlNESVIgKyBcIi4uXFxcXHNoYXJlXFxcXGx1YVxcXFxcIiArIExVQV9WRElSICsgXCJcXFxcPy5qcztcIiArXG4gICAgICAgIExVQV9KU0RJUiArIFwibG9hZGFsbC5qczsuXFxcXD8uanNcIlxuICAgICk7XG4gICAgbW9kdWxlLmV4cG9ydHMuTFVBX0pTUEFUSF9ERUZBVUxUID0gTFVBX0pTUEFUSF9ERUZBVUxUO1xufSBlbHNlIHtcbiAgICBjb25zdCBMVUFfRElSU0VQID0gXCIvXCI7XG4gICAgbW9kdWxlLmV4cG9ydHMuTFVBX0RJUlNFUCA9IExVQV9ESVJTRVA7XG5cbiAgICBjb25zdCBMVUFfUk9PVCA9IFwiL3Vzci9sb2NhbC9cIjtcbiAgICBtb2R1bGUuZXhwb3J0cy5MVUFfUk9PVCA9IExVQV9ST09UO1xuICAgIGNvbnN0IExVQV9ST09UMiA9IFwiL3Vzci9cIjtcblxuICAgIGNvbnN0IExVQV9MRElSID0gTFVBX1JPT1QgKyBcInNoYXJlL2x1YS9cIiArIExVQV9WRElSICsgXCIvXCI7XG4gICAgY29uc3QgTFVBX0xESVIyID0gTFVBX1JPT1QyICsgXCJzaGFyZS9sdWEvXCIgKyBMVUFfVkRJUiArIFwiL1wiO1xuICAgIG1vZHVsZS5leHBvcnRzLkxVQV9MRElSID0gTFVBX0xESVI7XG5cbiAgICBjb25zdCBMVUFfSlNESVIgPSBMVUFfTERJUjtcbiAgICBtb2R1bGUuZXhwb3J0cy5MVUFfSlNESVIgPSBMVUFfSlNESVI7XG4gICAgY29uc3QgTFVBX0pTRElSMiA9IExVQV9MRElSMjtcblxuICAgIGNvbnN0IExVQV9QQVRIX0RFRkFVTFQgPSB0b19sdWFzdHJpbmcoXG4gICAgICAgIExVQV9MRElSICsgXCI/Lmx1YTtcIiArIExVQV9MRElSICsgXCI/L2luaXQubHVhO1wiICtcbiAgICAgICAgTFVBX0xESVIyICsgXCI/Lmx1YTtcIiArIExVQV9MRElSMiArIFwiPy9pbml0Lmx1YTtcIiArXG4gICAgICAgIC8qIExVQV9KU0RJUigyKSBleGNsdWRlZCBhcyBpdCBpcyBlcXVhbCB0byBMVUFfTERJUigyKSAqL1xuICAgICAgICBcIi4vPy5sdWE7Li8/L2luaXQubHVhXCJcbiAgICApO1xuICAgIG1vZHVsZS5leHBvcnRzLkxVQV9QQVRIX0RFRkFVTFQgPSBMVUFfUEFUSF9ERUZBVUxUO1xuXG4gICAgY29uc3QgTFVBX0pTUEFUSF9ERUZBVUxUID0gdG9fbHVhc3RyaW5nKFxuICAgICAgICBMVUFfSlNESVIgKyBcIj8uanM7XCIgKyBMVUFfSlNESVIgKyBcImxvYWRhbGwuanM7XCIgK1xuICAgICAgICBMVUFfSlNESVIyICsgXCI/LmpzO1wiICsgTFVBX0pTRElSMiArIFwibG9hZGFsbC5qcztcIiArXG4gICAgICAgIFwiLi8/LmpzXCJcbiAgICApO1xuICAgIG1vZHVsZS5leHBvcnRzLkxVQV9KU1BBVEhfREVGQVVMVCA9IExVQV9KU1BBVEhfREVGQVVMVDtcbn1cblxuLypcbkBAIExVQV9DT01QQVRfRkxPQVRTVFJJTkcgbWFrZXMgTHVhIGZvcm1hdCBpbnRlZ3JhbCBmbG9hdHMgd2l0aG91dCBhXG5AQCBhIGZsb2F0IG1hcmsgKCcuMCcpLlxuKiogVGhpcyBtYWNybyBpcyBub3Qgb24gYnkgZGVmYXVsdCBldmVuIGluIGNvbXBhdGliaWxpdHkgbW9kZSxcbioqIGJlY2F1c2UgdGhpcyBpcyBub3QgcmVhbGx5IGFuIGluY29tcGF0aWJpbGl0eS5cbiovXG5jb25zdCBMVUFfQ09NUEFUX0ZMT0FUU1RSSU5HID0gY29uZi5MVUFfQ09NUEFUX0ZMT0FUU1RSSU5HIHx8IGZhbHNlO1xuXG5jb25zdCBMVUFfTUFYSU5URUdFUiA9IDIxNDc0ODM2NDc7XG5jb25zdCBMVUFfTUlOSU5URUdFUiA9IC0yMTQ3NDgzNjQ4O1xuXG4vKlxuQEAgTFVBSV9NQVhTVEFDSyBsaW1pdHMgdGhlIHNpemUgb2YgdGhlIEx1YSBzdGFjay5cbioqIENIQU5HRSBpdCBpZiB5b3UgbmVlZCBhIGRpZmZlcmVudCBsaW1pdC4gVGhpcyBsaW1pdCBpcyBhcmJpdHJhcnk7XG4qKiBpdHMgb25seSBwdXJwb3NlIGlzIHRvIHN0b3AgTHVhIGZyb20gY29uc3VtaW5nIHVubGltaXRlZCBzdGFja1xuKiogc3BhY2UgKGFuZCB0byByZXNlcnZlIHNvbWUgbnVtYmVycyBmb3IgcHNldWRvLWluZGljZXMpLlxuKi9cbmNvbnN0IExVQUlfTUFYU1RBQ0sgPSBjb25mLkxVQUlfTUFYU1RBQ0sgfHwgMTAwMDAwMDtcblxuLypcbkBAIExVQV9JRFNJWkUgZ2l2ZXMgdGhlIG1heGltdW0gc2l6ZSBmb3IgdGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBzb3VyY2VcbkBAIG9mIGEgZnVuY3Rpb24gaW4gZGVidWcgaW5mb3JtYXRpb24uXG4qKiBDSEFOR0UgaXQgaWYgeW91IHdhbnQgYSBkaWZmZXJlbnQgc2l6ZS5cbiovXG5jb25zdCBMVUFfSURTSVpFID0gY29uZi5MVUFfSURTSVpFIHx8ICg2MC0xKTsgLyogZmVuZ2FyaSB1c2VzIDEgbGVzcyB0aGFuIGx1YSBhcyB3ZSBkb24ndCBlbWJlZCB0aGUgbnVsbCBieXRlICovXG5cbmNvbnN0IGx1YV9pbnRlZ2VyMnN0ciA9IGZ1bmN0aW9uKG4pIHtcbiAgICByZXR1cm4gU3RyaW5nKG4pOyAvKiBzaG91bGQgbWF0Y2ggYmVoYXZpb3VyIG9mIExVQV9JTlRFR0VSX0ZNVCAqL1xufTtcblxuY29uc3QgbHVhX251bWJlcjJzdHIgPSBmdW5jdGlvbihuKSB7XG4gICAgcmV0dXJuIFN0cmluZyhOdW1iZXIobi50b1ByZWNpc2lvbigxNCkpKTsgLyogc2hvdWxkIG1hdGNoIGJlaGF2aW91ciBvZiBMVUFfTlVNQkVSX0ZNVCAqL1xufTtcblxuY29uc3QgbHVhX251bWJlcnRvaW50ZWdlciA9IGZ1bmN0aW9uKG4pIHtcbiAgICByZXR1cm4gbiA+PSBMVUFfTUlOSU5URUdFUiAmJiBuIDwgLUxVQV9NSU5JTlRFR0VSID8gbiA6IGZhbHNlO1xufTtcblxuY29uc3QgTFVBX0lOVEVHRVJfRlJNTEVOID0gXCJcIjtcbmNvbnN0IExVQV9OVU1CRVJfRlJNTEVOID0gXCJcIjtcblxuY29uc3QgTFVBX0lOVEVHRVJfRk1UID0gYCUke0xVQV9JTlRFR0VSX0ZSTUxFTn1kYDtcbmNvbnN0IExVQV9OVU1CRVJfRk1UICA9IFwiJS4xNGdcIjtcblxuY29uc3QgbHVhX2dldGxvY2FsZWRlY3BvaW50ID0gZnVuY3Rpb24oKSB7XG4gICAgLyogd2UgaGFyZC1jb2RlIHRoZSBkZWNpbWFsIHBvaW50IHRvICcuJyBhcyBhIHVzZXIgY2Fubm90IGNoYW5nZSB0aGVcbiAgICAgICBsb2NhbGUgaW4gbW9zdCBKUyBlbnZpcm9ubWVudHMsIGFuZCBpbiB0aGF0IHlvdSBjYW4sIGEgbXVsdGktYnl0ZVxuICAgICAgIGxvY2FsZSBpcyBjb21tb24uXG4gICAgKi9cbiAgICByZXR1cm4gNDYgLyogJy4nLmNoYXJDb2RlQXQoMCkgKi87XG59O1xuXG5jb25zdCBsdWFpX2FwaWNoZWNrID0gZnVuY3Rpb24obCwgZSkge1xuICAgIGlmICghZSkgdGhyb3cgRXJyb3IoZSk7XG59O1xuXG4vKlxuQEAgTFVBTF9CVUZGRVJTSVpFIGlzIHRoZSBidWZmZXIgc2l6ZSB1c2VkIGJ5IHRoZSBsYXV4bGliIGJ1ZmZlciBzeXN0ZW0uXG4qL1xuY29uc3QgTFVBTF9CVUZGRVJTSVpFID0gY29uZi5MVUFMX0JVRkZFUlNJWkUgfHwgODE5MjtcblxuLy8gU2VlOiBodHRwOi8vY3JvcXVldHdlYWsuYmxvZ3Nwb3QuZnIvMjAxNC8wOC9kZWNvbnN0cnVjdGluZy1mbG9hdHMtZnJleHAtYW5kLWxkZXhwLmh0bWxcbmNvbnN0IGZyZXhwID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT09IDApIHJldHVybiBbdmFsdWUsIDBdO1xuICAgIHZhciBkYXRhID0gbmV3IERhdGFWaWV3KG5ldyBBcnJheUJ1ZmZlcig4KSk7XG4gICAgZGF0YS5zZXRGbG9hdDY0KDAsIHZhbHVlKTtcbiAgICB2YXIgYml0cyA9IChkYXRhLmdldFVpbnQzMigwKSA+Pj4gMjApICYgMHg3RkY7XG4gICAgaWYgKGJpdHMgPT09IDApIHsgLy8gZGVub3JtYWxcbiAgICAgICAgZGF0YS5zZXRGbG9hdDY0KDAsIHZhbHVlICogTWF0aC5wb3coMiwgNjQpKTsgIC8vIGV4cCArIDY0XG4gICAgICAgIGJpdHMgPSAoKGRhdGEuZ2V0VWludDMyKDApID4+PiAyMCkgJiAweDdGRikgLSA2NDtcbiAgICB9XG4gICAgdmFyIGV4cG9uZW50ID0gYml0cyAtIDEwMjI7XG4gICAgdmFyIG1hbnRpc3NhID0gbGRleHAodmFsdWUsIC1leHBvbmVudCk7XG4gICAgcmV0dXJuIFttYW50aXNzYSwgZXhwb25lbnRdO1xufTtcblxuY29uc3QgbGRleHAgPSBmdW5jdGlvbihtYW50aXNzYSwgZXhwb25lbnQpIHtcbiAgICB2YXIgc3RlcHMgPSBNYXRoLm1pbigzLCBNYXRoLmNlaWwoTWF0aC5hYnMoZXhwb25lbnQpIC8gMTAyMykpO1xuICAgIHZhciByZXN1bHQgPSBtYW50aXNzYTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ZXBzOyBpKyspXG4gICAgICAgIHJlc3VsdCAqPSBNYXRoLnBvdygyLCBNYXRoLmZsb29yKChleHBvbmVudCArIGkpIC8gc3RlcHMpKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcblxubW9kdWxlLmV4cG9ydHMuTFVBSV9NQVhTVEFDSyAgICAgICAgICA9IExVQUlfTUFYU1RBQ0s7XG5tb2R1bGUuZXhwb3J0cy5MVUFfQ09NUEFUX0ZMT0FUU1RSSU5HID0gTFVBX0NPTVBBVF9GTE9BVFNUUklORztcbm1vZHVsZS5leHBvcnRzLkxVQV9JRFNJWkUgICAgICAgICAgICAgPSBMVUFfSURTSVpFO1xubW9kdWxlLmV4cG9ydHMuTFVBX0lOVEVHRVJfRk1UICAgICAgICA9IExVQV9JTlRFR0VSX0ZNVDtcbm1vZHVsZS5leHBvcnRzLkxVQV9JTlRFR0VSX0ZSTUxFTiAgICAgPSBMVUFfSU5URUdFUl9GUk1MRU47XG5tb2R1bGUuZXhwb3J0cy5MVUFfTUFYSU5URUdFUiAgICAgICAgID0gTFVBX01BWElOVEVHRVI7XG5tb2R1bGUuZXhwb3J0cy5MVUFfTUlOSU5URUdFUiAgICAgICAgID0gTFVBX01JTklOVEVHRVI7XG5tb2R1bGUuZXhwb3J0cy5MVUFfTlVNQkVSX0ZNVCAgICAgICAgID0gTFVBX05VTUJFUl9GTVQ7XG5tb2R1bGUuZXhwb3J0cy5MVUFfTlVNQkVSX0ZSTUxFTiAgICAgID0gTFVBX05VTUJFUl9GUk1MRU47XG5tb2R1bGUuZXhwb3J0cy5MVUFMX0JVRkZFUlNJWkUgICAgICAgID0gTFVBTF9CVUZGRVJTSVpFO1xubW9kdWxlLmV4cG9ydHMuZnJleHAgICAgICAgICAgICAgICAgICA9IGZyZXhwO1xubW9kdWxlLmV4cG9ydHMubGRleHAgICAgICAgICAgICAgICAgICA9IGxkZXhwO1xubW9kdWxlLmV4cG9ydHMubHVhX2dldGxvY2FsZWRlY3BvaW50ICA9IGx1YV9nZXRsb2NhbGVkZWNwb2ludDtcbm1vZHVsZS5leHBvcnRzLmx1YV9pbnRlZ2VyMnN0ciAgICAgICAgPSBsdWFfaW50ZWdlcjJzdHI7XG5tb2R1bGUuZXhwb3J0cy5sdWFfbnVtYmVyMnN0ciAgICAgICAgID0gbHVhX251bWJlcjJzdHI7XG5tb2R1bGUuZXhwb3J0cy5sdWFfbnVtYmVydG9pbnRlZ2VyICAgID0gbHVhX251bWJlcnRvaW50ZWdlcjtcbm1vZHVsZS5leHBvcnRzLmx1YWlfYXBpY2hlY2sgICAgICAgICAgPSBsdWFpX2FwaWNoZWNrO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///3\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nvar _require = __webpack_require__(3),\n    luai_apicheck = _require.luai_apicheck;\n\nvar lua_assert = function lua_assert(c) {\n  if (!c) throw Error("assertion failed");\n};\n\nmodule.exports.lua_assert = lua_assert;\n\nmodule.exports.luai_apicheck = luai_apicheck || function (l, e) {\n  return lua_assert(e);\n};\n\nvar api_check = function api_check(l, e, msg) {\n  return luai_apicheck(l, e && msg);\n};\n\nmodule.exports.api_check = api_check;\nvar LUAI_MAXCCALLS = 200;\nmodule.exports.LUAI_MAXCCALLS = LUAI_MAXCCALLS;\n/* minimum size for string buffer */\n\nvar LUA_MINBUFFER = 32;\nmodule.exports.LUA_MINBUFFER = LUA_MINBUFFER;\n\nvar luai_nummod = function luai_nummod(L, a, b) {\n  var m = a % b;\n  if (m * b < 0) m += b;\n  return m;\n};\n\nmodule.exports.luai_nummod = luai_nummod; // If later integers are more than 32bit, LUA_MAXINTEGER will then be != MAX_INT\n\nvar MAX_INT = 2147483647;\nmodule.exports.MAX_INT = MAX_INT;\nvar MIN_INT = -2147483648;\nmodule.exports.MIN_INT = MIN_INT;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mZW5nYXJpLy4vbm9kZV9tb2R1bGVzL2Zlbmdhcmkvc3JjL2xsaW1pdHMuanM/NzEwZSJdLCJuYW1lcyI6WyJyZXF1aXJlIiwibHVhaV9hcGljaGVjayIsImx1YV9hc3NlcnQiLCJjIiwiRXJyb3IiLCJtb2R1bGUiLCJleHBvcnRzIiwibCIsImUiLCJhcGlfY2hlY2siLCJtc2ciLCJMVUFJX01BWENDQUxMUyIsIkxVQV9NSU5CVUZGRVIiLCJsdWFpX251bW1vZCIsIkwiLCJhIiwiYiIsIm0iLCJNQVhfSU5UIiwiTUlOX0lOVCJdLCJtYXBwaW5ncyI6IkFBQWE7O2VBRWFBLG1CQUFPLENBQUMsQ0FBRCxDO0lBQXpCQyxhLFlBQUFBLGE7O0FBRVIsSUFBTUMsVUFBVSxHQUFHLFNBQWJBLFVBQWEsQ0FBU0MsQ0FBVCxFQUFZO0FBQzNCLE1BQUksQ0FBQ0EsQ0FBTCxFQUFRLE1BQU1DLEtBQUssQ0FBQyxrQkFBRCxDQUFYO0FBQ1gsQ0FGRDs7QUFHQUMsTUFBTSxDQUFDQyxPQUFQLENBQWVKLFVBQWYsR0FBNEJBLFVBQTVCOztBQUVBRyxNQUFNLENBQUNDLE9BQVAsQ0FBZUwsYUFBZixHQUErQkEsYUFBYSxJQUFJLFVBQVNNLENBQVQsRUFBWUMsQ0FBWixFQUFlO0FBQUUsU0FBT04sVUFBVSxDQUFDTSxDQUFELENBQWpCO0FBQXVCLENBQXhGOztBQUVBLElBQU1DLFNBQVMsR0FBRyxTQUFaQSxTQUFZLENBQVNGLENBQVQsRUFBWUMsQ0FBWixFQUFlRSxHQUFmLEVBQW9CO0FBQ2xDLFNBQU9ULGFBQWEsQ0FBQ00sQ0FBRCxFQUFJQyxDQUFDLElBQUlFLEdBQVQsQ0FBcEI7QUFDSCxDQUZEOztBQUdBTCxNQUFNLENBQUNDLE9BQVAsQ0FBZUcsU0FBZixHQUEyQkEsU0FBM0I7QUFFQSxJQUFNRSxjQUFjLEdBQUcsR0FBdkI7QUFDQU4sTUFBTSxDQUFDQyxPQUFQLENBQWVLLGNBQWYsR0FBZ0NBLGNBQWhDO0FBRUE7O0FBQ0EsSUFBTUMsYUFBYSxHQUFHLEVBQXRCO0FBQ0FQLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlTSxhQUFmLEdBQStCQSxhQUEvQjs7QUFFQSxJQUFNQyxXQUFXLEdBQUcsU0FBZEEsV0FBYyxDQUFTQyxDQUFULEVBQVlDLENBQVosRUFBZUMsQ0FBZixFQUFrQjtBQUNsQyxNQUFJQyxDQUFDLEdBQUdGLENBQUMsR0FBR0MsQ0FBWjtBQUNBLE1BQUtDLENBQUMsR0FBQ0QsQ0FBSCxHQUFRLENBQVosRUFDSUMsQ0FBQyxJQUFJRCxDQUFMO0FBQ0osU0FBT0MsQ0FBUDtBQUNILENBTEQ7O0FBTUFaLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlTyxXQUFmLEdBQTZCQSxXQUE3QixDLENBRUE7O0FBQ0EsSUFBTUssT0FBTyxHQUFHLFVBQWhCO0FBQ0FiLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlWSxPQUFmLEdBQXlCQSxPQUF6QjtBQUNBLElBQU1DLE9BQU8sR0FBRyxDQUFDLFVBQWpCO0FBQ0FkLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlYSxPQUFmLEdBQXlCQSxPQUF6QiIsImZpbGUiOiI0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IHsgbHVhaV9hcGljaGVjayB9ID0gcmVxdWlyZShcIi4vbHVhY29uZi5qc1wiKTtcblxuY29uc3QgbHVhX2Fzc2VydCA9IGZ1bmN0aW9uKGMpIHtcbiAgICBpZiAoIWMpIHRocm93IEVycm9yKFwiYXNzZXJ0aW9uIGZhaWxlZFwiKTtcbn07XG5tb2R1bGUuZXhwb3J0cy5sdWFfYXNzZXJ0ID0gbHVhX2Fzc2VydDtcblxubW9kdWxlLmV4cG9ydHMubHVhaV9hcGljaGVjayA9IGx1YWlfYXBpY2hlY2sgfHwgZnVuY3Rpb24obCwgZSkgeyByZXR1cm4gbHVhX2Fzc2VydChlKTsgfTtcblxuY29uc3QgYXBpX2NoZWNrID0gZnVuY3Rpb24obCwgZSwgbXNnKSB7XG4gICAgcmV0dXJuIGx1YWlfYXBpY2hlY2sobCwgZSAmJiBtc2cpO1xufTtcbm1vZHVsZS5leHBvcnRzLmFwaV9jaGVjayA9IGFwaV9jaGVjaztcblxuY29uc3QgTFVBSV9NQVhDQ0FMTFMgPSAyMDA7XG5tb2R1bGUuZXhwb3J0cy5MVUFJX01BWENDQUxMUyA9IExVQUlfTUFYQ0NBTExTO1xuXG4vKiBtaW5pbXVtIHNpemUgZm9yIHN0cmluZyBidWZmZXIgKi9cbmNvbnN0IExVQV9NSU5CVUZGRVIgPSAzMjtcbm1vZHVsZS5leHBvcnRzLkxVQV9NSU5CVUZGRVIgPSBMVUFfTUlOQlVGRkVSO1xuXG5jb25zdCBsdWFpX251bW1vZCA9IGZ1bmN0aW9uKEwsIGEsIGIpIHtcbiAgICBsZXQgbSA9IGEgJSBiO1xuICAgIGlmICgobSpiKSA8IDApXG4gICAgICAgIG0gKz0gYjtcbiAgICByZXR1cm4gbTtcbn07XG5tb2R1bGUuZXhwb3J0cy5sdWFpX251bW1vZCA9IGx1YWlfbnVtbW9kO1xuXG4vLyBJZiBsYXRlciBpbnRlZ2VycyBhcmUgbW9yZSB0aGFuIDMyYml0LCBMVUFfTUFYSU5URUdFUiB3aWxsIHRoZW4gYmUgIT0gTUFYX0lOVFxuY29uc3QgTUFYX0lOVCA9IDIxNDc0ODM2NDc7XG5tb2R1bGUuZXhwb3J0cy5NQVhfSU5UID0gTUFYX0lOVDtcbmNvbnN0IE1JTl9JTlQgPSAtMjE0NzQ4MzY0ODtcbm1vZHVsZS5leHBvcnRzLk1JTl9JTlQgPSBNSU5fSU5UO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///4\n')},function(module,exports,__webpack_require__){eval('/* Fengari specific functions\n *\n * This file includes fengari-specific data or and functionality for users to\n * manipulate fengari\'s string type.\n * The fields are exposed to the user on the \'fengari\' entry point; however to\n * avoid a dependency on defs.js from lauxlib.js they are defined in this file.\n */\nvar defs = __webpack_require__(1);\n\nvar FENGARI_VERSION_MAJOR = "0";\nvar FENGARI_VERSION_MINOR = "1";\nvar FENGARI_VERSION_NUM = 1;\nvar FENGARI_VERSION_RELEASE = "4";\nvar FENGARI_VERSION = "Fengari " + FENGARI_VERSION_MAJOR + "." + FENGARI_VERSION_MINOR;\nvar FENGARI_RELEASE = FENGARI_VERSION + "." + FENGARI_VERSION_RELEASE;\nvar FENGARI_AUTHORS = "B. Giannangeli, Daurnimator";\nvar FENGARI_COPYRIGHT = FENGARI_RELEASE + "  Copyright (C) 2017-2018 " + FENGARI_AUTHORS + "\\nBased on: " + defs.LUA_COPYRIGHT;\nmodule.exports.FENGARI_AUTHORS = FENGARI_AUTHORS;\nmodule.exports.FENGARI_COPYRIGHT = FENGARI_COPYRIGHT;\nmodule.exports.FENGARI_RELEASE = FENGARI_RELEASE;\nmodule.exports.FENGARI_VERSION = FENGARI_VERSION;\nmodule.exports.FENGARI_VERSION_MAJOR = FENGARI_VERSION_MAJOR;\nmodule.exports.FENGARI_VERSION_MINOR = FENGARI_VERSION_MINOR;\nmodule.exports.FENGARI_VERSION_NUM = FENGARI_VERSION_NUM;\nmodule.exports.FENGARI_VERSION_RELEASE = FENGARI_VERSION_RELEASE;\nmodule.exports.is_luastring = defs.is_luastring;\nmodule.exports.luastring_eq = defs.luastring_eq;\nmodule.exports.luastring_from = defs.luastring_from;\nmodule.exports.luastring_indexOf = defs.luastring_indexOf;\nmodule.exports.luastring_of = defs.luastring_of;\nmodule.exports.to_jsstring = defs.to_jsstring;\nmodule.exports.to_luastring = defs.to_luastring;\nmodule.exports.to_uristring = defs.to_uristring;\nmodule.exports.from_userstring = defs.from_userstring;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mZW5nYXJpLy4vbm9kZV9tb2R1bGVzL2Zlbmdhcmkvc3JjL2Zlbmdhcmljb3JlLmpzPzY4MWUiXSwibmFtZXMiOlsiZGVmcyIsInJlcXVpcmUiLCJGRU5HQVJJX1ZFUlNJT05fTUFKT1IiLCJGRU5HQVJJX1ZFUlNJT05fTUlOT1IiLCJGRU5HQVJJX1ZFUlNJT05fTlVNIiwiRkVOR0FSSV9WRVJTSU9OX1JFTEVBU0UiLCJGRU5HQVJJX1ZFUlNJT04iLCJGRU5HQVJJX1JFTEVBU0UiLCJGRU5HQVJJX0FVVEhPUlMiLCJGRU5HQVJJX0NPUFlSSUdIVCIsIkxVQV9DT1BZUklHSFQiLCJtb2R1bGUiLCJleHBvcnRzIiwiaXNfbHVhc3RyaW5nIiwibHVhc3RyaW5nX2VxIiwibHVhc3RyaW5nX2Zyb20iLCJsdWFzdHJpbmdfaW5kZXhPZiIsImx1YXN0cmluZ19vZiIsInRvX2pzc3RyaW5nIiwidG9fbHVhc3RyaW5nIiwidG9fdXJpc3RyaW5nIiwiZnJvbV91c2Vyc3RyaW5nIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7OztBQVFBLElBQU1BLElBQUksR0FBR0MsbUJBQU8sQ0FBQyxDQUFELENBQXBCOztBQUVBLElBQU1DLHFCQUFxQixHQUFLLEdBQWhDO0FBQ0EsSUFBTUMscUJBQXFCLEdBQUssR0FBaEM7QUFDQSxJQUFNQyxtQkFBbUIsR0FBTyxDQUFoQztBQUNBLElBQU1DLHVCQUF1QixHQUFHLEdBQWhDO0FBQ0EsSUFBTUMsZUFBZSxHQUFXLGFBQWFKLHFCQUFiLEdBQXFDLEdBQXJDLEdBQTJDQyxxQkFBM0U7QUFDQSxJQUFNSSxlQUFlLEdBQVdELGVBQWUsR0FBRyxHQUFsQixHQUF3QkQsdUJBQXhEO0FBQ0EsSUFBTUcsZUFBZSxHQUFXLDZCQUFoQztBQUNBLElBQU1DLGlCQUFpQixHQUFTRixlQUFlLEdBQUcsNEJBQWxCLEdBQWlEQyxlQUFqRCxHQUFtRSxjQUFuRSxHQUFvRlIsSUFBSSxDQUFDVSxhQUF6SDtBQUVBQyxNQUFNLENBQUNDLE9BQVAsQ0FBZUosZUFBZixHQUF5Q0EsZUFBekM7QUFDQUcsTUFBTSxDQUFDQyxPQUFQLENBQWVILGlCQUFmLEdBQXlDQSxpQkFBekM7QUFDQUUsTUFBTSxDQUFDQyxPQUFQLENBQWVMLGVBQWYsR0FBeUNBLGVBQXpDO0FBQ0FJLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlTixlQUFmLEdBQXlDQSxlQUF6QztBQUNBSyxNQUFNLENBQUNDLE9BQVAsQ0FBZVYscUJBQWYsR0FBeUNBLHFCQUF6QztBQUNBUyxNQUFNLENBQUNDLE9BQVAsQ0FBZVQscUJBQWYsR0FBeUNBLHFCQUF6QztBQUNBUSxNQUFNLENBQUNDLE9BQVAsQ0FBZVIsbUJBQWYsR0FBeUNBLG1CQUF6QztBQUNBTyxNQUFNLENBQUNDLE9BQVAsQ0FBZVAsdUJBQWYsR0FBeUNBLHVCQUF6QztBQUNBTSxNQUFNLENBQUNDLE9BQVAsQ0FBZUMsWUFBZixHQUF5Q2IsSUFBSSxDQUFDYSxZQUE5QztBQUNBRixNQUFNLENBQUNDLE9BQVAsQ0FBZUUsWUFBZixHQUF5Q2QsSUFBSSxDQUFDYyxZQUE5QztBQUNBSCxNQUFNLENBQUNDLE9BQVAsQ0FBZUcsY0FBZixHQUF5Q2YsSUFBSSxDQUFDZSxjQUE5QztBQUNBSixNQUFNLENBQUNDLE9BQVAsQ0FBZUksaUJBQWYsR0FBeUNoQixJQUFJLENBQUNnQixpQkFBOUM7QUFDQUwsTUFBTSxDQUFDQyxPQUFQLENBQWVLLFlBQWYsR0FBeUNqQixJQUFJLENBQUNpQixZQUE5QztBQUNBTixNQUFNLENBQUNDLE9BQVAsQ0FBZU0sV0FBZixHQUF5Q2xCLElBQUksQ0FBQ2tCLFdBQTlDO0FBQ0FQLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlTyxZQUFmLEdBQXlDbkIsSUFBSSxDQUFDbUIsWUFBOUM7QUFDQVIsTUFBTSxDQUFDQyxPQUFQLENBQWVRLFlBQWYsR0FBeUNwQixJQUFJLENBQUNvQixZQUE5QztBQUNBVCxNQUFNLENBQUNDLE9BQVAsQ0FBZVMsZUFBZixHQUF5Q3JCLElBQUksQ0FBQ3FCLGVBQTlDIiwiZmlsZSI6IjUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBGZW5nYXJpIHNwZWNpZmljIGZ1bmN0aW9uc1xuICpcbiAqIFRoaXMgZmlsZSBpbmNsdWRlcyBmZW5nYXJpLXNwZWNpZmljIGRhdGEgb3IgYW5kIGZ1bmN0aW9uYWxpdHkgZm9yIHVzZXJzIHRvXG4gKiBtYW5pcHVsYXRlIGZlbmdhcmkncyBzdHJpbmcgdHlwZS5cbiAqIFRoZSBmaWVsZHMgYXJlIGV4cG9zZWQgdG8gdGhlIHVzZXIgb24gdGhlICdmZW5nYXJpJyBlbnRyeSBwb2ludDsgaG93ZXZlciB0b1xuICogYXZvaWQgYSBkZXBlbmRlbmN5IG9uIGRlZnMuanMgZnJvbSBsYXV4bGliLmpzIHRoZXkgYXJlIGRlZmluZWQgaW4gdGhpcyBmaWxlLlxuICovXG5cbmNvbnN0IGRlZnMgPSByZXF1aXJlKFwiLi9kZWZzLmpzXCIpO1xuXG5jb25zdCBGRU5HQVJJX1ZFUlNJT05fTUFKT1IgICA9IFwiMFwiO1xuY29uc3QgRkVOR0FSSV9WRVJTSU9OX01JTk9SICAgPSBcIjFcIjtcbmNvbnN0IEZFTkdBUklfVkVSU0lPTl9OVU0gICAgID0gMTtcbmNvbnN0IEZFTkdBUklfVkVSU0lPTl9SRUxFQVNFID0gXCI0XCI7XG5jb25zdCBGRU5HQVJJX1ZFUlNJT04gICAgICAgICA9IFwiRmVuZ2FyaSBcIiArIEZFTkdBUklfVkVSU0lPTl9NQUpPUiArIFwiLlwiICsgRkVOR0FSSV9WRVJTSU9OX01JTk9SO1xuY29uc3QgRkVOR0FSSV9SRUxFQVNFICAgICAgICAgPSBGRU5HQVJJX1ZFUlNJT04gKyBcIi5cIiArIEZFTkdBUklfVkVSU0lPTl9SRUxFQVNFO1xuY29uc3QgRkVOR0FSSV9BVVRIT1JTICAgICAgICAgPSBcIkIuIEdpYW5uYW5nZWxpLCBEYXVybmltYXRvclwiO1xuY29uc3QgRkVOR0FSSV9DT1BZUklHSFQgICAgICAgPSBGRU5HQVJJX1JFTEVBU0UgKyBcIiAgQ29weXJpZ2h0IChDKSAyMDE3LTIwMTggXCIgKyBGRU5HQVJJX0FVVEhPUlMgKyBcIlxcbkJhc2VkIG9uOiBcIiArIGRlZnMuTFVBX0NPUFlSSUdIVDtcblxubW9kdWxlLmV4cG9ydHMuRkVOR0FSSV9BVVRIT1JTICAgICAgICAgPSBGRU5HQVJJX0FVVEhPUlM7XG5tb2R1bGUuZXhwb3J0cy5GRU5HQVJJX0NPUFlSSUdIVCAgICAgICA9IEZFTkdBUklfQ09QWVJJR0hUO1xubW9kdWxlLmV4cG9ydHMuRkVOR0FSSV9SRUxFQVNFICAgICAgICAgPSBGRU5HQVJJX1JFTEVBU0U7XG5tb2R1bGUuZXhwb3J0cy5GRU5HQVJJX1ZFUlNJT04gICAgICAgICA9IEZFTkdBUklfVkVSU0lPTjtcbm1vZHVsZS5leHBvcnRzLkZFTkdBUklfVkVSU0lPTl9NQUpPUiAgID0gRkVOR0FSSV9WRVJTSU9OX01BSk9SO1xubW9kdWxlLmV4cG9ydHMuRkVOR0FSSV9WRVJTSU9OX01JTk9SICAgPSBGRU5HQVJJX1ZFUlNJT05fTUlOT1I7XG5tb2R1bGUuZXhwb3J0cy5GRU5HQVJJX1ZFUlNJT05fTlVNICAgICA9IEZFTkdBUklfVkVSU0lPTl9OVU07XG5tb2R1bGUuZXhwb3J0cy5GRU5HQVJJX1ZFUlNJT05fUkVMRUFTRSA9IEZFTkdBUklfVkVSU0lPTl9SRUxFQVNFO1xubW9kdWxlLmV4cG9ydHMuaXNfbHVhc3RyaW5nICAgICAgICAgICAgPSBkZWZzLmlzX2x1YXN0cmluZztcbm1vZHVsZS5leHBvcnRzLmx1YXN0cmluZ19lcSAgICAgICAgICAgID0gZGVmcy5sdWFzdHJpbmdfZXE7XG5tb2R1bGUuZXhwb3J0cy5sdWFzdHJpbmdfZnJvbSAgICAgICAgICA9IGRlZnMubHVhc3RyaW5nX2Zyb207XG5tb2R1bGUuZXhwb3J0cy5sdWFzdHJpbmdfaW5kZXhPZiAgICAgICA9IGRlZnMubHVhc3RyaW5nX2luZGV4T2Y7XG5tb2R1bGUuZXhwb3J0cy5sdWFzdHJpbmdfb2YgICAgICAgICAgICA9IGRlZnMubHVhc3RyaW5nX29mO1xubW9kdWxlLmV4cG9ydHMudG9fanNzdHJpbmcgICAgICAgICAgICAgPSBkZWZzLnRvX2pzc3RyaW5nO1xubW9kdWxlLmV4cG9ydHMudG9fbHVhc3RyaW5nICAgICAgICAgICAgPSBkZWZzLnRvX2x1YXN0cmluZztcbm1vZHVsZS5leHBvcnRzLnRvX3VyaXN0cmluZyAgICAgICAgICAgID0gZGVmcy50b191cmlzdHJpbmc7XG5tb2R1bGUuZXhwb3J0cy5mcm9tX3VzZXJzdHJpbmcgICAgICAgICA9IGRlZnMuZnJvbV91c2Vyc3RyaW5nO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///5\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nvar _modes;\n\nfunction _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar _require = __webpack_require__(1),\n    LUA_OPADD = _require.LUA_OPADD,\n    LUA_OPBAND = _require.LUA_OPBAND,\n    LUA_OPBNOT = _require.LUA_OPBNOT,\n    LUA_OPBOR = _require.LUA_OPBOR,\n    LUA_OPBXOR = _require.LUA_OPBXOR,\n    LUA_OPDIV = _require.LUA_OPDIV,\n    LUA_OPIDIV = _require.LUA_OPIDIV,\n    LUA_OPMOD = _require.LUA_OPMOD,\n    LUA_OPMUL = _require.LUA_OPMUL,\n    LUA_OPPOW = _require.LUA_OPPOW,\n    LUA_OPSHL = _require.LUA_OPSHL,\n    LUA_OPSHR = _require.LUA_OPSHR,\n    LUA_OPSUB = _require.LUA_OPSUB,\n    LUA_OPUNM = _require.LUA_OPUNM,\n    _require$constant_typ = _require.constant_types,\n    LUA_NUMTAGS = _require$constant_typ.LUA_NUMTAGS,\n    LUA_TBOOLEAN = _require$constant_typ.LUA_TBOOLEAN,\n    LUA_TCCL = _require$constant_typ.LUA_TCCL,\n    LUA_TFUNCTION = _require$constant_typ.LUA_TFUNCTION,\n    LUA_TLCF = _require$constant_typ.LUA_TLCF,\n    LUA_TLCL = _require$constant_typ.LUA_TLCL,\n    LUA_TLIGHTUSERDATA = _require$constant_typ.LUA_TLIGHTUSERDATA,\n    LUA_TLNGSTR = _require$constant_typ.LUA_TLNGSTR,\n    LUA_TNIL = _require$constant_typ.LUA_TNIL,\n    LUA_TNUMBER = _require$constant_typ.LUA_TNUMBER,\n    LUA_TNUMFLT = _require$constant_typ.LUA_TNUMFLT,\n    LUA_TNUMINT = _require$constant_typ.LUA_TNUMINT,\n    LUA_TSHRSTR = _require$constant_typ.LUA_TSHRSTR,\n    LUA_TSTRING = _require$constant_typ.LUA_TSTRING,\n    LUA_TTABLE = _require$constant_typ.LUA_TTABLE,\n    LUA_TTHREAD = _require$constant_typ.LUA_TTHREAD,\n    LUA_TUSERDATA = _require$constant_typ.LUA_TUSERDATA,\n    from_userstring = _require.from_userstring,\n    luastring_indexOf = _require.luastring_indexOf,\n    luastring_of = _require.luastring_of,\n    to_jsstring = _require.to_jsstring,\n    to_luastring = _require.to_luastring;\n\nvar _require2 = __webpack_require__(22),\n    lisdigit = _require2.lisdigit,\n    lisprint = _require2.lisprint,\n    lisspace = _require2.lisspace,\n    lisxdigit = _require2.lisxdigit;\n\nvar ldebug = __webpack_require__(11);\n\nvar ldo = __webpack_require__(8);\n\nvar lstate = __webpack_require__(12);\n\nvar _require3 = __webpack_require__(10),\n    luaS_bless = _require3.luaS_bless,\n    luaS_new = _require3.luaS_new;\n\nvar ltable = __webpack_require__(9);\n\nvar _require4 = __webpack_require__(3),\n    LUA_COMPAT_FLOATSTRING = _require4.LUA_COMPAT_FLOATSTRING,\n    ldexp = _require4.ldexp,\n    lua_integer2str = _require4.lua_integer2str,\n    lua_number2str = _require4.lua_number2str;\n\nvar lvm = __webpack_require__(15);\n\nvar _require5 = __webpack_require__(4),\n    MAX_INT = _require5.MAX_INT,\n    luai_nummod = _require5.luai_nummod,\n    lua_assert = _require5.lua_assert;\n\nvar ltm = __webpack_require__(14);\n\nvar LUA_TPROTO = LUA_NUMTAGS;\nvar LUA_TDEADKEY = LUA_NUMTAGS + 1;\n\nvar TValue =\n/*#__PURE__*/\nfunction () {\n  function TValue(type, value) {\n    _classCallCheck(this, TValue);\n\n    this.type = type;\n    this.value = value;\n  }\n  /* type tag of a TValue (bits 0-3 for tags + variant bits 4-5) */\n\n\n  _createClass(TValue, [{\n    key: "ttype",\n    value: function ttype() {\n      return this.type & 0x3F;\n    }\n    /* type tag of a TValue with no variants (bits 0-3) */\n\n  }, {\n    key: "ttnov",\n    value: function ttnov() {\n      return this.type & 0x0F;\n    }\n  }, {\n    key: "checktag",\n    value: function checktag(t) {\n      return this.type === t;\n    }\n  }, {\n    key: "checktype",\n    value: function checktype(t) {\n      return this.ttnov() === t;\n    }\n  }, {\n    key: "ttisnumber",\n    value: function ttisnumber() {\n      return this.checktype(LUA_TNUMBER);\n    }\n  }, {\n    key: "ttisfloat",\n    value: function ttisfloat() {\n      return this.checktag(LUA_TNUMFLT);\n    }\n  }, {\n    key: "ttisinteger",\n    value: function ttisinteger() {\n      return this.checktag(LUA_TNUMINT);\n    }\n  }, {\n    key: "ttisnil",\n    value: function ttisnil() {\n      return this.checktag(LUA_TNIL);\n    }\n  }, {\n    key: "ttisboolean",\n    value: function ttisboolean() {\n      return this.checktag(LUA_TBOOLEAN);\n    }\n  }, {\n    key: "ttislightuserdata",\n    value: function ttislightuserdata() {\n      return this.checktag(LUA_TLIGHTUSERDATA);\n    }\n  }, {\n    key: "ttisstring",\n    value: function ttisstring() {\n      return this.checktype(LUA_TSTRING);\n    }\n  }, {\n    key: "ttisshrstring",\n    value: function ttisshrstring() {\n      return this.checktag(LUA_TSHRSTR);\n    }\n  }, {\n    key: "ttislngstring",\n    value: function ttislngstring() {\n      return this.checktag(LUA_TLNGSTR);\n    }\n  }, {\n    key: "ttistable",\n    value: function ttistable() {\n      return this.checktag(LUA_TTABLE);\n    }\n  }, {\n    key: "ttisfunction",\n    value: function ttisfunction() {\n      return this.checktype(LUA_TFUNCTION);\n    }\n  }, {\n    key: "ttisclosure",\n    value: function ttisclosure() {\n      return (this.type & 0x1F) === LUA_TFUNCTION;\n    }\n  }, {\n    key: "ttisCclosure",\n    value: function ttisCclosure() {\n      return this.checktag(LUA_TCCL);\n    }\n  }, {\n    key: "ttisLclosure",\n    value: function ttisLclosure() {\n      return this.checktag(LUA_TLCL);\n    }\n  }, {\n    key: "ttislcf",\n    value: function ttislcf() {\n      return this.checktag(LUA_TLCF);\n    }\n  }, {\n    key: "ttisfulluserdata",\n    value: function ttisfulluserdata() {\n      return this.checktag(LUA_TUSERDATA);\n    }\n  }, {\n    key: "ttisthread",\n    value: function ttisthread() {\n      return this.checktag(LUA_TTHREAD);\n    }\n  }, {\n    key: "ttisdeadkey",\n    value: function ttisdeadkey() {\n      return this.checktag(LUA_TDEADKEY);\n    }\n  }, {\n    key: "l_isfalse",\n    value: function l_isfalse() {\n      return this.ttisnil() || this.ttisboolean() && this.value === false;\n    }\n  }, {\n    key: "setfltvalue",\n    value: function setfltvalue(x) {\n      this.type = LUA_TNUMFLT;\n      this.value = x;\n    }\n  }, {\n    key: "chgfltvalue",\n    value: function chgfltvalue(x) {\n      lua_assert(this.type == LUA_TNUMFLT);\n      this.value = x;\n    }\n  }, {\n    key: "setivalue",\n    value: function setivalue(x) {\n      this.type = LUA_TNUMINT;\n      this.value = x;\n    }\n  }, {\n    key: "chgivalue",\n    value: function chgivalue(x) {\n      lua_assert(this.type == LUA_TNUMINT);\n      this.value = x;\n    }\n  }, {\n    key: "setnilvalue",\n    value: function setnilvalue() {\n      this.type = LUA_TNIL;\n      this.value = null;\n    }\n  }, {\n    key: "setfvalue",\n    value: function setfvalue(x) {\n      this.type = LUA_TLCF;\n      this.value = x;\n    }\n  }, {\n    key: "setpvalue",\n    value: function setpvalue(x) {\n      this.type = LUA_TLIGHTUSERDATA;\n      this.value = x;\n    }\n  }, {\n    key: "setbvalue",\n    value: function setbvalue(x) {\n      this.type = LUA_TBOOLEAN;\n      this.value = x;\n    }\n  }, {\n    key: "setsvalue",\n    value: function setsvalue(x) {\n      this.type = LUA_TLNGSTR;\n      /* LUA_TSHRSTR? */\n\n      this.value = x;\n    }\n  }, {\n    key: "setuvalue",\n    value: function setuvalue(x) {\n      this.type = LUA_TUSERDATA;\n      this.value = x;\n    }\n  }, {\n    key: "setthvalue",\n    value: function setthvalue(x) {\n      this.type = LUA_TTHREAD;\n      this.value = x;\n    }\n  }, {\n    key: "setclLvalue",\n    value: function setclLvalue(x) {\n      this.type = LUA_TLCL;\n      this.value = x;\n    }\n  }, {\n    key: "setclCvalue",\n    value: function setclCvalue(x) {\n      this.type = LUA_TCCL;\n      this.value = x;\n    }\n  }, {\n    key: "sethvalue",\n    value: function sethvalue(x) {\n      this.type = LUA_TTABLE;\n      this.value = x;\n    }\n  }, {\n    key: "setdeadvalue",\n    value: function setdeadvalue() {\n      this.type = LUA_TDEADKEY;\n      this.value = null;\n    }\n  }, {\n    key: "setfrom",\n    value: function setfrom(tv) {\n      /* in lua C source setobj2t is often used for this */\n      this.type = tv.type;\n      this.value = tv.value;\n    }\n  }, {\n    key: "tsvalue",\n    value: function tsvalue() {\n      lua_assert(this.ttisstring());\n      return this.value;\n    }\n  }, {\n    key: "svalue",\n    value: function svalue() {\n      return this.tsvalue().getstr();\n    }\n  }, {\n    key: "vslen",\n    value: function vslen() {\n      return this.tsvalue().tsslen();\n    }\n  }, {\n    key: "jsstring",\n    value: function jsstring(from, to) {\n      return to_jsstring(this.svalue(), from, to, true);\n    }\n  }]);\n\n  return TValue;\n}();\n\nvar pushobj2s = function pushobj2s(L, tv) {\n  L.stack[L.top++] = new TValue(tv.type, tv.value);\n};\n\nvar pushsvalue2s = function pushsvalue2s(L, ts) {\n  L.stack[L.top++] = new TValue(LUA_TLNGSTR, ts);\n};\n/* from stack to (same) stack */\n\n\nvar setobjs2s = function setobjs2s(L, newidx, oldidx) {\n  L.stack[newidx].setfrom(L.stack[oldidx]);\n};\n/* to stack (not from same stack) */\n\n\nvar setobj2s = function setobj2s(L, newidx, oldtv) {\n  L.stack[newidx].setfrom(oldtv);\n};\n\nvar setsvalue2s = function setsvalue2s(L, newidx, ts) {\n  L.stack[newidx].setsvalue(ts);\n};\n\nvar luaO_nilobject = new TValue(LUA_TNIL, null);\nObject.freeze(luaO_nilobject);\nmodule.exports.luaO_nilobject = luaO_nilobject;\n\nvar LClosure = function LClosure(L, n) {\n  _classCallCheck(this, LClosure);\n\n  this.id = L.l_G.id_counter++;\n  this.p = null;\n  this.nupvalues = n;\n  this.upvals = new Array(n);\n  /* list of upvalues. initialised in luaF_initupvals */\n};\n\nvar CClosure = function CClosure(L, f, n) {\n  _classCallCheck(this, CClosure);\n\n  this.id = L.l_G.id_counter++;\n  this.f = f;\n  this.nupvalues = n;\n  this.upvalue = new Array(n);\n  /* list of upvalues as TValues */\n\n  while (n--) {\n    this.upvalue[n] = new TValue(LUA_TNIL, null);\n  }\n};\n\nvar Udata = function Udata(L, size) {\n  _classCallCheck(this, Udata);\n\n  this.id = L.l_G.id_counter++;\n  this.metatable = null;\n  this.uservalue = new TValue(LUA_TNIL, null);\n  this.len = size;\n  this.data = Object.create(null); // ignores size argument\n};\n/*\n** Description of a local variable for function prototypes\n** (used for debug information)\n*/\n\n\nvar LocVar = function LocVar() {\n  _classCallCheck(this, LocVar);\n\n  this.varname = null;\n  this.startpc = NaN;\n  /* first point where variable is active */\n\n  this.endpc = NaN;\n  /* first point where variable is dead */\n};\n\nvar RETS = to_luastring("...");\nvar PRE = to_luastring("[string \\"");\nvar POS = to_luastring("\\"]");\n\nvar luaO_chunkid = function luaO_chunkid(source, bufflen) {\n  var l = source.length;\n  var out;\n\n  if (source[0] === 61\n  /* (\'=\').charCodeAt(0) */\n  ) {\n      /* \'literal\' source */\n      if (l < bufflen) {\n        /* small enough? */\n        out = new Uint8Array(l - 1);\n        out.set(source.subarray(1));\n      } else {\n        /* truncate it */\n        out = new Uint8Array(bufflen);\n        out.set(source.subarray(1, bufflen + 1));\n      }\n    } else if (source[0] === 64\n  /* (\'@\').charCodeAt(0) */\n  ) {\n      /* file name */\n      if (l <= bufflen) {\n        /* small enough? */\n        out = new Uint8Array(l - 1);\n        out.set(source.subarray(1));\n      } else {\n        /* add \'...\' before rest of name */\n        out = new Uint8Array(bufflen);\n        out.set(RETS);\n        bufflen -= RETS.length;\n        out.set(source.subarray(l - bufflen), RETS.length);\n      }\n    } else {\n    /* string; format as [string "source"] */\n    out = new Uint8Array(bufflen);\n    var nli = luastring_indexOf(source, 10\n    /* (\'\\n\').charCodeAt(0) */\n    );\n    /* find first new line (if any) */\n\n    out.set(PRE);\n    /* add prefix */\n\n    var out_i = PRE.length;\n    bufflen -= PRE.length + RETS.length + POS.length;\n    /* save space for prefix+suffix */\n\n    if (l < bufflen && nli === -1) {\n      /* small one-line source? */\n      out.set(source, out_i);\n      /* keep it */\n\n      out_i += source.length;\n    } else {\n      if (nli !== -1) l = nli;\n      /* stop at first newline */\n\n      if (l > bufflen) l = bufflen;\n      out.set(source.subarray(0, l), out_i);\n      out_i += l;\n      out.set(RETS, out_i);\n      out_i += RETS.length;\n    }\n\n    out.set(POS, out_i);\n    out_i += POS.length;\n    out = out.subarray(0, out_i);\n  }\n\n  return out;\n};\n\nvar luaO_hexavalue = function luaO_hexavalue(c) {\n  if (lisdigit(c)) return c - 48;else return (c & 0xdf) - 55;\n};\n\nvar UTF8BUFFSZ = 8;\n\nvar luaO_utf8esc = function luaO_utf8esc(buff, x) {\n  var n = 1;\n  /* number of bytes put in buffer (backwards) */\n\n  lua_assert(x <= 0x10FFFF);\n  if (x < 0x80)\n    /* ascii? */\n    buff[UTF8BUFFSZ - 1] = x;else {\n    /* need continuation bytes */\n    var mfb = 0x3f;\n    /* maximum that fits in first byte */\n\n    do {\n      buff[UTF8BUFFSZ - n++] = 0x80 | x & 0x3f;\n      x >>= 6;\n      /* remove added bits */\n\n      mfb >>= 1;\n      /* now there is one less bit available in first byte */\n    } while (x > mfb);\n    /* still needs continuation byte? */\n\n\n    buff[UTF8BUFFSZ - n] = ~mfb << 1 | x;\n    /* add first byte */\n  }\n  return n;\n};\n/* maximum number of significant digits to read (to avoid overflows\n   even with single floats) */\n\n\nvar MAXSIGDIG = 30;\n/*\n** convert an hexadecimal numeric string to a number, following\n** C99 specification for \'strtod\'\n*/\n\nvar lua_strx2number = function lua_strx2number(s) {\n  var i = 0;\n  var r = 0.0;\n  /* result (accumulator) */\n\n  var sigdig = 0;\n  /* number of significant digits */\n\n  var nosigdig = 0;\n  /* number of non-significant digits */\n\n  var e = 0;\n  /* exponent correction */\n\n  var neg;\n  /* 1 if number is negative */\n\n  var hasdot = false;\n  /* true after seen a dot */\n\n  while (lisspace(s[i])) {\n    i++;\n  }\n  /* skip initial spaces */\n\n\n  if (neg = s[i] === 45\n  /* (\'-\').charCodeAt(0) */\n  ) i++;\n  /* check signal */\n  else if (s[i] === 43\n    /* (\'+\').charCodeAt(0) */\n    ) i++;\n  if (!(s[i] === 48\n  /* (\'0\').charCodeAt(0) */\n  && (s[i + 1] === 120\n  /* (\'x\').charCodeAt(0) */\n  || s[i + 1] === 88\n  /* (\'X\').charCodeAt(0) */\n  )))\n    /* check \'0x\' */\n    return null;\n  /* invalid format (no \'0x\') */\n\n  for (i += 2;; i++) {\n    /* skip \'0x\' and read numeral */\n    if (s[i] === 46\n    /* (\'.\').charCodeAt(0) i.e. dot/lua_getlocaledecpoint(); */\n    ) {\n        if (hasdot) break;\n        /* second dot? stop loop */\n        else hasdot = true;\n      } else if (lisxdigit(s[i])) {\n      if (sigdig === 0 && s[i] === 48\n      /* (\'0\').charCodeAt(0) */\n      )\n        /* non-significant digit (zero)? */\n        nosigdig++;else if (++sigdig <= MAXSIGDIG)\n        /* can read it without overflow? */\n        r = r * 16 + luaO_hexavalue(s[i]);else e++;\n      /* too many digits; ignore, but still count for exponent */\n\n      if (hasdot) e--;\n      /* decimal digit? correct exponent */\n    } else break;\n    /* neither a dot nor a digit */\n\n  }\n\n  if (nosigdig + sigdig === 0)\n    /* no digits? */\n    return null;\n  /* invalid format */\n\n  e *= 4;\n  /* each digit multiplies/divides value by 2^4 */\n\n  if (s[i] === 112\n  /* (\'p\').charCodeAt(0) */\n  || s[i] === 80\n  /* (\'P\').charCodeAt(0) */\n  ) {\n      /* exponent part? */\n      var exp1 = 0;\n      /* exponent value */\n\n      var neg1;\n      /* exponent signal */\n\n      i++;\n      /* skip \'p\' */\n\n      if (neg1 = s[i] === 45\n      /* (\'-\').charCodeAt(0) */\n      ) i++;\n      /* signal */\n      else if (s[i] === 43\n        /* (\'+\').charCodeAt(0) */\n        ) i++;\n      if (!lisdigit(s[i])) return null;\n      /* invalid; must have at least one digit */\n\n      while (lisdigit(s[i])) {\n        /* read exponent */\n        exp1 = exp1 * 10 + s[i++] - 48\n        /* (\'0\').charCodeAt(0) */\n        ;\n      }\n\n      if (neg1) exp1 = -exp1;\n      e += exp1;\n    }\n\n  if (neg) r = -r;\n  return {\n    n: ldexp(r, e),\n    i: i\n  };\n};\n\nvar lua_str2number = function lua_str2number(s) {\n  try {\n    s = to_jsstring(s);\n  } catch (e) {\n    return null;\n  }\n  /* use a regex to validate number and also to get length\n     parseFloat ignores trailing junk */\n\n\n  var r = /^[\\t\\v\\f \\n\\r]*[+-]?(?:[0-9]+\\.?[0-9]*|\\.[0-9]*)(?:[eE][+-]?[0-9]+)?/.exec(s);\n  if (!r) return null;\n  var flt = parseFloat(r[0]);\n  return !isNaN(flt) ? {\n    n: flt,\n    i: r[0].length\n  } : null;\n};\n\nvar l_str2dloc = function l_str2dloc(s, mode) {\n  var result = mode === \'x\' ? lua_strx2number(s) : lua_str2number(s);\n  /* try to convert */\n\n  if (result === null) return null;\n\n  while (lisspace(s[result.i])) {\n    result.i++;\n  }\n  /* skip trailing spaces */\n\n\n  return result.i === s.length || s[result.i] === 0 ? result : null;\n  /* OK if no trailing characters */\n};\n\nvar SIGILS = [46\n/* (".").charCodeAt(0) */\n, 120\n/* ("x").charCodeAt(0) */\n, 88\n/* ("X").charCodeAt(0) */\n, 110\n/* ("n").charCodeAt(0) */\n, 78\n/* ("N").charCodeAt(0) */\n];\nvar modes = (_modes = {}, _defineProperty(_modes, 46, "."), _defineProperty(_modes, 120, "x"), _defineProperty(_modes, 88, "x"), _defineProperty(_modes, 110, "n"), _defineProperty(_modes, 78, "n"), _modes);\n\nvar l_str2d = function l_str2d(s) {\n  var l = s.length;\n  var pmode = 0;\n\n  for (var i = 0; i < l; i++) {\n    var v = s[i];\n\n    if (SIGILS.indexOf(v) !== -1) {\n      pmode = v;\n      break;\n    }\n  }\n\n  var mode = modes[pmode];\n  if (mode === \'n\')\n    /* reject \'inf\' and \'nan\' */\n    return null;\n  var end = l_str2dloc(s, mode);\n  /* try to convert */\n  // if (end === null) {   /* failed? may be a different locale */\n  //     throw new Error("Locale not available to handle number"); // TODO\n  // }\n\n  return end;\n};\n\nvar MAXBY10 = Math.floor(MAX_INT / 10);\nvar MAXLASTD = MAX_INT % 10;\n\nvar l_str2int = function l_str2int(s) {\n  var i = 0;\n  var a = 0;\n  var empty = true;\n  var neg;\n\n  while (lisspace(s[i])) {\n    i++;\n  }\n  /* skip initial spaces */\n\n\n  if (neg = s[i] === 45\n  /* (\'-\').charCodeAt(0) */\n  ) i++;else if (s[i] === 43\n  /* (\'+\').charCodeAt(0) */\n  ) i++;\n\n  if (s[i] === 48\n  /* (\'0\').charCodeAt(0) */\n  && (s[i + 1] === 120\n  /* (\'x\').charCodeAt(0) */\n  || s[i + 1] === 88\n  /* (\'X\').charCodeAt(0) */\n  )) {\n    /* hex? */\n    i += 2;\n    /* skip \'0x\' */\n\n    for (; i < s.length && lisxdigit(s[i]); i++) {\n      a = a * 16 + luaO_hexavalue(s[i]) | 0;\n      empty = false;\n    }\n  } else {\n    /* decimal */\n    for (; i < s.length && lisdigit(s[i]); i++) {\n      var d = s[i] - 48\n      /* (\'0\').charCodeAt(0) */\n      ;\n      if (a >= MAXBY10 && (a > MAXBY10 || d > MAXLASTD + neg))\n        /* overflow? */\n        return null;\n      /* do not accept it (as integer) */\n\n      a = a * 10 + d | 0;\n      empty = false;\n    }\n  }\n\n  while (i < s.length && lisspace(s[i])) {\n    i++;\n  }\n  /* skip trailing spaces */\n\n\n  if (empty || i !== s.length && s[i] !== 0) return null;\n  /* something wrong in the numeral */\n  else {\n      return {\n        n: (neg ? -a : a) | 0,\n        i: i\n      };\n    }\n};\n\nvar luaO_str2num = function luaO_str2num(s, o) {\n  var s2i = l_str2int(s);\n\n  if (s2i !== null) {\n    /* try as an integer */\n    o.setivalue(s2i.n);\n    return s2i.i + 1;\n  } else {\n    /* else try as a float */\n    s2i = l_str2d(s);\n\n    if (s2i !== null) {\n      o.setfltvalue(s2i.n);\n      return s2i.i + 1;\n    } else return 0;\n    /* conversion failed */\n\n  }\n};\n\nvar luaO_tostring = function luaO_tostring(L, obj) {\n  var buff;\n  if (obj.ttisinteger()) buff = to_luastring(lua_integer2str(obj.value));else {\n    var str = lua_number2str(obj.value);\n\n    if (!LUA_COMPAT_FLOATSTRING && /^[-0123456789]+$/.test(str)) {\n      /* looks like an int? */\n      str += \'.0\';\n      /* adds \'.0\' to result: lua_getlocaledecpoint removed as optimisation */\n    }\n\n    buff = to_luastring(str);\n  }\n  obj.setsvalue(luaS_bless(L, buff));\n};\n\nvar pushstr = function pushstr(L, str) {\n  ldo.luaD_inctop(L);\n  setsvalue2s(L, L.top - 1, luaS_new(L, str));\n};\n\nvar luaO_pushvfstring = function luaO_pushvfstring(L, fmt, argp) {\n  var n = 0;\n  var i = 0;\n  var a = 0;\n  var e;\n\n  for (;;) {\n    e = luastring_indexOf(fmt, 37\n    /* (\'%\').charCodeAt(0) */\n    , i);\n    if (e == -1) break;\n    pushstr(L, fmt.subarray(i, e));\n\n    switch (fmt[e + 1]) {\n      case 115\n      /* (\'s\').charCodeAt(0) */\n      :\n        {\n          var s = argp[a++];\n          if (s === null) s = to_luastring("(null)", true);else {\n            s = from_userstring(s);\n            /* respect null terminator */\n\n            var _i = luastring_indexOf(s, 0);\n\n            if (_i !== -1) s = s.subarray(0, _i);\n          }\n          pushstr(L, s);\n          break;\n        }\n\n      case 99\n      /* (\'c\').charCodeAt(0) */\n      :\n        {\n          var buff = argp[a++];\n          if (lisprint(buff)) pushstr(L, luastring_of(buff));else luaO_pushfstring(L, to_luastring("<\\\\%d>", true), buff);\n          break;\n        }\n\n      case 100\n      /* (\'d\').charCodeAt(0) */\n      :\n      case 73\n      /* (\'I\').charCodeAt(0) */\n      :\n        ldo.luaD_inctop(L);\n        L.stack[L.top - 1].setivalue(argp[a++]);\n        luaO_tostring(L, L.stack[L.top - 1]);\n        break;\n\n      case 102\n      /* (\'f\').charCodeAt(0) */\n      :\n        ldo.luaD_inctop(L);\n        L.stack[L.top - 1].setfltvalue(argp[a++]);\n        luaO_tostring(L, L.stack[L.top - 1]);\n        break;\n\n      case 112\n      /* (\'p\').charCodeAt(0) */\n      :\n        {\n          var v = argp[a++];\n\n          if (v instanceof lstate.lua_State || v instanceof ltable.Table || v instanceof Udata || v instanceof LClosure || v instanceof CClosure) {\n            pushstr(L, to_luastring("0x" + v.id.toString(16)));\n          } else {\n            switch (_typeof(v)) {\n              case "undefined":\n                pushstr(L, to_luastring("undefined"));\n                break;\n\n              case "number":\n                /* before check object as null is an object */\n                pushstr(L, to_luastring("Number(" + v + ")"));\n                break;\n\n              case "string":\n                /* before check object as null is an object */\n                pushstr(L, to_luastring("String(" + JSON.stringify(v) + ")"));\n                break;\n\n              case "boolean":\n                /* before check object as null is an object */\n                pushstr(L, to_luastring(v ? "Boolean(true)" : "Boolean(false)"));\n                break;\n\n              case "object":\n                if (v === null) {\n                  /* null is special */\n                  pushstr(L, to_luastring("null"));\n                  break;\n                }\n\n              /* fall through */\n\n              case "function":\n                {\n                  var id = L.l_G.ids.get(v);\n\n                  if (!id) {\n                    id = L.l_G.id_counter++;\n                    L.l_G.ids.set(v, id);\n                  }\n\n                  pushstr(L, to_luastring("0x" + id.toString(16)));\n                  break;\n                }\n\n              default:\n                /* user provided object. no id available */\n                pushstr(L, to_luastring("<id NYI>"));\n            }\n          }\n\n          break;\n        }\n\n      case 85\n      /* (\'U\').charCodeAt(0) */\n      :\n        {\n          var _buff = new Uint8Array(UTF8BUFFSZ);\n\n          var l = luaO_utf8esc(_buff, argp[a++]);\n          pushstr(L, _buff.subarray(UTF8BUFFSZ - l));\n          break;\n        }\n\n      case 37\n      /* (\'%\').charCodeAt(0) */\n      :\n        pushstr(L, to_luastring("%", true));\n        break;\n\n      default:\n        ldebug.luaG_runerror(L, to_luastring("invalid option \'%%%c\' to \'lua_pushfstring\'"), fmt[e + 1]);\n    }\n\n    n += 2;\n    i = e + 2;\n  }\n\n  ldo.luaD_checkstack(L, 1);\n  pushstr(L, fmt.subarray(i));\n  if (n > 0) lvm.luaV_concat(L, n + 1);\n  return L.stack[L.top - 1].svalue();\n};\n\nvar luaO_pushfstring = function luaO_pushfstring(L, fmt) {\n  for (var _len = arguments.length, argp = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    argp[_key - 2] = arguments[_key];\n  }\n\n  return luaO_pushvfstring(L, fmt, argp);\n};\n/*\n** converts an integer to a "floating point byte", represented as\n** (eeeeexxx), where the real value is (1xxx) * 2^(eeeee - 1) if\n** eeeee !== 0 and (xxx) otherwise.\n*/\n\n\nvar luaO_int2fb = function luaO_int2fb(x) {\n  var e = 0;\n  /* exponent */\n\n  if (x < 8) return x;\n\n  while (x >= 8 << 4) {\n    /* coarse steps */\n    x = x + 0xf >> 4;\n    /* x = ceil(x / 16) */\n\n    e += 4;\n  }\n\n  while (x >= 8 << 1) {\n    /* fine steps */\n    x = x + 1 >> 1;\n    /* x = ceil(x / 2) */\n\n    e++;\n  }\n\n  return e + 1 << 3 | x - 8;\n};\n\nvar intarith = function intarith(L, op, v1, v2) {\n  switch (op) {\n    case LUA_OPADD:\n      return v1 + v2 | 0;\n\n    case LUA_OPSUB:\n      return v1 - v2 | 0;\n\n    case LUA_OPMUL:\n      return lvm.luaV_imul(v1, v2);\n\n    case LUA_OPMOD:\n      return lvm.luaV_mod(L, v1, v2);\n\n    case LUA_OPIDIV:\n      return lvm.luaV_div(L, v1, v2);\n\n    case LUA_OPBAND:\n      return v1 & v2;\n\n    case LUA_OPBOR:\n      return v1 | v2;\n\n    case LUA_OPBXOR:\n      return v1 ^ v2;\n\n    case LUA_OPSHL:\n      return lvm.luaV_shiftl(v1, v2);\n\n    case LUA_OPSHR:\n      return lvm.luaV_shiftl(v1, -v2);\n\n    case LUA_OPUNM:\n      return 0 - v1 | 0;\n\n    case LUA_OPBNOT:\n      return ~0 ^ v1;\n\n    default:\n      lua_assert(0);\n  }\n};\n\nvar numarith = function numarith(L, op, v1, v2) {\n  switch (op) {\n    case LUA_OPADD:\n      return v1 + v2;\n\n    case LUA_OPSUB:\n      return v1 - v2;\n\n    case LUA_OPMUL:\n      return v1 * v2;\n\n    case LUA_OPDIV:\n      return v1 / v2;\n\n    case LUA_OPPOW:\n      return Math.pow(v1, v2);\n\n    case LUA_OPIDIV:\n      return Math.floor(v1 / v2);\n\n    case LUA_OPUNM:\n      return -v1;\n\n    case LUA_OPMOD:\n      return luai_nummod(L, v1, v2);\n\n    default:\n      lua_assert(0);\n  }\n};\n\nvar luaO_arith = function luaO_arith(L, op, p1, p2, p3) {\n  var res = typeof p3 === "number" ? L.stack[p3] : p3;\n  /* FIXME */\n\n  switch (op) {\n    case LUA_OPBAND:\n    case LUA_OPBOR:\n    case LUA_OPBXOR:\n    case LUA_OPSHL:\n    case LUA_OPSHR:\n    case LUA_OPBNOT:\n      {\n        /* operate only on integers */\n        var i1, i2;\n\n        if ((i1 = lvm.tointeger(p1)) !== false && (i2 = lvm.tointeger(p2)) !== false) {\n          res.setivalue(intarith(L, op, i1, i2));\n          return;\n        } else break;\n        /* go to the end */\n\n      }\n\n    case LUA_OPDIV:\n    case LUA_OPPOW:\n      {\n        /* operate only on floats */\n        var n1, n2;\n\n        if ((n1 = lvm.tonumber(p1)) !== false && (n2 = lvm.tonumber(p2)) !== false) {\n          res.setfltvalue(numarith(L, op, n1, n2));\n          return;\n        } else break;\n        /* go to the end */\n\n      }\n\n    default:\n      {\n        /* other operations */\n        var _n, _n2;\n\n        if (p1.ttisinteger() && p2.ttisinteger()) {\n          res.setivalue(intarith(L, op, p1.value, p2.value));\n          return;\n        } else if ((_n = lvm.tonumber(p1)) !== false && (_n2 = lvm.tonumber(p2)) !== false) {\n          res.setfltvalue(numarith(L, op, _n, _n2));\n          return;\n        } else break;\n        /* go to the end */\n\n      }\n  }\n  /* could not perform raw operation; try metamethod */\n\n\n  lua_assert(L !== null);\n  /* should not fail when folding (compile time) */\n\n  ltm.luaT_trybinTM(L, p1, p2, p3, op - LUA_OPADD + ltm.TMS.TM_ADD);\n};\n\nmodule.exports.CClosure = CClosure;\nmodule.exports.LClosure = LClosure;\nmodule.exports.LUA_TDEADKEY = LUA_TDEADKEY;\nmodule.exports.LUA_TPROTO = LUA_TPROTO;\nmodule.exports.LocVar = LocVar;\nmodule.exports.TValue = TValue;\nmodule.exports.Udata = Udata;\nmodule.exports.UTF8BUFFSZ = UTF8BUFFSZ;\nmodule.exports.luaO_arith = luaO_arith;\nmodule.exports.luaO_chunkid = luaO_chunkid;\nmodule.exports.luaO_hexavalue = luaO_hexavalue;\nmodule.exports.luaO_int2fb = luaO_int2fb;\nmodule.exports.luaO_pushfstring = luaO_pushfstring;\nmodule.exports.luaO_pushvfstring = luaO_pushvfstring;\nmodule.exports.luaO_str2num = luaO_str2num;\nmodule.exports.luaO_tostring = luaO_tostring;\nmodule.exports.luaO_utf8esc = luaO_utf8esc;\nmodule.exports.numarith = numarith;\nmodule.exports.pushobj2s = pushobj2s;\nmodule.exports.pushsvalue2s = pushsvalue2s;\nmodule.exports.setobjs2s = setobjs2s;\nmodule.exports.setobj2s = setobj2s;\nmodule.exports.setsvalue2s = setsvalue2s;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nvar _require = __webpack_require__(3),\n    LUAL_BUFFERSIZE = _require.LUAL_BUFFERSIZE;\n\nvar _require2 = __webpack_require__(2),\n    LUA_ERRERR = _require2.LUA_ERRERR,\n    LUA_MULTRET = _require2.LUA_MULTRET,\n    LUA_REGISTRYINDEX = _require2.LUA_REGISTRYINDEX,\n    LUA_SIGNATURE = _require2.LUA_SIGNATURE,\n    LUA_TBOOLEAN = _require2.LUA_TBOOLEAN,\n    LUA_TLIGHTUSERDATA = _require2.LUA_TLIGHTUSERDATA,\n    LUA_TNIL = _require2.LUA_TNIL,\n    LUA_TNONE = _require2.LUA_TNONE,\n    LUA_TNUMBER = _require2.LUA_TNUMBER,\n    LUA_TSTRING = _require2.LUA_TSTRING,\n    LUA_TTABLE = _require2.LUA_TTABLE,\n    LUA_VERSION_NUM = _require2.LUA_VERSION_NUM,\n    lua_Debug = _require2.lua_Debug,\n    lua_absindex = _require2.lua_absindex,\n    lua_atpanic = _require2.lua_atpanic,\n    lua_call = _require2.lua_call,\n    lua_checkstack = _require2.lua_checkstack,\n    lua_concat = _require2.lua_concat,\n    lua_copy = _require2.lua_copy,\n    lua_createtable = _require2.lua_createtable,\n    lua_error = _require2.lua_error,\n    lua_getfield = _require2.lua_getfield,\n    lua_getinfo = _require2.lua_getinfo,\n    lua_getmetatable = _require2.lua_getmetatable,\n    lua_getstack = _require2.lua_getstack,\n    lua_gettop = _require2.lua_gettop,\n    lua_insert = _require2.lua_insert,\n    lua_isinteger = _require2.lua_isinteger,\n    lua_isnil = _require2.lua_isnil,\n    lua_isnumber = _require2.lua_isnumber,\n    lua_isstring = _require2.lua_isstring,\n    lua_istable = _require2.lua_istable,\n    lua_len = _require2.lua_len,\n    lua_load = _require2.lua_load,\n    lua_newstate = _require2.lua_newstate,\n    lua_newtable = _require2.lua_newtable,\n    lua_next = _require2.lua_next,\n    lua_pcall = _require2.lua_pcall,\n    lua_pop = _require2.lua_pop,\n    lua_pushboolean = _require2.lua_pushboolean,\n    lua_pushcclosure = _require2.lua_pushcclosure,\n    lua_pushcfunction = _require2.lua_pushcfunction,\n    lua_pushfstring = _require2.lua_pushfstring,\n    lua_pushinteger = _require2.lua_pushinteger,\n    lua_pushliteral = _require2.lua_pushliteral,\n    lua_pushlstring = _require2.lua_pushlstring,\n    lua_pushnil = _require2.lua_pushnil,\n    lua_pushstring = _require2.lua_pushstring,\n    lua_pushvalue = _require2.lua_pushvalue,\n    lua_pushvfstring = _require2.lua_pushvfstring,\n    lua_rawequal = _require2.lua_rawequal,\n    lua_rawget = _require2.lua_rawget,\n    lua_rawgeti = _require2.lua_rawgeti,\n    lua_rawlen = _require2.lua_rawlen,\n    lua_rawseti = _require2.lua_rawseti,\n    lua_remove = _require2.lua_remove,\n    lua_setfield = _require2.lua_setfield,\n    lua_setglobal = _require2.lua_setglobal,\n    lua_setmetatable = _require2.lua_setmetatable,\n    lua_settop = _require2.lua_settop,\n    lua_toboolean = _require2.lua_toboolean,\n    lua_tointeger = _require2.lua_tointeger,\n    lua_tointegerx = _require2.lua_tointegerx,\n    lua_tojsstring = _require2.lua_tojsstring,\n    lua_tolstring = _require2.lua_tolstring,\n    lua_tonumber = _require2.lua_tonumber,\n    lua_tonumberx = _require2.lua_tonumberx,\n    lua_topointer = _require2.lua_topointer,\n    lua_tostring = _require2.lua_tostring,\n    lua_touserdata = _require2.lua_touserdata,\n    lua_type = _require2.lua_type,\n    lua_typename = _require2.lua_typename,\n    lua_version = _require2.lua_version;\n\nvar _require3 = __webpack_require__(5),\n    from_userstring = _require3.from_userstring,\n    luastring_eq = _require3.luastring_eq,\n    to_luastring = _require3.to_luastring,\n    to_uristring = _require3.to_uristring;\n/* extra error code for \'luaL_loadfilex\' */\n\n\nvar LUA_ERRFILE = LUA_ERRERR + 1;\n/* key, in the registry, for table of loaded modules */\n\nvar LUA_LOADED_TABLE = to_luastring("_LOADED");\n/* key, in the registry, for table of preloaded loaders */\n\nvar LUA_PRELOAD_TABLE = to_luastring("_PRELOAD");\nvar LUA_FILEHANDLE = to_luastring("FILE*");\nvar LUAL_NUMSIZES = 4 * 16 + 8;\n\nvar __name = to_luastring("__name");\n\nvar __tostring = to_luastring("__tostring");\n\nvar empty = new Uint8Array(0);\n\nvar luaL_Buffer = function luaL_Buffer() {\n  _classCallCheck(this, luaL_Buffer);\n\n  this.L = null;\n  this.b = empty;\n  this.n = 0;\n};\n\nvar LEVELS1 = 10;\n/* size of the first part of the stack */\n\nvar LEVELS2 = 11;\n/* size of the second part of the stack */\n\n/*\n** search for \'objidx\' in table at index -1.\n** return 1 + string at top if find a good name.\n*/\n\nvar findfield = function findfield(L, objidx, level) {\n  if (level === 0 || !lua_istable(L, -1)) return 0;\n  /* not found */\n\n  lua_pushnil(L);\n  /* start \'next\' loop */\n\n  while (lua_next(L, -2)) {\n    /* for each pair in table */\n    if (lua_type(L, -2) === LUA_TSTRING) {\n      /* ignore non-string keys */\n      if (lua_rawequal(L, objidx, -1)) {\n        /* found object? */\n        lua_pop(L, 1);\n        /* remove value (but keep name) */\n\n        return 1;\n      } else if (findfield(L, objidx, level - 1)) {\n        /* try recursively */\n        lua_remove(L, -2);\n        /* remove table (but keep name) */\n\n        lua_pushliteral(L, ".");\n        lua_insert(L, -2);\n        /* place \'.\' between the two names */\n\n        lua_concat(L, 3);\n        return 1;\n      }\n    }\n\n    lua_pop(L, 1);\n    /* remove value */\n  }\n\n  return 0;\n  /* not found */\n};\n/*\n** Search for a name for a function in all loaded modules\n*/\n\n\nvar pushglobalfuncname = function pushglobalfuncname(L, ar) {\n  var top = lua_gettop(L);\n  lua_getinfo(L, to_luastring("f"), ar);\n  /* push function */\n\n  lua_getfield(L, LUA_REGISTRYINDEX, LUA_LOADED_TABLE);\n\n  if (findfield(L, top + 1, 2)) {\n    var name = lua_tostring(L, -1);\n\n    if (name[0] === 95\n    /* \'_\'.charCodeAt(0) */\n    && name[1] === 71\n    /* \'G\'.charCodeAt(0) */\n    && name[2] === 46\n    /* \'.\'.charCodeAt(0) */\n    ) {\n        /* name start with \'_G.\'? */\n        lua_pushstring(L, name.subarray(3));\n        /* push name without prefix */\n\n        lua_remove(L, -2);\n        /* remove original name */\n      }\n\n    lua_copy(L, -1, top + 1);\n    /* move name to proper place */\n\n    lua_pop(L, 2);\n    /* remove pushed values */\n\n    return 1;\n  } else {\n    lua_settop(L, top);\n    /* remove function and global table */\n\n    return 0;\n  }\n};\n\nvar pushfuncname = function pushfuncname(L, ar) {\n  if (pushglobalfuncname(L, ar)) {\n    /* try first a global name */\n    lua_pushfstring(L, to_luastring("function \'%s\'"), lua_tostring(L, -1));\n    lua_remove(L, -2);\n    /* remove name */\n  } else if (ar.namewhat.length !== 0)\n    /* is there a name from code? */\n    lua_pushfstring(L, to_luastring("%s \'%s\'"), ar.namewhat, ar.name);\n    /* use it */\n  else if (ar.what && ar.what[0] === 109\n    /* \'m\'.charCodeAt(0) */\n    )\n      /* main? */\n      lua_pushliteral(L, "main chunk");else if (ar.what && ar.what[0] === 76\n    /* \'L\'.charCodeAt(0) */\n    )\n      /* for Lua functions, use <file:line> */\n      lua_pushfstring(L, to_luastring("function <%s:%d>"), ar.short_src, ar.linedefined);else\n      /* nothing left... */\n      lua_pushliteral(L, "?");\n};\n\nvar lastlevel = function lastlevel(L) {\n  var ar = new lua_Debug();\n  var li = 1;\n  var le = 1;\n  /* find an upper bound */\n\n  while (lua_getstack(L, le, ar)) {\n    li = le;\n    le *= 2;\n  }\n  /* do a binary search */\n\n\n  while (li < le) {\n    var m = Math.floor((li + le) / 2);\n    if (lua_getstack(L, m, ar)) li = m + 1;else le = m;\n  }\n\n  return le - 1;\n};\n\nvar luaL_traceback = function luaL_traceback(L, L1, msg, level) {\n  var ar = new lua_Debug();\n  var top = lua_gettop(L);\n  var last = lastlevel(L1);\n  var n1 = last - level > LEVELS1 + LEVELS2 ? LEVELS1 : -1;\n  if (msg) lua_pushfstring(L, to_luastring("%s\\n"), msg);\n  luaL_checkstack(L, 10, null);\n  lua_pushliteral(L, "stack traceback:");\n\n  while (lua_getstack(L1, level++, ar)) {\n    if (n1-- === 0) {\n      /* too many levels? */\n      lua_pushliteral(L, "\\n\\t...");\n      /* add a \'...\' */\n\n      level = last - LEVELS2 + 1;\n      /* and skip to last ones */\n    } else {\n      lua_getinfo(L1, to_luastring("Slnt", true), ar);\n      lua_pushfstring(L, to_luastring("\\n\\t%s:"), ar.short_src);\n      if (ar.currentline > 0) lua_pushliteral(L, "".concat(ar.currentline, ":"));\n      lua_pushliteral(L, " in ");\n      pushfuncname(L, ar);\n      if (ar.istailcall) lua_pushliteral(L, "\\n\\t(...tail calls..)");\n      lua_concat(L, lua_gettop(L) - top);\n    }\n  }\n\n  lua_concat(L, lua_gettop(L) - top);\n};\n\nvar panic = function panic(L) {\n  var msg = "PANIC: unprotected error in call to Lua API (" + lua_tojsstring(L, -1) + ")";\n  throw new Error(msg);\n};\n\nvar luaL_argerror = function luaL_argerror(L, arg, extramsg) {\n  var ar = new lua_Debug();\n  if (!lua_getstack(L, 0, ar))\n    /* no stack frame? */\n    return luaL_error(L, to_luastring("bad argument #%d (%s)"), arg, extramsg);\n  lua_getinfo(L, to_luastring("n"), ar);\n\n  if (luastring_eq(ar.namewhat, to_luastring("method"))) {\n    arg--;\n    /* do not count \'self\' */\n\n    if (arg === 0)\n      /* error is in the self argument itself? */\n      return luaL_error(L, to_luastring("calling \'%s\' on bad self (%s)"), ar.name, extramsg);\n  }\n\n  if (ar.name === null) ar.name = pushglobalfuncname(L, ar) ? lua_tostring(L, -1) : to_luastring("?");\n  return luaL_error(L, to_luastring("bad argument #%d to \'%s\' (%s)"), arg, ar.name, extramsg);\n};\n\nvar typeerror = function typeerror(L, arg, tname) {\n  var typearg;\n  if (luaL_getmetafield(L, arg, __name) === LUA_TSTRING) typearg = lua_tostring(L, -1);else if (lua_type(L, arg) === LUA_TLIGHTUSERDATA) typearg = to_luastring("light userdata", true);else typearg = luaL_typename(L, arg);\n  var msg = lua_pushfstring(L, to_luastring("%s expected, got %s"), tname, typearg);\n  return luaL_argerror(L, arg, msg);\n};\n\nvar luaL_where = function luaL_where(L, level) {\n  var ar = new lua_Debug();\n\n  if (lua_getstack(L, level, ar)) {\n    lua_getinfo(L, to_luastring("Sl", true), ar);\n\n    if (ar.currentline > 0) {\n      lua_pushfstring(L, to_luastring("%s:%d: "), ar.short_src, ar.currentline);\n      return;\n    }\n  }\n\n  lua_pushstring(L, to_luastring(""));\n};\n\nvar luaL_error = function luaL_error(L, fmt) {\n  luaL_where(L, 1);\n\n  for (var _len = arguments.length, argp = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    argp[_key - 2] = arguments[_key];\n  }\n\n  lua_pushvfstring(L, fmt, argp);\n  lua_concat(L, 2);\n  return lua_error(L);\n};\n/* Unlike normal lua, we pass in an error object */\n\n\nvar luaL_fileresult = function luaL_fileresult(L, stat, fname, e) {\n  if (stat) {\n    lua_pushboolean(L, 1);\n    return 1;\n  } else {\n    lua_pushnil(L);\n    var message, errno;\n\n    if (e) {\n      message = e.message;\n      errno = -e.errno;\n    } else {\n      message = "Success";\n      /* what strerror(0) returns */\n\n      errno = 0;\n    }\n\n    if (fname) lua_pushfstring(L, to_luastring("%s: %s"), fname, to_luastring(message));else lua_pushstring(L, to_luastring(message));\n    lua_pushinteger(L, errno);\n    return 3;\n  }\n};\n/* Unlike normal lua, we pass in an error object */\n\n\nvar luaL_execresult = function luaL_execresult(L, e) {\n  var what, stat;\n\n  if (e === null) {\n    lua_pushboolean(L, 1);\n    lua_pushliteral(L, "exit");\n    lua_pushinteger(L, 0);\n    return 3;\n  } else if (e.status) {\n    what = "exit";\n    stat = e.status;\n  } else if (e.signal) {\n    what = "signal";\n    stat = e.signal;\n  } else {\n    /* XXX: node seems to have e.errno as a string instead of a number */\n    return luaL_fileresult(L, 0, null, e);\n  }\n\n  lua_pushnil(L);\n  lua_pushliteral(L, what);\n  lua_pushinteger(L, stat);\n  return 3;\n};\n\nvar luaL_getmetatable = function luaL_getmetatable(L, n) {\n  return lua_getfield(L, LUA_REGISTRYINDEX, n);\n};\n\nvar luaL_newmetatable = function luaL_newmetatable(L, tname) {\n  if (luaL_getmetatable(L, tname) !== LUA_TNIL)\n    /* name already in use? */\n    return 0;\n  /* leave previous value on top, but return 0 */\n\n  lua_pop(L, 1);\n  lua_createtable(L, 0, 2);\n  /* create metatable */\n\n  lua_pushstring(L, tname);\n  lua_setfield(L, -2, __name);\n  /* metatable.__name = tname */\n\n  lua_pushvalue(L, -1);\n  lua_setfield(L, LUA_REGISTRYINDEX, tname);\n  /* registry.name = metatable */\n\n  return 1;\n};\n\nvar luaL_setmetatable = function luaL_setmetatable(L, tname) {\n  luaL_getmetatable(L, tname);\n  lua_setmetatable(L, -2);\n};\n\nvar luaL_testudata = function luaL_testudata(L, ud, tname) {\n  var p = lua_touserdata(L, ud);\n\n  if (p !== null) {\n    /* value is a userdata? */\n    if (lua_getmetatable(L, ud)) {\n      /* does it have a metatable? */\n      luaL_getmetatable(L, tname);\n      /* get correct metatable */\n\n      if (!lua_rawequal(L, -1, -2))\n        /* not the same? */\n        p = null;\n      /* value is a userdata with wrong metatable */\n\n      lua_pop(L, 2);\n      /* remove both metatables */\n\n      return p;\n    }\n  }\n\n  return null;\n  /* value is not a userdata with a metatable */\n};\n\nvar luaL_checkudata = function luaL_checkudata(L, ud, tname) {\n  var p = luaL_testudata(L, ud, tname);\n  if (p === null) typeerror(L, ud, tname);\n  return p;\n};\n\nvar luaL_checkoption = function luaL_checkoption(L, arg, def, lst) {\n  var name = def !== null ? luaL_optstring(L, arg, def) : luaL_checkstring(L, arg);\n\n  for (var i = 0; lst[i]; i++) {\n    if (luastring_eq(lst[i], name)) return i;\n  }\n\n  return luaL_argerror(L, arg, lua_pushfstring(L, to_luastring("invalid option \'%s\'"), name));\n};\n\nvar tag_error = function tag_error(L, arg, tag) {\n  typeerror(L, arg, lua_typename(L, tag));\n};\n\nvar luaL_newstate = function luaL_newstate() {\n  var L = lua_newstate();\n  if (L) lua_atpanic(L, panic);\n  return L;\n};\n\nvar luaL_typename = function luaL_typename(L, i) {\n  return lua_typename(L, lua_type(L, i));\n};\n\nvar luaL_argcheck = function luaL_argcheck(L, cond, arg, extramsg) {\n  if (!cond) luaL_argerror(L, arg, extramsg);\n};\n\nvar luaL_checkany = function luaL_checkany(L, arg) {\n  if (lua_type(L, arg) === LUA_TNONE) luaL_argerror(L, arg, to_luastring("value expected", true));\n};\n\nvar luaL_checktype = function luaL_checktype(L, arg, t) {\n  if (lua_type(L, arg) !== t) tag_error(L, arg, t);\n};\n\nvar luaL_checklstring = function luaL_checklstring(L, arg) {\n  var s = lua_tolstring(L, arg);\n  if (s === null || s === undefined) tag_error(L, arg, LUA_TSTRING);\n  return s;\n};\n\nvar luaL_checkstring = luaL_checklstring;\n\nvar luaL_optlstring = function luaL_optlstring(L, arg, def) {\n  if (lua_type(L, arg) <= 0) {\n    return def === null ? null : from_userstring(def);\n  } else return luaL_checklstring(L, arg);\n};\n\nvar luaL_optstring = luaL_optlstring;\n\nvar interror = function interror(L, arg) {\n  if (lua_isnumber(L, arg)) luaL_argerror(L, arg, to_luastring("number has no integer representation", true));else tag_error(L, arg, LUA_TNUMBER);\n};\n\nvar luaL_checknumber = function luaL_checknumber(L, arg) {\n  var d = lua_tonumberx(L, arg);\n  if (d === false) tag_error(L, arg, LUA_TNUMBER);\n  return d;\n};\n\nvar luaL_optnumber = function luaL_optnumber(L, arg, def) {\n  return luaL_opt(L, luaL_checknumber, arg, def);\n};\n\nvar luaL_checkinteger = function luaL_checkinteger(L, arg) {\n  var d = lua_tointegerx(L, arg);\n  if (d === false) interror(L, arg);\n  return d;\n};\n\nvar luaL_optinteger = function luaL_optinteger(L, arg, def) {\n  return luaL_opt(L, luaL_checkinteger, arg, def);\n};\n\nvar luaL_prepbuffsize = function luaL_prepbuffsize(B, sz) {\n  var newend = B.n + sz;\n\n  if (B.b.length < newend) {\n    var newsize = Math.max(B.b.length * 2, newend);\n    /* double buffer size */\n\n    var newbuff = new Uint8Array(newsize);\n    /* create larger buffer */\n\n    newbuff.set(B.b);\n    /* copy original content */\n\n    B.b = newbuff;\n  }\n\n  return B.b.subarray(B.n, newend);\n};\n\nvar luaL_buffinit = function luaL_buffinit(L, B) {\n  B.L = L;\n  B.b = empty;\n};\n\nvar luaL_buffinitsize = function luaL_buffinitsize(L, B, sz) {\n  luaL_buffinit(L, B);\n  return luaL_prepbuffsize(B, sz);\n};\n\nvar luaL_prepbuffer = function luaL_prepbuffer(B) {\n  return luaL_prepbuffsize(B, LUAL_BUFFERSIZE);\n};\n\nvar luaL_addlstring = function luaL_addlstring(B, s, l) {\n  if (l > 0) {\n    s = from_userstring(s);\n    var b = luaL_prepbuffsize(B, l);\n    b.set(s.subarray(0, l));\n    luaL_addsize(B, l);\n  }\n};\n\nvar luaL_addstring = function luaL_addstring(B, s) {\n  s = from_userstring(s);\n  luaL_addlstring(B, s, s.length);\n};\n\nvar luaL_pushresult = function luaL_pushresult(B) {\n  lua_pushlstring(B.L, B.b, B.n);\n  /* delete old buffer */\n\n  B.n = 0;\n  B.b = empty;\n};\n\nvar luaL_addchar = function luaL_addchar(B, c) {\n  luaL_prepbuffsize(B, 1);\n  B.b[B.n++] = c;\n};\n\nvar luaL_addsize = function luaL_addsize(B, s) {\n  B.n += s;\n};\n\nvar luaL_pushresultsize = function luaL_pushresultsize(B, sz) {\n  luaL_addsize(B, sz);\n  luaL_pushresult(B);\n};\n\nvar luaL_addvalue = function luaL_addvalue(B) {\n  var L = B.L;\n  var s = lua_tostring(L, -1);\n  luaL_addlstring(B, s, s.length);\n  lua_pop(L, 1);\n  /* remove value */\n};\n\nvar luaL_opt = function luaL_opt(L, f, n, d) {\n  return lua_type(L, n) <= 0 ? d : f(L, n);\n};\n\nvar getS = function getS(L, ud) {\n  var s = ud.string;\n  ud.string = null;\n  return s;\n};\n\nvar luaL_loadbufferx = function luaL_loadbufferx(L, buff, size, name, mode) {\n  return lua_load(L, getS, {\n    string: buff\n  }, name, mode);\n};\n\nvar luaL_loadbuffer = function luaL_loadbuffer(L, s, sz, n) {\n  return luaL_loadbufferx(L, s, sz, n, null);\n};\n\nvar luaL_loadstring = function luaL_loadstring(L, s) {\n  return luaL_loadbuffer(L, s, s.length, s);\n};\n\nvar luaL_dostring = function luaL_dostring(L, s) {\n  return luaL_loadstring(L, s) || lua_pcall(L, 0, LUA_MULTRET, 0);\n};\n\nvar luaL_getmetafield = function luaL_getmetafield(L, obj, event) {\n  if (!lua_getmetatable(L, obj))\n    /* no metatable? */\n    return LUA_TNIL;else {\n    lua_pushstring(L, event);\n    var tt = lua_rawget(L, -2);\n    if (tt === LUA_TNIL)\n      /* is metafield nil? */\n      lua_pop(L, 2);\n      /* remove metatable and metafield */\n    else lua_remove(L, -2);\n    /* remove only metatable */\n\n    return tt;\n    /* return metafield type */\n  }\n};\n\nvar luaL_callmeta = function luaL_callmeta(L, obj, event) {\n  obj = lua_absindex(L, obj);\n  if (luaL_getmetafield(L, obj, event) === LUA_TNIL) return false;\n  lua_pushvalue(L, obj);\n  lua_call(L, 1, 1);\n  return true;\n};\n\nvar luaL_len = function luaL_len(L, idx) {\n  lua_len(L, idx);\n  var l = lua_tointegerx(L, -1);\n  if (l === false) luaL_error(L, to_luastring("object length is not an integer", true));\n  lua_pop(L, 1);\n  /* remove object */\n\n  return l;\n};\n\nvar p_I = to_luastring("%I");\nvar p_f = to_luastring("%f");\n\nvar luaL_tolstring = function luaL_tolstring(L, idx) {\n  if (luaL_callmeta(L, idx, __tostring)) {\n    if (!lua_isstring(L, -1)) luaL_error(L, to_luastring("\'__tostring\' must return a string"));\n  } else {\n    var t = lua_type(L, idx);\n\n    switch (t) {\n      case LUA_TNUMBER:\n        {\n          if (lua_isinteger(L, idx)) lua_pushfstring(L, p_I, lua_tointeger(L, idx));else lua_pushfstring(L, p_f, lua_tonumber(L, idx));\n          break;\n        }\n\n      case LUA_TSTRING:\n        lua_pushvalue(L, idx);\n        break;\n\n      case LUA_TBOOLEAN:\n        lua_pushliteral(L, lua_toboolean(L, idx) ? "true" : "false");\n        break;\n\n      case LUA_TNIL:\n        lua_pushliteral(L, "nil");\n        break;\n\n      default:\n        {\n          var tt = luaL_getmetafield(L, idx, __name);\n          var kind = tt === LUA_TSTRING ? lua_tostring(L, -1) : luaL_typename(L, idx);\n          lua_pushfstring(L, to_luastring("%s: %p"), kind, lua_topointer(L, idx));\n          if (tt !== LUA_TNIL) lua_remove(L, -2);\n          break;\n        }\n    }\n  }\n\n  return lua_tolstring(L, -1);\n};\n/*\n** Stripped-down \'require\': After checking "loaded" table, calls \'openf\'\n** to open a module, registers the result in \'package.loaded\' table and,\n** if \'glb\' is true, also registers the result in the global table.\n** Leaves resulting module on the top.\n*/\n\n\nvar luaL_requiref = function luaL_requiref(L, modname, openf, glb) {\n  luaL_getsubtable(L, LUA_REGISTRYINDEX, LUA_LOADED_TABLE);\n  lua_getfield(L, -1, modname);\n  /* LOADED[modname] */\n\n  if (!lua_toboolean(L, -1)) {\n    /* package not already loaded? */\n    lua_pop(L, 1);\n    /* remove field */\n\n    lua_pushcfunction(L, openf);\n    lua_pushstring(L, modname);\n    /* argument to open function */\n\n    lua_call(L, 1, 1);\n    /* call \'openf\' to open module */\n\n    lua_pushvalue(L, -1);\n    /* make copy of module (call result) */\n\n    lua_setfield(L, -3, modname);\n    /* LOADED[modname] = module */\n  }\n\n  lua_remove(L, -2);\n  /* remove LOADED table */\n\n  if (glb) {\n    lua_pushvalue(L, -1);\n    /* copy of module */\n\n    lua_setglobal(L, modname);\n    /* _G[modname] = module */\n  }\n};\n\nvar find_subarray = function find_subarray(arr, subarr, from_index) {\n  var i = from_index >>> 0,\n      sl = subarr.length,\n      l = arr.length + 1 - sl;\n\n  loop: for (; i < l; i++) {\n    for (var j = 0; j < sl; j++) {\n      if (arr[i + j] !== subarr[j]) continue loop;\n    }\n\n    return i;\n  }\n\n  return -1;\n};\n\nvar luaL_gsub = function luaL_gsub(L, s, p, r) {\n  var wild;\n  var b = new luaL_Buffer();\n  luaL_buffinit(L, b);\n\n  while ((wild = find_subarray(s, p)) >= 0) {\n    luaL_addlstring(b, s, wild);\n    /* push prefix */\n\n    luaL_addstring(b, r);\n    /* push replacement in place of pattern */\n\n    s = s.subarray(wild + p.length);\n    /* continue after \'p\' */\n  }\n\n  luaL_addstring(b, s);\n  /* push last suffix */\n\n  luaL_pushresult(b);\n  return lua_tostring(L, -1);\n};\n/*\n** ensure that stack[idx][fname] has a table and push that table\n** into the stack\n*/\n\n\nvar luaL_getsubtable = function luaL_getsubtable(L, idx, fname) {\n  if (lua_getfield(L, idx, fname) === LUA_TTABLE) return true;\n  /* table already there */\n  else {\n      lua_pop(L, 1);\n      /* remove previous result */\n\n      idx = lua_absindex(L, idx);\n      lua_newtable(L);\n      lua_pushvalue(L, -1);\n      /* copy to be left at top */\n\n      lua_setfield(L, idx, fname);\n      /* assign new table to field */\n\n      return false;\n      /* false, because did not find table there */\n    }\n};\n/*\n** set functions from list \'l\' into table at top - \'nup\'; each\n** function gets the \'nup\' elements at the top as upvalues.\n** Returns with only the table at the stack.\n*/\n\n\nvar luaL_setfuncs = function luaL_setfuncs(L, l, nup) {\n  luaL_checkstack(L, nup, to_luastring("too many upvalues", true));\n\n  for (var lib in l) {\n    /* fill the table with given functions */\n    for (var i = 0; i < nup; i++) {\n      /* copy upvalues to the top */\n      lua_pushvalue(L, -nup);\n    }\n\n    lua_pushcclosure(L, l[lib], nup);\n    /* closure with those upvalues */\n\n    lua_setfield(L, -(nup + 2), to_luastring(lib));\n  }\n\n  lua_pop(L, nup);\n  /* remove upvalues */\n};\n/*\n** Ensures the stack has at least \'space\' extra slots, raising an error\n** if it cannot fulfill the request. (The error handling needs a few\n** extra slots to format the error message. In case of an error without\n** this extra space, Lua will generate the same \'stack overflow\' error,\n** but without \'msg\'.)\n*/\n\n\nvar luaL_checkstack = function luaL_checkstack(L, space, msg) {\n  if (!lua_checkstack(L, space)) {\n    if (msg) luaL_error(L, to_luastring("stack overflow (%s)"), msg);else luaL_error(L, to_luastring(\'stack overflow\', true));\n  }\n};\n\nvar luaL_newlibtable = function luaL_newlibtable(L) {\n  lua_createtable(L);\n};\n\nvar luaL_newlib = function luaL_newlib(L, l) {\n  lua_createtable(L);\n  luaL_setfuncs(L, l, 0);\n};\n/* predefined references */\n\n\nvar LUA_NOREF = -2;\nvar LUA_REFNIL = -1;\n\nvar luaL_ref = function luaL_ref(L, t) {\n  var ref;\n\n  if (lua_isnil(L, -1)) {\n    lua_pop(L, 1);\n    /* remove from stack */\n\n    return LUA_REFNIL;\n    /* \'nil\' has a unique fixed reference */\n  }\n\n  t = lua_absindex(L, t);\n  lua_rawgeti(L, t, 0);\n  /* get first free element */\n\n  ref = lua_tointeger(L, -1);\n  /* ref = t[freelist] */\n\n  lua_pop(L, 1);\n  /* remove it from stack */\n\n  if (ref !== 0) {\n    /* any free element? */\n    lua_rawgeti(L, t, ref);\n    /* remove it from list */\n\n    lua_rawseti(L, t, 0);\n    /* (t[freelist] = t[ref]) */\n  } else\n    /* no free elements */\n    ref = lua_rawlen(L, t) + 1;\n  /* get a new reference */\n\n\n  lua_rawseti(L, t, ref);\n  return ref;\n};\n\nvar luaL_unref = function luaL_unref(L, t, ref) {\n  if (ref >= 0) {\n    t = lua_absindex(L, t);\n    lua_rawgeti(L, t, 0);\n    lua_rawseti(L, t, ref);\n    /* t[ref] = t[freelist] */\n\n    lua_pushinteger(L, ref);\n    lua_rawseti(L, t, 0);\n    /* t[freelist] = ref */\n  }\n};\n\nvar errfile = function errfile(L, what, fnameindex, error) {\n  var serr = error.message;\n  var filename = lua_tostring(L, fnameindex).subarray(1);\n  lua_pushfstring(L, to_luastring("cannot %s %s: %s"), to_luastring(what), filename, to_luastring(serr));\n  lua_remove(L, fnameindex);\n  return LUA_ERRFILE;\n};\n\nvar getc;\nvar utf8_bom = [0XEF, 0XBB, 0XBF];\n/* UTF-8 BOM mark */\n\nvar skipBOM = function skipBOM(lf) {\n  lf.n = 0;\n  var c;\n  var p = 0;\n\n  do {\n    c = getc(lf);\n    if (c === null || c !== utf8_bom[p]) return c;\n    p++;\n    lf.buff[lf.n++] = c;\n    /* to be read by the parser */\n  } while (p < utf8_bom.length);\n\n  lf.n = 0;\n  /* prefix matched; discard it */\n\n  return getc(lf);\n  /* return next character */\n};\n/*\n** reads the first character of file \'f\' and skips an optional BOM mark\n** in its beginning plus its first line if it starts with \'#\'. Returns\n** true if it skipped the first line.  In any case, \'*cp\' has the\n** first "valid" character of the file (after the optional BOM and\n** a first-line comment).\n*/\n\n\nvar skipcomment = function skipcomment(lf) {\n  var c = skipBOM(lf);\n\n  if (c === 35\n  /* \'#\'.charCodeAt(0) */\n  ) {\n      /* first line is a comment (Unix exec. file)? */\n      do {\n        /* skip first line */\n        c = getc(lf);\n      } while (c && c !== 10\n      /* \'\\n\'.charCodeAt(0) */\n      );\n\n      return {\n        skipped: true,\n        c: getc(lf)\n        /* skip end-of-line, if present */\n\n      };\n    } else {\n    return {\n      skipped: false,\n      c: c\n    };\n  }\n};\n\nvar luaL_loadfilex;\n\nif (true) {\n  var LoadF = function LoadF() {\n    _classCallCheck(this, LoadF);\n\n    this.n = NaN;\n    /* number of pre-read characters */\n\n    this.f = null;\n    /* file being read */\n\n    this.buff = new Uint8Array(1024);\n    /* area for reading file */\n\n    this.pos = 0;\n    /* current position in file */\n\n    this.err = void 0;\n  };\n\n  var getF = function getF(L, ud) {\n    var lf = ud;\n\n    if (lf.f !== null && lf.n > 0) {\n      /* are there pre-read characters to be read? */\n      var bytes = lf.n;\n      /* return them (chars already in buffer) */\n\n      lf.n = 0;\n      /* no more pre-read characters */\n\n      lf.f = lf.f.subarray(lf.pos);\n      /* we won\'t use lf.buff anymore */\n\n      return lf.buff.subarray(0, bytes);\n    }\n\n    var f = lf.f;\n    lf.f = null;\n    return f;\n  };\n\n  getc = function getc(lf) {\n    return lf.pos < lf.f.length ? lf.f[lf.pos++] : null;\n  };\n\n  luaL_loadfilex = function luaL_loadfilex(L, filename, mode) {\n    var lf = new LoadF();\n    var fnameindex = lua_gettop(L) + 1;\n    /* index of filename on the stack */\n\n    if (filename === null) {\n      throw new Error("Can\'t read stdin in the browser");\n    } else {\n      lua_pushfstring(L, to_luastring("@%s"), filename);\n      var path = to_uristring(filename);\n      var xhr = new XMLHttpRequest();\n      xhr.open("GET", path, false);\n      /*\n      Synchronous xhr in main thread always returns a js string.\n      Some browsers make console noise if you even attempt to set responseType\n      */\n\n      if (typeof window === "undefined") {\n        xhr.responseType = "arraybuffer";\n      }\n\n      xhr.send();\n\n      if (xhr.status >= 200 && xhr.status <= 299) {\n        if (typeof xhr.response === "string") {\n          lf.f = to_luastring(xhr.response);\n        } else {\n          lf.f = new Uint8Array(xhr.response);\n        }\n      } else {\n        lf.err = xhr.status;\n        return errfile(L, "open", fnameindex, {\n          message: "".concat(xhr.status, ": ").concat(xhr.statusText)\n        });\n      }\n    }\n\n    var com = skipcomment(lf);\n    /* check for signature first, as we don\'t want to add line number corrections in binary case */\n\n    if (com.c === LUA_SIGNATURE[0] && filename) {\n      /* binary file? */\n\n      /* no need to re-open */\n    } else if (com.skipped) {\n      /* read initial portion */\n      lf.buff[lf.n++] = 10\n      /* \'\\n\'.charCodeAt(0) */\n      ;\n      /* add line to correct line numbers */\n    }\n\n    if (com.c !== null) lf.buff[lf.n++] = com.c;\n    /* \'c\' is the first character of the stream */\n\n    var status = lua_load(L, getF, lf, lua_tostring(L, -1), mode);\n    var readstatus = lf.err;\n\n    if (readstatus) {\n      lua_settop(L, fnameindex);\n      /* ignore results from \'lua_load\' */\n\n      return errfile(L, "read", fnameindex, readstatus);\n    }\n\n    lua_remove(L, fnameindex);\n    return status;\n  };\n} else { var _getF, _LoadF, fs; }\n\nvar luaL_loadfile = function luaL_loadfile(L, filename) {\n  return luaL_loadfilex(L, filename, null);\n};\n\nvar luaL_dofile = function luaL_dofile(L, filename) {\n  return luaL_loadfile(L, filename) || lua_pcall(L, 0, LUA_MULTRET, 0);\n};\n\nvar lua_writestringerror = function lua_writestringerror() {\n  for (var i = 0; i < arguments.length; i++) {\n    var a = arguments[i];\n\n    if (true) {\n      /* split along new lines for separate console.error invocations */\n      do {\n        /* regexp uses [\\d\\D] to work around matching new lines\n           the \'s\' flag is non-standard */\n        var r = /([^\\n]*)\\n?([\\d\\D]*)/.exec(a);\n        console.error(r[1]);\n        a = r[2];\n      } while (a !== "");\n    } else {}\n  }\n};\n\nvar luaL_checkversion_ = function luaL_checkversion_(L, ver, sz) {\n  var v = lua_version(L);\n  if (sz != LUAL_NUMSIZES)\n    /* check numeric types */\n    luaL_error(L, to_luastring("core and library have incompatible numeric types"));\n  if (v != lua_version(null)) luaL_error(L, to_luastring("multiple Lua VMs detected"));else if (v !== ver) luaL_error(L, to_luastring("version mismatch: app. needs %f, Lua core provides %f"), ver, v);\n};\n/* There is no point in providing this function... */\n\n\nvar luaL_checkversion = function luaL_checkversion(L) {\n  luaL_checkversion_(L, LUA_VERSION_NUM, LUAL_NUMSIZES);\n};\n\nmodule.exports.LUA_ERRFILE = LUA_ERRFILE;\nmodule.exports.LUA_FILEHANDLE = LUA_FILEHANDLE;\nmodule.exports.LUA_LOADED_TABLE = LUA_LOADED_TABLE;\nmodule.exports.LUA_NOREF = LUA_NOREF;\nmodule.exports.LUA_PRELOAD_TABLE = LUA_PRELOAD_TABLE;\nmodule.exports.LUA_REFNIL = LUA_REFNIL;\nmodule.exports.luaL_Buffer = luaL_Buffer;\nmodule.exports.luaL_addchar = luaL_addchar;\nmodule.exports.luaL_addlstring = luaL_addlstring;\nmodule.exports.luaL_addsize = luaL_addsize;\nmodule.exports.luaL_addstring = luaL_addstring;\nmodule.exports.luaL_addvalue = luaL_addvalue;\nmodule.exports.luaL_argcheck = luaL_argcheck;\nmodule.exports.luaL_argerror = luaL_argerror;\nmodule.exports.luaL_buffinit = luaL_buffinit;\nmodule.exports.luaL_buffinitsize = luaL_buffinitsize;\nmodule.exports.luaL_callmeta = luaL_callmeta;\nmodule.exports.luaL_checkany = luaL_checkany;\nmodule.exports.luaL_checkinteger = luaL_checkinteger;\nmodule.exports.luaL_checklstring = luaL_checklstring;\nmodule.exports.luaL_checknumber = luaL_checknumber;\nmodule.exports.luaL_checkoption = luaL_checkoption;\nmodule.exports.luaL_checkstack = luaL_checkstack;\nmodule.exports.luaL_checkstring = luaL_checkstring;\nmodule.exports.luaL_checktype = luaL_checktype;\nmodule.exports.luaL_checkudata = luaL_checkudata;\nmodule.exports.luaL_checkversion = luaL_checkversion;\nmodule.exports.luaL_checkversion_ = luaL_checkversion_;\nmodule.exports.luaL_dofile = luaL_dofile;\nmodule.exports.luaL_dostring = luaL_dostring;\nmodule.exports.luaL_error = luaL_error;\nmodule.exports.luaL_execresult = luaL_execresult;\nmodule.exports.luaL_fileresult = luaL_fileresult;\nmodule.exports.luaL_getmetafield = luaL_getmetafield;\nmodule.exports.luaL_getmetatable = luaL_getmetatable;\nmodule.exports.luaL_getsubtable = luaL_getsubtable;\nmodule.exports.luaL_gsub = luaL_gsub;\nmodule.exports.luaL_len = luaL_len;\nmodule.exports.luaL_loadbuffer = luaL_loadbuffer;\nmodule.exports.luaL_loadbufferx = luaL_loadbufferx;\nmodule.exports.luaL_loadfile = luaL_loadfile;\nmodule.exports.luaL_loadfilex = luaL_loadfilex;\nmodule.exports.luaL_loadstring = luaL_loadstring;\nmodule.exports.luaL_newlib = luaL_newlib;\nmodule.exports.luaL_newlibtable = luaL_newlibtable;\nmodule.exports.luaL_newmetatable = luaL_newmetatable;\nmodule.exports.luaL_newstate = luaL_newstate;\nmodule.exports.luaL_opt = luaL_opt;\nmodule.exports.luaL_optinteger = luaL_optinteger;\nmodule.exports.luaL_optlstring = luaL_optlstring;\nmodule.exports.luaL_optnumber = luaL_optnumber;\nmodule.exports.luaL_optstring = luaL_optstring;\nmodule.exports.luaL_prepbuffer = luaL_prepbuffer;\nmodule.exports.luaL_prepbuffsize = luaL_prepbuffsize;\nmodule.exports.luaL_pushresult = luaL_pushresult;\nmodule.exports.luaL_pushresultsize = luaL_pushresultsize;\nmodule.exports.luaL_ref = luaL_ref;\nmodule.exports.luaL_requiref = luaL_requiref;\nmodule.exports.luaL_setfuncs = luaL_setfuncs;\nmodule.exports.luaL_setmetatable = luaL_setmetatable;\nmodule.exports.luaL_testudata = luaL_testudata;\nmodule.exports.luaL_tolstring = luaL_tolstring;\nmodule.exports.luaL_traceback = luaL_traceback;\nmodule.exports.luaL_typename = luaL_typename;\nmodule.exports.luaL_unref = luaL_unref;\nmodule.exports.luaL_where = luaL_where;\nmodule.exports.lua_writestringerror = lua_writestringerror;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7\n')},function(module,exports,__webpack_require__){"use strict";eval("\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar _require = __webpack_require__(1),\n    LUA_HOOKCALL = _require.LUA_HOOKCALL,\n    LUA_HOOKRET = _require.LUA_HOOKRET,\n    LUA_HOOKTAILCALL = _require.LUA_HOOKTAILCALL,\n    LUA_MASKCALL = _require.LUA_MASKCALL,\n    LUA_MASKLINE = _require.LUA_MASKLINE,\n    LUA_MASKRET = _require.LUA_MASKRET,\n    LUA_MINSTACK = _require.LUA_MINSTACK,\n    LUA_MULTRET = _require.LUA_MULTRET,\n    LUA_SIGNATURE = _require.LUA_SIGNATURE,\n    _require$constant_typ = _require.constant_types,\n    LUA_TCCL = _require$constant_typ.LUA_TCCL,\n    LUA_TLCF = _require$constant_typ.LUA_TLCF,\n    LUA_TLCL = _require$constant_typ.LUA_TLCL,\n    LUA_TNIL = _require$constant_typ.LUA_TNIL,\n    _require$thread_statu = _require.thread_status,\n    LUA_ERRMEM = _require$thread_statu.LUA_ERRMEM,\n    LUA_ERRERR = _require$thread_statu.LUA_ERRERR,\n    LUA_ERRRUN = _require$thread_statu.LUA_ERRRUN,\n    LUA_ERRSYNTAX = _require$thread_statu.LUA_ERRSYNTAX,\n    LUA_OK = _require$thread_statu.LUA_OK,\n    LUA_YIELD = _require$thread_statu.LUA_YIELD,\n    lua_Debug = _require.lua_Debug,\n    luastring_indexOf = _require.luastring_indexOf,\n    to_luastring = _require.to_luastring;\n\nvar lapi = __webpack_require__(19);\n\nvar ldebug = __webpack_require__(11);\n\nvar lfunc = __webpack_require__(13);\n\nvar _require2 = __webpack_require__(4),\n    api_check = _require2.api_check,\n    lua_assert = _require2.lua_assert,\n    LUAI_MAXCCALLS = _require2.LUAI_MAXCCALLS;\n\nvar lobject = __webpack_require__(6);\n\nvar lopcodes = __webpack_require__(16);\n\nvar lparser = __webpack_require__(23);\n\nvar lstate = __webpack_require__(12);\n\nvar _require3 = __webpack_require__(10),\n    luaS_newliteral = _require3.luaS_newliteral;\n\nvar ltm = __webpack_require__(14);\n\nvar _require4 = __webpack_require__(3),\n    LUAI_MAXSTACK = _require4.LUAI_MAXSTACK;\n\nvar lundump = __webpack_require__(36);\n\nvar lvm = __webpack_require__(15);\n\nvar _require5 = __webpack_require__(20),\n    MBuffer = _require5.MBuffer;\n\nvar adjust_top = function adjust_top(L, newtop) {\n  if (L.top < newtop) {\n    while (L.top < newtop) {\n      L.stack[L.top++] = new lobject.TValue(LUA_TNIL, null);\n    }\n  } else {\n    while (L.top > newtop) {\n      delete L.stack[--L.top];\n    }\n  }\n};\n\nvar seterrorobj = function seterrorobj(L, errcode, oldtop) {\n  var current_top = L.top;\n  /* extend stack so that L.stack[oldtop] is sure to exist */\n\n  while (L.top < oldtop + 1) {\n    L.stack[L.top++] = new lobject.TValue(LUA_TNIL, null);\n  }\n\n  switch (errcode) {\n    case LUA_ERRMEM:\n      {\n        lobject.setsvalue2s(L, oldtop, luaS_newliteral(L, \"not enough memory\"));\n        break;\n      }\n\n    case LUA_ERRERR:\n      {\n        lobject.setsvalue2s(L, oldtop, luaS_newliteral(L, \"error in error handling\"));\n        break;\n      }\n\n    default:\n      {\n        lobject.setobjs2s(L, oldtop, current_top - 1);\n      }\n  }\n\n  while (L.top > oldtop + 1) {\n    delete L.stack[--L.top];\n  }\n};\n\nvar ERRORSTACKSIZE = LUAI_MAXSTACK + 200;\n\nvar luaD_reallocstack = function luaD_reallocstack(L, newsize) {\n  lua_assert(newsize <= LUAI_MAXSTACK || newsize == ERRORSTACKSIZE);\n  lua_assert(L.stack_last == L.stack.length - lstate.EXTRA_STACK);\n  L.stack.length = newsize;\n  L.stack_last = newsize - lstate.EXTRA_STACK;\n};\n\nvar luaD_growstack = function luaD_growstack(L, n) {\n  var size = L.stack.length;\n  if (size > LUAI_MAXSTACK) luaD_throw(L, LUA_ERRERR);else {\n    var needed = L.top + n + lstate.EXTRA_STACK;\n    var newsize = 2 * size;\n    if (newsize > LUAI_MAXSTACK) newsize = LUAI_MAXSTACK;\n    if (newsize < needed) newsize = needed;\n\n    if (newsize > LUAI_MAXSTACK) {\n      /* stack overflow? */\n      luaD_reallocstack(L, ERRORSTACKSIZE);\n      ldebug.luaG_runerror(L, to_luastring(\"stack overflow\", true));\n    } else luaD_reallocstack(L, newsize);\n  }\n};\n\nvar luaD_checkstack = function luaD_checkstack(L, n) {\n  if (L.stack_last - L.top <= n) luaD_growstack(L, n);\n};\n\nvar stackinuse = function stackinuse(L) {\n  var lim = L.top;\n\n  for (var ci = L.ci; ci !== null; ci = ci.previous) {\n    if (lim < ci.top) lim = ci.top;\n  }\n\n  lua_assert(lim <= L.stack_last);\n  return lim + 1;\n  /* part of stack in use */\n};\n\nvar luaD_shrinkstack = function luaD_shrinkstack(L) {\n  var inuse = stackinuse(L);\n  var goodsize = inuse + Math.floor(inuse / 8) + 2 * lstate.EXTRA_STACK;\n  if (goodsize > LUAI_MAXSTACK) goodsize = LUAI_MAXSTACK;\n  /* respect stack limit */\n\n  if (L.stack.length > LUAI_MAXSTACK)\n    /* had been handling stack overflow? */\n    lstate.luaE_freeCI(L);\n  /* free all CIs (list grew because of an error) */\n\n  /* if thread is currently not handling a stack overflow and its\n   good size is smaller than current size, shrink its stack */\n\n  if (inuse <= LUAI_MAXSTACK - lstate.EXTRA_STACK && goodsize < L.stack.length) luaD_reallocstack(L, goodsize);\n};\n\nvar luaD_inctop = function luaD_inctop(L) {\n  luaD_checkstack(L, 1);\n  L.stack[L.top++] = new lobject.TValue(LUA_TNIL, null);\n};\n/*\n** Prepares a function call: checks the stack, creates a new CallInfo\n** entry, fills in the relevant information, calls hook if needed.\n** If function is a JS function, does the call, too. (Otherwise, leave\n** the execution ('luaV_execute') to the caller, to allow stackless\n** calls.) Returns true iff function has been executed (JS function).\n*/\n\n\nvar luaD_precall = function luaD_precall(L, off, nresults) {\n  var func = L.stack[off];\n\n  switch (func.type) {\n    case LUA_TCCL:\n    case LUA_TLCF:\n      {\n        var f = func.type === LUA_TCCL ? func.value.f : func.value;\n        luaD_checkstack(L, LUA_MINSTACK);\n        var ci = lstate.luaE_extendCI(L);\n        ci.funcOff = off;\n        ci.nresults = nresults;\n        ci.func = func;\n        ci.top = L.top + LUA_MINSTACK;\n        lua_assert(ci.top <= L.stack_last);\n        ci.callstatus = 0;\n        if (L.hookmask & LUA_MASKCALL) luaD_hook(L, LUA_HOOKCALL, -1);\n        var n = f(L);\n        /* do the actual call */\n\n        if (typeof n !== \"number\" || n < 0 || (n | 0) !== n) throw Error(\"invalid return value from JS function (expected integer)\");\n        lapi.api_checknelems(L, n);\n        luaD_poscall(L, ci, L.top - n, n);\n        return true;\n      }\n\n    case LUA_TLCL:\n      {\n        var base;\n        var p = func.value.p;\n\n        var _n = L.top - off - 1;\n\n        var fsize = p.maxstacksize;\n        luaD_checkstack(L, fsize);\n\n        if (p.is_vararg) {\n          base = adjust_varargs(L, p, _n);\n        } else {\n          for (; _n < p.numparams; _n++) {\n            L.stack[L.top++] = new lobject.TValue(LUA_TNIL, null);\n          } // complete missing arguments\n\n\n          base = off + 1;\n        }\n\n        var _ci = lstate.luaE_extendCI(L);\n\n        _ci.funcOff = off;\n        _ci.nresults = nresults;\n        _ci.func = func;\n        _ci.l_base = base;\n        _ci.top = base + fsize;\n        adjust_top(L, _ci.top);\n        _ci.l_code = p.code;\n        _ci.l_savedpc = 0;\n        _ci.callstatus = lstate.CIST_LUA;\n        if (L.hookmask & LUA_MASKCALL) callhook(L, _ci);\n        return false;\n      }\n\n    default:\n      luaD_checkstack(L, 1);\n      tryfuncTM(L, off, func);\n      return luaD_precall(L, off, nresults);\n  }\n};\n\nvar luaD_poscall = function luaD_poscall(L, ci, firstResult, nres) {\n  var wanted = ci.nresults;\n\n  if (L.hookmask & (LUA_MASKRET | LUA_MASKLINE)) {\n    if (L.hookmask & LUA_MASKRET) luaD_hook(L, LUA_HOOKRET, -1);\n    L.oldpc = ci.previous.l_savedpc;\n    /* 'oldpc' for caller function */\n  }\n\n  var res = ci.funcOff;\n  L.ci = ci.previous;\n  L.ci.next = null;\n  return moveresults(L, firstResult, res, nres, wanted);\n};\n\nvar moveresults = function moveresults(L, firstResult, res, nres, wanted) {\n  switch (wanted) {\n    case 0:\n      break;\n\n    case 1:\n      {\n        if (nres === 0) L.stack[res].setnilvalue();else {\n          lobject.setobjs2s(L, res, firstResult);\n          /* move it to proper place */\n        }\n        break;\n      }\n\n    case LUA_MULTRET:\n      {\n        for (var i = 0; i < nres; i++) {\n          lobject.setobjs2s(L, res + i, firstResult + i);\n        }\n\n        for (var _i = L.top; _i >= res + nres; _i--) {\n          delete L.stack[_i];\n        }\n\n        L.top = res + nres;\n        return false;\n      }\n\n    default:\n      {\n        var _i2;\n\n        if (wanted <= nres) {\n          for (_i2 = 0; _i2 < wanted; _i2++) {\n            lobject.setobjs2s(L, res + _i2, firstResult + _i2);\n          }\n        } else {\n          for (_i2 = 0; _i2 < nres; _i2++) {\n            lobject.setobjs2s(L, res + _i2, firstResult + _i2);\n          }\n\n          for (; _i2 < wanted; _i2++) {\n            if (res + _i2 >= L.top) L.stack[res + _i2] = new lobject.TValue(LUA_TNIL, null);else L.stack[res + _i2].setnilvalue();\n          }\n        }\n\n        break;\n      }\n  }\n\n  var newtop = res + wanted;\n  /* top points after the last result */\n\n  for (var _i3 = L.top; _i3 >= newtop; _i3--) {\n    delete L.stack[_i3];\n  }\n\n  L.top = newtop;\n  return true;\n};\n/*\n** Call a hook for the given event. Make sure there is a hook to be\n** called. (Both 'L->hook' and 'L->hookmask', which triggers this\n** function, can be changed asynchronously by signals.)\n*/\n\n\nvar luaD_hook = function luaD_hook(L, event, line) {\n  var hook = L.hook;\n\n  if (hook && L.allowhook) {\n    /* make sure there is a hook */\n    var ci = L.ci;\n    var top = L.top;\n    var ci_top = ci.top;\n    var ar = new lua_Debug();\n    ar.event = event;\n    ar.currentline = line;\n    ar.i_ci = ci;\n    luaD_checkstack(L, LUA_MINSTACK);\n    /* ensure minimum stack size */\n\n    ci.top = L.top + LUA_MINSTACK;\n    lua_assert(ci.top <= L.stack_last);\n    L.allowhook = 0;\n    /* cannot call hooks inside a hook */\n\n    ci.callstatus |= lstate.CIST_HOOKED;\n    hook(L, ar);\n    lua_assert(!L.allowhook);\n    L.allowhook = 1;\n    ci.top = ci_top;\n    adjust_top(L, top);\n    ci.callstatus &= ~lstate.CIST_HOOKED;\n  }\n};\n\nvar callhook = function callhook(L, ci) {\n  var hook = LUA_HOOKCALL;\n  ci.l_savedpc++;\n  /* hooks assume 'pc' is already incremented */\n\n  if (ci.previous.callstatus & lstate.CIST_LUA && ci.previous.l_code[ci.previous.l_savedpc - 1].opcode == lopcodes.OpCodesI.OP_TAILCALL) {\n    ci.callstatus |= lstate.CIST_TAIL;\n    hook = LUA_HOOKTAILCALL;\n  }\n\n  luaD_hook(L, hook, -1);\n  ci.l_savedpc--;\n  /* correct 'pc' */\n};\n\nvar adjust_varargs = function adjust_varargs(L, p, actual) {\n  var nfixargs = p.numparams;\n  /* move fixed parameters to final position */\n\n  var fixed = L.top - actual;\n  /* first fixed argument */\n\n  var base = L.top;\n  /* final position of first argument */\n\n  var i;\n\n  for (i = 0; i < nfixargs && i < actual; i++) {\n    lobject.pushobj2s(L, L.stack[fixed + i]);\n    L.stack[fixed + i].setnilvalue();\n  }\n\n  for (; i < nfixargs; i++) {\n    L.stack[L.top++] = new lobject.TValue(LUA_TNIL, null);\n  }\n\n  return base;\n};\n\nvar tryfuncTM = function tryfuncTM(L, off, func) {\n  var tm = ltm.luaT_gettmbyobj(L, func, ltm.TMS.TM_CALL);\n  if (!tm.ttisfunction(tm)) ldebug.luaG_typeerror(L, func, to_luastring(\"call\", true));\n  /* Open a hole inside the stack at 'func' */\n\n  lobject.pushobj2s(L, L.stack[L.top - 1]);\n  /* push top of stack again */\n\n  for (var p = L.top - 2; p > off; p--) {\n    lobject.setobjs2s(L, p, p - 1);\n  }\n  /* move other items up one */\n\n\n  lobject.setobj2s(L, off, tm);\n  /* tag method is the new function to be called */\n};\n/*\n** Check appropriate error for stack overflow (\"regular\" overflow or\n** overflow while handling stack overflow). If 'nCalls' is larger than\n** LUAI_MAXCCALLS (which means it is handling a \"regular\" overflow) but\n** smaller than 9/8 of LUAI_MAXCCALLS, does not report an error (to\n** allow overflow handling to work)\n*/\n\n\nvar stackerror = function stackerror(L) {\n  if (L.nCcalls === LUAI_MAXCCALLS) ldebug.luaG_runerror(L, to_luastring(\"JS stack overflow\", true));else if (L.nCcalls >= LUAI_MAXCCALLS + (LUAI_MAXCCALLS >> 3)) luaD_throw(L, LUA_ERRERR);\n  /* error while handing stack error */\n};\n/*\n** Call a function (JS or Lua). The function to be called is at func.\n** The arguments are on the stack, right after the function.\n** When returns, all the results are on the stack, starting at the original\n** function position.\n*/\n\n\nvar luaD_call = function luaD_call(L, off, nResults) {\n  if (++L.nCcalls >= LUAI_MAXCCALLS) stackerror(L);\n  if (!luaD_precall(L, off, nResults)) lvm.luaV_execute(L);\n  L.nCcalls--;\n};\n\nvar luaD_throw = function luaD_throw(L, errcode) {\n  if (L.errorJmp) {\n    /* thread has an error handler? */\n    L.errorJmp.status = errcode;\n    /* set status */\n\n    throw L.errorJmp;\n  } else {\n    /* thread has no error handler */\n    var g = L.l_G;\n    L.status = errcode;\n    /* mark it as dead */\n\n    if (g.mainthread.errorJmp) {\n      /* main thread has a handler? */\n      g.mainthread.stack[g.mainthread.top++] = L.stack[L.top - 1];\n      /* copy error obj. */\n\n      luaD_throw(g.mainthread, errcode);\n      /* re-throw in main thread */\n    } else {\n      /* no handler at all; abort */\n      var panic = g.panic;\n\n      if (panic) {\n        /* panic function? */\n        seterrorobj(L, errcode, L.top);\n        /* assume EXTRA_STACK */\n\n        if (L.ci.top < L.top) L.ci.top = L.top;\n        /* pushing msg. can break this invariant */\n\n        panic(L);\n        /* call panic function (last chance to jump out) */\n      }\n\n      throw new Error(\"Aborted \".concat(errcode));\n    }\n  }\n};\n\nvar luaD_rawrunprotected = function luaD_rawrunprotected(L, f, ud) {\n  var oldnCcalls = L.nCcalls;\n  var lj = {\n    status: LUA_OK,\n    previous: L.errorJmp\n    /* chain new error handler */\n\n  };\n  L.errorJmp = lj;\n\n  try {\n    f(L, ud);\n  } catch (e) {\n    if (lj.status === LUA_OK) {\n      /* error was not thrown via luaD_throw, i.e. it is a JS error */\n\n      /* run user error handler (if it exists) */\n      var atnativeerror = L.l_G.atnativeerror;\n\n      if (atnativeerror) {\n        try {\n          lj.status = LUA_OK;\n          lapi.lua_pushcfunction(L, atnativeerror);\n          lapi.lua_pushlightuserdata(L, e);\n          luaD_callnoyield(L, L.top - 2, 1);\n          /* Now run the message handler (if it exists) */\n\n          /* copy of luaG_errormsg without the throw */\n\n          if (L.errfunc !== 0) {\n            /* is there an error handling function? */\n            var errfunc = L.errfunc;\n            lobject.pushobj2s(L, L.stack[L.top - 1]);\n            /* move argument */\n\n            lobject.setobjs2s(L, L.top - 2, errfunc);\n            /* push function */\n\n            luaD_callnoyield(L, L.top - 2, 1);\n          }\n\n          lj.status = LUA_ERRRUN;\n        } catch (e2) {\n          if (lj.status === LUA_OK) {\n            /* also failed */\n            lj.status = -1;\n          }\n        }\n      } else {\n        lj.status = -1;\n      }\n    }\n  }\n\n  L.errorJmp = lj.previous;\n  L.nCcalls = oldnCcalls;\n  return lj.status;\n};\n/*\n** Completes the execution of an interrupted C function, calling its\n** continuation function.\n*/\n\n\nvar finishCcall = function finishCcall(L, status) {\n  var ci = L.ci;\n  /* must have a continuation and must be able to call it */\n\n  lua_assert(ci.c_k !== null && L.nny === 0);\n  /* error status can only happen in a protected call */\n\n  lua_assert(ci.callstatus & lstate.CIST_YPCALL || status === LUA_YIELD);\n\n  if (ci.callstatus & lstate.CIST_YPCALL) {\n    /* was inside a pcall? */\n    ci.callstatus &= ~lstate.CIST_YPCALL;\n    /* continuation is also inside it */\n\n    L.errfunc = ci.c_old_errfunc;\n    /* with the same error function */\n  }\n  /* finish 'lua_callk'/'lua_pcall'; CIST_YPCALL and 'errfunc' already\n     handled */\n\n\n  if (ci.nresults === LUA_MULTRET && L.ci.top < L.top) L.ci.top = L.top;\n  var c_k = ci.c_k;\n  /* don't want to call as method */\n\n  var n = c_k(L, status, ci.c_ctx);\n  /* call continuation function */\n\n  lapi.api_checknelems(L, n);\n  luaD_poscall(L, ci, L.top - n, n);\n  /* finish 'luaD_precall' */\n};\n/*\n** Executes \"full continuation\" (everything in the stack) of a\n** previously interrupted coroutine until the stack is empty (or another\n** interruption long-jumps out of the loop). If the coroutine is\n** recovering from an error, 'ud' points to the error status, which must\n** be passed to the first continuation function (otherwise the default\n** status is LUA_YIELD).\n*/\n\n\nvar unroll = function unroll(L, ud) {\n  if (ud !== null)\n    /* error status? */\n    finishCcall(L, ud);\n  /* finish 'lua_pcallk' callee */\n\n  while (L.ci !== L.base_ci) {\n    /* something in the stack */\n    if (!(L.ci.callstatus & lstate.CIST_LUA))\n      /* C function? */\n      finishCcall(L, LUA_YIELD);\n      /* complete its execution */\n    else {\n        /* Lua function */\n        lvm.luaV_finishOp(L);\n        /* finish interrupted instruction */\n\n        lvm.luaV_execute(L);\n        /* execute down to higher C 'boundary' */\n      }\n  }\n};\n/*\n** Try to find a suspended protected call (a \"recover point\") for the\n** given thread.\n*/\n\n\nvar findpcall = function findpcall(L) {\n  for (var ci = L.ci; ci !== null; ci = ci.previous) {\n    /* search for a pcall */\n    if (ci.callstatus & lstate.CIST_YPCALL) return ci;\n  }\n\n  return null;\n  /* no pending pcall */\n};\n/*\n** Recovers from an error in a coroutine. Finds a recover point (if\n** there is one) and completes the execution of the interrupted\n** 'luaD_pcall'. If there is no recover point, returns zero.\n*/\n\n\nvar recover = function recover(L, status) {\n  var ci = findpcall(L);\n  if (ci === null) return 0;\n  /* no recovery point */\n\n  /* \"finish\" luaD_pcall */\n\n  var oldtop = ci.extra;\n  lfunc.luaF_close(L, oldtop);\n  seterrorobj(L, status, oldtop);\n  L.ci = ci;\n  L.allowhook = ci.callstatus & lstate.CIST_OAH;\n  /* restore original 'allowhook' */\n\n  L.nny = 0;\n  /* should be zero to be yieldable */\n\n  luaD_shrinkstack(L);\n  L.errfunc = ci.c_old_errfunc;\n  return 1;\n  /* continue running the coroutine */\n};\n/*\n** Signal an error in the call to 'lua_resume', not in the execution\n** of the coroutine itself. (Such errors should not be handled by any\n** coroutine error handler and should not kill the coroutine.)\n*/\n\n\nvar resume_error = function resume_error(L, msg, narg) {\n  var ts = luaS_newliteral(L, msg);\n\n  if (narg === 0) {\n    lobject.pushsvalue2s(L, ts);\n    api_check(L, L.top <= L.ci.top, \"stack overflow\");\n  } else {\n    /* remove args from the stack */\n    for (var i = 1; i < narg; i++) {\n      delete L.stack[--L.top];\n    }\n\n    lobject.setsvalue2s(L, L.top - 1, ts);\n    /* push error message */\n  }\n\n  return LUA_ERRRUN;\n};\n/*\n** Do the work for 'lua_resume' in protected mode. Most of the work\n** depends on the status of the coroutine: initial state, suspended\n** inside a hook, or regularly suspended (optionally with a continuation\n** function), plus erroneous cases: non-suspended coroutine or dead\n** coroutine.\n*/\n\n\nvar resume = function resume(L, n) {\n  var firstArg = L.top - n;\n  /* first argument */\n\n  var ci = L.ci;\n\n  if (L.status === LUA_OK) {\n    /* starting a coroutine? */\n    if (!luaD_precall(L, firstArg - 1, LUA_MULTRET))\n      /* Lua function? */\n      lvm.luaV_execute(L);\n    /* call it */\n  } else {\n    /* resuming from previous yield */\n    lua_assert(L.status === LUA_YIELD);\n    L.status = LUA_OK;\n    /* mark that it is running (again) */\n\n    ci.funcOff = ci.extra;\n    ci.func = L.stack[ci.funcOff];\n    if (ci.callstatus & lstate.CIST_LUA)\n      /* yielded inside a hook? */\n      lvm.luaV_execute(L);\n      /* just continue running Lua code */\n    else {\n        /* 'common' yield */\n        if (ci.c_k !== null) {\n          /* does it have a continuation function? */\n          n = ci.c_k(L, LUA_YIELD, ci.c_ctx);\n          /* call continuation */\n\n          lapi.api_checknelems(L, n);\n          firstArg = L.top - n;\n          /* yield results come from continuation */\n        }\n\n        luaD_poscall(L, ci, firstArg, n);\n        /* finish 'luaD_precall' */\n      }\n    unroll(L, null);\n    /* run continuation */\n  }\n};\n\nvar lua_resume = function lua_resume(L, from, nargs) {\n  var oldnny = L.nny;\n  /* save \"number of non-yieldable\" calls */\n\n  if (L.status === LUA_OK) {\n    /* may be starting a coroutine */\n    if (L.ci !== L.base_ci)\n      /* not in base level? */\n      return resume_error(L, \"cannot resume non-suspended coroutine\", nargs);\n  } else if (L.status !== LUA_YIELD) return resume_error(L, \"cannot resume dead coroutine\", nargs);\n\n  L.nCcalls = from ? from.nCcalls + 1 : 1;\n  if (L.nCcalls >= LUAI_MAXCCALLS) return resume_error(L, \"JS stack overflow\", nargs);\n  L.nny = 0;\n  /* allow yields */\n\n  lapi.api_checknelems(L, L.status === LUA_OK ? nargs + 1 : nargs);\n  var status = luaD_rawrunprotected(L, resume, nargs);\n  if (status === -1)\n    /* error calling 'lua_resume'? */\n    status = LUA_ERRRUN;else {\n    /* continue running after recoverable errors */\n    while (status > LUA_YIELD && recover(L, status)) {\n      /* unroll continuation */\n      status = luaD_rawrunprotected(L, unroll, status);\n    }\n\n    if (status > LUA_YIELD) {\n      /* unrecoverable error? */\n      L.status = status;\n      /* mark thread as 'dead' */\n\n      seterrorobj(L, status, L.top);\n      /* push error message */\n\n      L.ci.top = L.top;\n    } else lua_assert(status === L.status);\n    /* normal end or yield */\n\n  }\n  L.nny = oldnny;\n  /* restore 'nny' */\n\n  L.nCcalls--;\n  lua_assert(L.nCcalls === (from ? from.nCcalls : 0));\n  return status;\n};\n\nvar lua_isyieldable = function lua_isyieldable(L) {\n  return L.nny === 0;\n};\n\nvar lua_yieldk = function lua_yieldk(L, nresults, ctx, k) {\n  var ci = L.ci;\n  lapi.api_checknelems(L, nresults);\n\n  if (L.nny > 0) {\n    if (L !== L.l_G.mainthread) ldebug.luaG_runerror(L, to_luastring(\"attempt to yield across a JS-call boundary\", true));else ldebug.luaG_runerror(L, to_luastring(\"attempt to yield from outside a coroutine\", true));\n  }\n\n  L.status = LUA_YIELD;\n  ci.extra = ci.funcOff;\n  /* save current 'func' */\n\n  if (ci.callstatus & lstate.CIST_LUA)\n    /* inside a hook? */\n    api_check(L, k === null, \"hooks cannot continue after yielding\");else {\n    ci.c_k = k;\n    if (k !== null)\n      /* is there a continuation? */\n      ci.c_ctx = ctx;\n    /* save context */\n\n    ci.funcOff = L.top - nresults - 1;\n    /* protect stack below results */\n\n    ci.func = L.stack[ci.funcOff];\n    luaD_throw(L, LUA_YIELD);\n  }\n  lua_assert(ci.callstatus & lstate.CIST_HOOKED);\n  /* must be inside a hook */\n\n  return 0;\n  /* return to 'luaD_hook' */\n};\n\nvar lua_yield = function lua_yield(L, n) {\n  lua_yieldk(L, n, 0, null);\n};\n\nvar luaD_pcall = function luaD_pcall(L, func, u, old_top, ef) {\n  var old_ci = L.ci;\n  var old_allowhooks = L.allowhook;\n  var old_nny = L.nny;\n  var old_errfunc = L.errfunc;\n  L.errfunc = ef;\n  var status = luaD_rawrunprotected(L, func, u);\n\n  if (status !== LUA_OK) {\n    lfunc.luaF_close(L, old_top);\n    seterrorobj(L, status, old_top);\n    L.ci = old_ci;\n    L.allowhook = old_allowhooks;\n    L.nny = old_nny;\n    luaD_shrinkstack(L);\n  }\n\n  L.errfunc = old_errfunc;\n  return status;\n};\n/*\n** Similar to 'luaD_call', but does not allow yields during the call\n*/\n\n\nvar luaD_callnoyield = function luaD_callnoyield(L, off, nResults) {\n  L.nny++;\n  luaD_call(L, off, nResults);\n  L.nny--;\n};\n/*\n** Execute a protected parser.\n*/\n\n\nvar SParser = function SParser(z, name, mode) {\n  _classCallCheck(this, SParser);\n\n  /* data to 'f_parser' */\n  this.z = z;\n  this.buff = new MBuffer();\n  /* dynamic structure used by the scanner */\n\n  this.dyd = new lparser.Dyndata();\n  /* dynamic structures used by the parser */\n\n  this.mode = mode;\n  this.name = name;\n};\n\nvar checkmode = function checkmode(L, mode, x) {\n  if (mode && luastring_indexOf(mode, x[0]) === -1) {\n    lobject.luaO_pushfstring(L, to_luastring(\"attempt to load a %s chunk (mode is '%s')\"), x, mode);\n    luaD_throw(L, LUA_ERRSYNTAX);\n  }\n};\n\nvar f_parser = function f_parser(L, p) {\n  var cl;\n  var c = p.z.zgetc();\n  /* read first character */\n\n  if (c === LUA_SIGNATURE[0]) {\n    checkmode(L, p.mode, to_luastring(\"binary\", true));\n    cl = lundump.luaU_undump(L, p.z, p.name);\n  } else {\n    checkmode(L, p.mode, to_luastring(\"text\", true));\n    cl = lparser.luaY_parser(L, p.z, p.buff, p.dyd, p.name, c);\n  }\n\n  lua_assert(cl.nupvalues === cl.p.upvalues.length);\n  lfunc.luaF_initupvals(L, cl);\n};\n\nvar luaD_protectedparser = function luaD_protectedparser(L, z, name, mode) {\n  var p = new SParser(z, name, mode);\n  L.nny++;\n  /* cannot yield during parsing */\n\n  var status = luaD_pcall(L, f_parser, p, L.top, L.errfunc);\n  L.nny--;\n  return status;\n};\n\nmodule.exports.adjust_top = adjust_top;\nmodule.exports.luaD_call = luaD_call;\nmodule.exports.luaD_callnoyield = luaD_callnoyield;\nmodule.exports.luaD_checkstack = luaD_checkstack;\nmodule.exports.luaD_growstack = luaD_growstack;\nmodule.exports.luaD_hook = luaD_hook;\nmodule.exports.luaD_inctop = luaD_inctop;\nmodule.exports.luaD_pcall = luaD_pcall;\nmodule.exports.luaD_poscall = luaD_poscall;\nmodule.exports.luaD_precall = luaD_precall;\nmodule.exports.luaD_protectedparser = luaD_protectedparser;\nmodule.exports.luaD_rawrunprotected = luaD_rawrunprotected;\nmodule.exports.luaD_reallocstack = luaD_reallocstack;\nmodule.exports.luaD_throw = luaD_throw;\nmodule.exports.lua_isyieldable = lua_isyieldable;\nmodule.exports.lua_resume = lua_resume;\nmodule.exports.lua_yield = lua_yield;\nmodule.exports.lua_yieldk = lua_yieldk;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8\n")},function(module,exports,__webpack_require__){"use strict";eval('\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\n\nvar _require = __webpack_require__(1),\n    _require$constant_typ = _require.constant_types,\n    LUA_TBOOLEAN = _require$constant_typ.LUA_TBOOLEAN,\n    LUA_TCCL = _require$constant_typ.LUA_TCCL,\n    LUA_TLCF = _require$constant_typ.LUA_TLCF,\n    LUA_TLCL = _require$constant_typ.LUA_TLCL,\n    LUA_TLIGHTUSERDATA = _require$constant_typ.LUA_TLIGHTUSERDATA,\n    LUA_TLNGSTR = _require$constant_typ.LUA_TLNGSTR,\n    LUA_TNIL = _require$constant_typ.LUA_TNIL,\n    LUA_TNUMFLT = _require$constant_typ.LUA_TNUMFLT,\n    LUA_TNUMINT = _require$constant_typ.LUA_TNUMINT,\n    LUA_TSHRSTR = _require$constant_typ.LUA_TSHRSTR,\n    LUA_TTABLE = _require$constant_typ.LUA_TTABLE,\n    LUA_TTHREAD = _require$constant_typ.LUA_TTHREAD,\n    LUA_TUSERDATA = _require$constant_typ.LUA_TUSERDATA,\n    to_luastring = _require.to_luastring;\n\nvar _require2 = __webpack_require__(4),\n    lua_assert = _require2.lua_assert;\n\nvar ldebug = __webpack_require__(11);\n\nvar lobject = __webpack_require__(6);\n\nvar _require3 = __webpack_require__(10),\n    luaS_hashlongstr = _require3.luaS_hashlongstr,\n    TString = _require3.TString;\n\nvar lstate = __webpack_require__(12);\n/* used to prevent conflicts with lightuserdata keys */\n\n\nvar lightuserdata_hashes = new WeakMap();\n\nvar get_lightuserdata_hash = function get_lightuserdata_hash(v) {\n  var hash = lightuserdata_hashes.get(v);\n\n  if (!hash) {\n    /* Hash should be something unique that is a valid WeakMap key\n       so that it ends up in dead_weak when removed from a table */\n    hash = {};\n    lightuserdata_hashes.set(v, hash);\n  }\n\n  return hash;\n};\n\nvar table_hash = function table_hash(L, key) {\n  switch (key.type) {\n    case LUA_TNIL:\n      return ldebug.luaG_runerror(L, to_luastring("table index is nil", true));\n\n    case LUA_TNUMFLT:\n      if (isNaN(key.value)) return ldebug.luaG_runerror(L, to_luastring("table index is NaN", true));\n\n    /* fall through */\n\n    case LUA_TNUMINT:\n    /* takes advantage of floats and integers being same in JS */\n\n    case LUA_TBOOLEAN:\n    case LUA_TTABLE:\n    case LUA_TLCL:\n    case LUA_TLCF:\n    case LUA_TCCL:\n    case LUA_TUSERDATA:\n    case LUA_TTHREAD:\n      return key.value;\n\n    case LUA_TSHRSTR:\n    case LUA_TLNGSTR:\n      return luaS_hashlongstr(key.tsvalue());\n\n    case LUA_TLIGHTUSERDATA:\n      {\n        var v = key.value;\n\n        switch (_typeof(v)) {\n          case "string":\n            /* possible conflict with LUA_TSTRING.\n               prefix this string with "*" so they don\'t clash */\n            return "*" + v;\n\n          case "number":\n            /* possible conflict with LUA_TNUMBER.\n               turn into string and prefix with "#" to avoid clash with other strings */\n            return "#" + v;\n\n          case "boolean":\n            /* possible conflict with LUA_TBOOLEAN. use strings ?true and ?false instead */\n            return v ? "?true" : "?false";\n\n          case "function":\n            /* possible conflict with LUA_TLCF.\n               indirect via a weakmap */\n            return get_lightuserdata_hash(v);\n\n          case "object":\n            /* v could be a lua_State, CClosure, LClosure, Table or Userdata from this state as returned by lua_topointer */\n            if (v instanceof lstate.lua_State && v.l_G === L.l_G || v instanceof Table || v instanceof lobject.Udata || v instanceof lobject.LClosure || v instanceof lobject.CClosure) {\n              /* indirect via a weakmap */\n              return get_lightuserdata_hash(v);\n            }\n\n          /* fall through */\n\n          default:\n            return v;\n        }\n      }\n\n    default:\n      throw new Error("unknown key type: " + key.type);\n  }\n};\n\nvar Table = function Table(L) {\n  _classCallCheck(this, Table);\n\n  this.id = L.l_G.id_counter++;\n  this.strong = new Map();\n  this.dead_strong = new Map();\n  this.dead_weak = void 0;\n  /* initialised when needed */\n\n  this.f = void 0;\n  /* first entry */\n\n  this.l = void 0;\n  /* last entry */\n\n  this.metatable = null;\n  this.flags = ~0;\n};\n\nvar invalidateTMcache = function invalidateTMcache(t) {\n  t.flags = 0;\n};\n\nvar add = function add(t, hash, key, value) {\n  t.dead_strong.clear();\n  t.dead_weak = void 0;\n  var prev = null;\n  var entry = {\n    key: key,\n    value: value,\n    p: prev = t.l,\n    n: void 0\n  };\n  if (!t.f) t.f = entry;\n  if (prev) prev.n = entry;\n  t.strong.set(hash, entry);\n  t.l = entry;\n};\n\nvar is_valid_weakmap_key = function is_valid_weakmap_key(k) {\n  return _typeof(k) === \'object\' ? k !== null : typeof k === \'function\';\n};\n/* Move out of \'strong\' part and into \'dead\' part. */\n\n\nvar mark_dead = function mark_dead(t, hash) {\n  var e = t.strong.get(hash);\n\n  if (e) {\n    e.key.setdeadvalue();\n    e.value = void 0;\n    var next = e.n;\n    var prev = e.p;\n    e.p = void 0;\n    /* no need to know previous item any more */\n\n    if (prev) prev.n = next;\n    if (next) next.p = prev;\n    if (t.f === e) t.f = next;\n    if (t.l === e) t.l = prev;\n    t.strong.delete(hash);\n\n    if (is_valid_weakmap_key(hash)) {\n      if (!t.dead_weak) t.dead_weak = new WeakMap();\n      t.dead_weak.set(hash, e);\n    } else {\n      /* can\'t be used as key in weakmap */\n      t.dead_strong.set(hash, e);\n    }\n  }\n};\n\nvar luaH_new = function luaH_new(L) {\n  return new Table(L);\n};\n\nvar getgeneric = function getgeneric(t, hash) {\n  var v = t.strong.get(hash);\n  return v ? v.value : lobject.luaO_nilobject;\n};\n\nvar luaH_getint = function luaH_getint(t, key) {\n  lua_assert(typeof key == "number" && (key | 0) === key);\n  return getgeneric(t, key);\n};\n\nvar luaH_getstr = function luaH_getstr(t, key) {\n  lua_assert(key instanceof TString);\n  return getgeneric(t, luaS_hashlongstr(key));\n};\n\nvar luaH_get = function luaH_get(L, t, key) {\n  lua_assert(key instanceof lobject.TValue);\n  if (key.ttisnil() || key.ttisfloat() && isNaN(key.value)) return lobject.luaO_nilobject;\n  return getgeneric(t, table_hash(L, key));\n};\n\nvar luaH_setint = function luaH_setint(t, key, value) {\n  lua_assert(typeof key == "number" && (key | 0) === key && value instanceof lobject.TValue);\n  var hash = key;\n  /* table_hash known result */\n\n  if (value.ttisnil()) {\n    mark_dead(t, hash);\n    return;\n  }\n\n  var e = t.strong.get(hash);\n\n  if (e) {\n    var tv = e.value;\n    tv.setfrom(value);\n  } else {\n    var k = new lobject.TValue(LUA_TNUMINT, key);\n    var v = new lobject.TValue(value.type, value.value);\n    add(t, hash, k, v);\n  }\n};\n\nvar luaH_setfrom = function luaH_setfrom(L, t, key, value) {\n  lua_assert(key instanceof lobject.TValue);\n  var hash = table_hash(L, key);\n\n  if (value.ttisnil()) {\n    /* delete */\n    mark_dead(t, hash);\n    return;\n  }\n\n  var e = t.strong.get(hash);\n\n  if (e) {\n    e.value.setfrom(value);\n  } else {\n    var k;\n    var kv = key.value;\n\n    if (key.ttisfloat() && (kv | 0) === kv) {\n      /* does index fit in an integer? */\n\n      /* insert it as an integer */\n      k = new lobject.TValue(LUA_TNUMINT, kv);\n    } else {\n      k = new lobject.TValue(key.type, kv);\n    }\n\n    var v = new lobject.TValue(value.type, value.value);\n    add(t, hash, k, v);\n  }\n};\n/*\n** Try to find a boundary in table \'t\'. A \'boundary\' is an integer index\n** such that t[i] is non-nil and t[i+1] is nil (and 0 if t[1] is nil).\n*/\n\n\nvar luaH_getn = function luaH_getn(t) {\n  var i = 0;\n  var j = t.strong.size + 1;\n  /* use known size of Map to bound search */\n\n  /* now do a binary search between them */\n\n  while (j - i > 1) {\n    var m = Math.floor((i + j) / 2);\n    if (luaH_getint(t, m).ttisnil()) j = m;else i = m;\n  }\n\n  return i;\n};\n\nvar luaH_next = function luaH_next(L, table, keyI) {\n  var keyO = L.stack[keyI];\n  var entry;\n\n  if (keyO.type === LUA_TNIL) {\n    entry = table.f;\n    if (!entry) return false;\n  } else {\n    /* First find current key */\n    var hash = table_hash(L, keyO);\n    /* Look in main part of table */\n\n    entry = table.strong.get(hash);\n\n    if (entry) {\n      entry = entry.n;\n      if (!entry) return false;\n    } else {\n      /* Try dead keys */\n      entry = table.dead_weak && table.dead_weak.get(hash) || table.dead_strong.get(hash);\n      if (!entry)\n        /* item not in table */\n        return ldebug.luaG_runerror(L, to_luastring("invalid key to \'next\'"));\n      /* Iterate until either out of keys, or until finding a non-dead key */\n\n      do {\n        entry = entry.n;\n        if (!entry) return false;\n      } while (entry.key.ttisdeadkey());\n    }\n  }\n\n  lobject.setobj2s(L, keyI, entry.key);\n  lobject.setobj2s(L, keyI + 1, entry.value);\n  return true;\n};\n\nmodule.exports.invalidateTMcache = invalidateTMcache;\nmodule.exports.luaH_get = luaH_get;\nmodule.exports.luaH_getint = luaH_getint;\nmodule.exports.luaH_getn = luaH_getn;\nmodule.exports.luaH_getstr = luaH_getstr;\nmodule.exports.luaH_setfrom = luaH_setfrom;\nmodule.exports.luaH_setint = luaH_setint;\nmodule.exports.luaH_new = luaH_new;\nmodule.exports.luaH_next = luaH_next;\nmodule.exports.Table = Table;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar _require = __webpack_require__(1),\n    is_luastring = _require.is_luastring,\n    luastring_eq = _require.luastring_eq,\n    luastring_from = _require.luastring_from,\n    to_luastring = _require.to_luastring;\n\nvar _require2 = __webpack_require__(4),\n    lua_assert = _require2.lua_assert;\n\nvar TString =\n/*#__PURE__*/\nfunction () {\n  function TString(L, str) {\n    _classCallCheck(this, TString);\n\n    this.hash = null;\n    this.realstring = str;\n  }\n\n  _createClass(TString, [{\n    key: "getstr",\n    value: function getstr() {\n      return this.realstring;\n    }\n  }, {\n    key: "tsslen",\n    value: function tsslen() {\n      return this.realstring.length;\n    }\n  }]);\n\n  return TString;\n}();\n\nvar luaS_eqlngstr = function luaS_eqlngstr(a, b) {\n  lua_assert(a instanceof TString);\n  lua_assert(b instanceof TString);\n  return a == b || luastring_eq(a.realstring, b.realstring);\n};\n/* converts strings (arrays) to a consistent map key\n   make sure this doesn\'t conflict with any of the anti-collision strategies in ltable */\n\n\nvar luaS_hash = function luaS_hash(str) {\n  lua_assert(is_luastring(str));\n  var len = str.length;\n  var s = "|";\n\n  for (var i = 0; i < len; i++) {\n    s += str[i].toString(16);\n  }\n\n  return s;\n};\n\nvar luaS_hashlongstr = function luaS_hashlongstr(ts) {\n  lua_assert(ts instanceof TString);\n\n  if (ts.hash === null) {\n    ts.hash = luaS_hash(ts.getstr());\n  }\n\n  return ts.hash;\n};\n/* variant that takes ownership of array */\n\n\nvar luaS_bless = function luaS_bless(L, str) {\n  lua_assert(str instanceof Uint8Array);\n  return new TString(L, str);\n};\n/* makes a copy */\n\n\nvar luaS_new = function luaS_new(L, str) {\n  return luaS_bless(L, luastring_from(str));\n};\n/* takes a js string */\n\n\nvar luaS_newliteral = function luaS_newliteral(L, str) {\n  return luaS_bless(L, to_luastring(str));\n};\n\nmodule.exports.luaS_eqlngstr = luaS_eqlngstr;\nmodule.exports.luaS_hash = luaS_hash;\nmodule.exports.luaS_hashlongstr = luaS_hashlongstr;\nmodule.exports.luaS_bless = luaS_bless;\nmodule.exports.luaS_new = luaS_new;\nmodule.exports.luaS_newliteral = luaS_newliteral;\nmodule.exports.TString = TString;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mZW5nYXJpLy4vbm9kZV9tb2R1bGVzL2Zlbmdhcmkvc3JjL2xzdHJpbmcuanM/YzEwMCJdLCJuYW1lcyI6WyJyZXF1aXJlIiwiaXNfbHVhc3RyaW5nIiwibHVhc3RyaW5nX2VxIiwibHVhc3RyaW5nX2Zyb20iLCJ0b19sdWFzdHJpbmciLCJsdWFfYXNzZXJ0IiwiVFN0cmluZyIsIkwiLCJzdHIiLCJoYXNoIiwicmVhbHN0cmluZyIsImxlbmd0aCIsImx1YVNfZXFsbmdzdHIiLCJhIiwiYiIsImx1YVNfaGFzaCIsImxlbiIsInMiLCJpIiwidG9TdHJpbmciLCJsdWFTX2hhc2hsb25nc3RyIiwidHMiLCJnZXRzdHIiLCJsdWFTX2JsZXNzIiwiVWludDhBcnJheSIsImx1YVNfbmV3IiwibHVhU19uZXdsaXRlcmFsIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQWE7Ozs7Ozs7O2VBT1RBLG1CQUFPLENBQUMsQ0FBRCxDO0lBSlBDLFksWUFBQUEsWTtJQUNBQyxZLFlBQUFBLFk7SUFDQUMsYyxZQUFBQSxjO0lBQ0FDLFksWUFBQUEsWTs7Z0JBRW1CSixtQkFBTyxDQUFDLENBQUQsQztJQUF0QkssVSxhQUFBQSxVOztJQUVGQyxPOzs7QUFFRixtQkFBWUMsQ0FBWixFQUFlQyxHQUFmLEVBQW9CO0FBQUE7O0FBQ2hCLFNBQUtDLElBQUwsR0FBWSxJQUFaO0FBQ0EsU0FBS0MsVUFBTCxHQUFrQkYsR0FBbEI7QUFDSDs7Ozs2QkFFUTtBQUNMLGFBQU8sS0FBS0UsVUFBWjtBQUNIOzs7NkJBRVE7QUFDTCxhQUFPLEtBQUtBLFVBQUwsQ0FBZ0JDLE1BQXZCO0FBQ0g7Ozs7OztBQUlMLElBQU1DLGFBQWEsR0FBRyxTQUFoQkEsYUFBZ0IsQ0FBU0MsQ0FBVCxFQUFZQyxDQUFaLEVBQWU7QUFDakNULFlBQVUsQ0FBQ1EsQ0FBQyxZQUFZUCxPQUFkLENBQVY7QUFDQUQsWUFBVSxDQUFDUyxDQUFDLFlBQVlSLE9BQWQsQ0FBVjtBQUNBLFNBQU9PLENBQUMsSUFBSUMsQ0FBTCxJQUFVWixZQUFZLENBQUNXLENBQUMsQ0FBQ0gsVUFBSCxFQUFlSSxDQUFDLENBQUNKLFVBQWpCLENBQTdCO0FBQ0gsQ0FKRDtBQU1BOzs7O0FBRUEsSUFBTUssU0FBUyxHQUFHLFNBQVpBLFNBQVksQ0FBU1AsR0FBVCxFQUFjO0FBQzVCSCxZQUFVLENBQUNKLFlBQVksQ0FBQ08sR0FBRCxDQUFiLENBQVY7QUFDQSxNQUFJUSxHQUFHLEdBQUdSLEdBQUcsQ0FBQ0csTUFBZDtBQUNBLE1BQUlNLENBQUMsR0FBRyxHQUFSOztBQUNBLE9BQUssSUFBSUMsQ0FBQyxHQUFDLENBQVgsRUFBY0EsQ0FBQyxHQUFDRixHQUFoQixFQUFxQkUsQ0FBQyxFQUF0QjtBQUNJRCxLQUFDLElBQUlULEdBQUcsQ0FBQ1UsQ0FBRCxDQUFILENBQU9DLFFBQVAsQ0FBZ0IsRUFBaEIsQ0FBTDtBQURKOztBQUVBLFNBQU9GLENBQVA7QUFDSCxDQVBEOztBQVNBLElBQU1HLGdCQUFnQixHQUFHLFNBQW5CQSxnQkFBbUIsQ0FBU0MsRUFBVCxFQUFhO0FBQ2xDaEIsWUFBVSxDQUFDZ0IsRUFBRSxZQUFZZixPQUFmLENBQVY7O0FBQ0EsTUFBR2UsRUFBRSxDQUFDWixJQUFILEtBQVksSUFBZixFQUFxQjtBQUNqQlksTUFBRSxDQUFDWixJQUFILEdBQVVNLFNBQVMsQ0FBQ00sRUFBRSxDQUFDQyxNQUFILEVBQUQsQ0FBbkI7QUFDSDs7QUFDRCxTQUFPRCxFQUFFLENBQUNaLElBQVY7QUFDSCxDQU5EO0FBUUE7OztBQUNBLElBQU1jLFVBQVUsR0FBRyxTQUFiQSxVQUFhLENBQVNoQixDQUFULEVBQVlDLEdBQVosRUFBaUI7QUFDaENILFlBQVUsQ0FBQ0csR0FBRyxZQUFZZ0IsVUFBaEIsQ0FBVjtBQUNBLFNBQU8sSUFBSWxCLE9BQUosQ0FBWUMsQ0FBWixFQUFlQyxHQUFmLENBQVA7QUFDSCxDQUhEO0FBS0E7OztBQUNBLElBQU1pQixRQUFRLEdBQUcsU0FBWEEsUUFBVyxDQUFTbEIsQ0FBVCxFQUFZQyxHQUFaLEVBQWlCO0FBQzlCLFNBQU9lLFVBQVUsQ0FBQ2hCLENBQUQsRUFBSUosY0FBYyxDQUFDSyxHQUFELENBQWxCLENBQWpCO0FBQ0gsQ0FGRDtBQUlBOzs7QUFDQSxJQUFNa0IsZUFBZSxHQUFHLFNBQWxCQSxlQUFrQixDQUFTbkIsQ0FBVCxFQUFZQyxHQUFaLEVBQWlCO0FBQ3JDLFNBQU9lLFVBQVUsQ0FBQ2hCLENBQUQsRUFBSUgsWUFBWSxDQUFDSSxHQUFELENBQWhCLENBQWpCO0FBQ0gsQ0FGRDs7QUFJQW1CLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlaEIsYUFBZixHQUFrQ0EsYUFBbEM7QUFDQWUsTUFBTSxDQUFDQyxPQUFQLENBQWViLFNBQWYsR0FBa0NBLFNBQWxDO0FBQ0FZLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlUixnQkFBZixHQUFrQ0EsZ0JBQWxDO0FBQ0FPLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlTCxVQUFmLEdBQWtDQSxVQUFsQztBQUNBSSxNQUFNLENBQUNDLE9BQVAsQ0FBZUgsUUFBZixHQUFrQ0EsUUFBbEM7QUFDQUUsTUFBTSxDQUFDQyxPQUFQLENBQWVGLGVBQWYsR0FBa0NBLGVBQWxDO0FBQ0FDLE1BQU0sQ0FBQ0MsT0FBUCxDQUFldEIsT0FBZixHQUFrQ0EsT0FBbEMiLCJmaWxlIjoiMTAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3Qge1xuICAgIGlzX2x1YXN0cmluZyxcbiAgICBsdWFzdHJpbmdfZXEsXG4gICAgbHVhc3RyaW5nX2Zyb20sXG4gICAgdG9fbHVhc3RyaW5nXG59ID0gcmVxdWlyZSgnLi9kZWZzLmpzJyk7XG5jb25zdCB7IGx1YV9hc3NlcnQgfSA9IHJlcXVpcmUoXCIuL2xsaW1pdHMuanNcIik7XG5cbmNsYXNzIFRTdHJpbmcge1xuXG4gICAgY29uc3RydWN0b3IoTCwgc3RyKSB7XG4gICAgICAgIHRoaXMuaGFzaCA9IG51bGw7XG4gICAgICAgIHRoaXMucmVhbHN0cmluZyA9IHN0cjtcbiAgICB9XG5cbiAgICBnZXRzdHIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlYWxzdHJpbmc7XG4gICAgfVxuXG4gICAgdHNzbGVuKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZWFsc3RyaW5nLmxlbmd0aDtcbiAgICB9XG5cbn1cblxuY29uc3QgbHVhU19lcWxuZ3N0ciA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICBsdWFfYXNzZXJ0KGEgaW5zdGFuY2VvZiBUU3RyaW5nKTtcbiAgICBsdWFfYXNzZXJ0KGIgaW5zdGFuY2VvZiBUU3RyaW5nKTtcbiAgICByZXR1cm4gYSA9PSBiIHx8IGx1YXN0cmluZ19lcShhLnJlYWxzdHJpbmcsIGIucmVhbHN0cmluZyk7XG59O1xuXG4vKiBjb252ZXJ0cyBzdHJpbmdzIChhcnJheXMpIHRvIGEgY29uc2lzdGVudCBtYXAga2V5XG4gICBtYWtlIHN1cmUgdGhpcyBkb2Vzbid0IGNvbmZsaWN0IHdpdGggYW55IG9mIHRoZSBhbnRpLWNvbGxpc2lvbiBzdHJhdGVnaWVzIGluIGx0YWJsZSAqL1xuY29uc3QgbHVhU19oYXNoID0gZnVuY3Rpb24oc3RyKSB7XG4gICAgbHVhX2Fzc2VydChpc19sdWFzdHJpbmcoc3RyKSk7XG4gICAgbGV0IGxlbiA9IHN0ci5sZW5ndGg7XG4gICAgbGV0IHMgPSBcInxcIjtcbiAgICBmb3IgKGxldCBpPTA7IGk8bGVuOyBpKyspXG4gICAgICAgIHMgKz0gc3RyW2ldLnRvU3RyaW5nKDE2KTtcbiAgICByZXR1cm4gcztcbn07XG5cbmNvbnN0IGx1YVNfaGFzaGxvbmdzdHIgPSBmdW5jdGlvbih0cykge1xuICAgIGx1YV9hc3NlcnQodHMgaW5zdGFuY2VvZiBUU3RyaW5nKTtcbiAgICBpZih0cy5oYXNoID09PSBudWxsKSB7XG4gICAgICAgIHRzLmhhc2ggPSBsdWFTX2hhc2godHMuZ2V0c3RyKCkpO1xuICAgIH1cbiAgICByZXR1cm4gdHMuaGFzaDtcbn07XG5cbi8qIHZhcmlhbnQgdGhhdCB0YWtlcyBvd25lcnNoaXAgb2YgYXJyYXkgKi9cbmNvbnN0IGx1YVNfYmxlc3MgPSBmdW5jdGlvbihMLCBzdHIpIHtcbiAgICBsdWFfYXNzZXJ0KHN0ciBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpO1xuICAgIHJldHVybiBuZXcgVFN0cmluZyhMLCBzdHIpO1xufTtcblxuLyogbWFrZXMgYSBjb3B5ICovXG5jb25zdCBsdWFTX25ldyA9IGZ1bmN0aW9uKEwsIHN0cikge1xuICAgIHJldHVybiBsdWFTX2JsZXNzKEwsIGx1YXN0cmluZ19mcm9tKHN0cikpO1xufTtcblxuLyogdGFrZXMgYSBqcyBzdHJpbmcgKi9cbmNvbnN0IGx1YVNfbmV3bGl0ZXJhbCA9IGZ1bmN0aW9uKEwsIHN0cikge1xuICAgIHJldHVybiBsdWFTX2JsZXNzKEwsIHRvX2x1YXN0cmluZyhzdHIpKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzLmx1YVNfZXFsbmdzdHIgICAgPSBsdWFTX2VxbG5nc3RyO1xubW9kdWxlLmV4cG9ydHMubHVhU19oYXNoICAgICAgICA9IGx1YVNfaGFzaDtcbm1vZHVsZS5leHBvcnRzLmx1YVNfaGFzaGxvbmdzdHIgPSBsdWFTX2hhc2hsb25nc3RyO1xubW9kdWxlLmV4cG9ydHMubHVhU19ibGVzcyAgICAgICA9IGx1YVNfYmxlc3M7XG5tb2R1bGUuZXhwb3J0cy5sdWFTX25ldyAgICAgICAgID0gbHVhU19uZXc7XG5tb2R1bGUuZXhwb3J0cy5sdWFTX25ld2xpdGVyYWwgID0gbHVhU19uZXdsaXRlcmFsO1xubW9kdWxlLmV4cG9ydHMuVFN0cmluZyAgICAgICAgICA9IFRTdHJpbmc7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///10\n')},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _require = __webpack_require__(1),\n    LUA_HOOKCOUNT = _require.LUA_HOOKCOUNT,\n    LUA_HOOKLINE = _require.LUA_HOOKLINE,\n    LUA_MASKCOUNT = _require.LUA_MASKCOUNT,\n    LUA_MASKLINE = _require.LUA_MASKLINE,\n    _require$constant_typ = _require.constant_types,\n    LUA_TBOOLEAN = _require$constant_typ.LUA_TBOOLEAN,\n    LUA_TNIL = _require$constant_typ.LUA_TNIL,\n    LUA_TTABLE = _require$constant_typ.LUA_TTABLE,\n    _require$thread_statu = _require.thread_status,\n    LUA_ERRRUN = _require$thread_statu.LUA_ERRRUN,\n    LUA_YIELD = _require$thread_statu.LUA_YIELD,\n    from_userstring = _require.from_userstring,\n    luastring_eq = _require.luastring_eq,\n    luastring_indexOf = _require.luastring_indexOf,\n    to_luastring = _require.to_luastring;\n\nvar _require2 = __webpack_require__(4),\n    api_check = _require2.api_check,\n    lua_assert = _require2.lua_assert;\n\nvar _require3 = __webpack_require__(3),\n    LUA_IDSIZE = _require3.LUA_IDSIZE;\n\nvar lapi = __webpack_require__(19);\n\nvar ldo = __webpack_require__(8);\n\nvar lfunc = __webpack_require__(13);\n\nvar llex = __webpack_require__(21);\n\nvar lobject = __webpack_require__(6);\n\nvar lopcodes = __webpack_require__(16);\n\nvar lstate = __webpack_require__(12);\n\nvar ltable = __webpack_require__(9);\n\nvar ltm = __webpack_require__(14);\n\nvar lvm = __webpack_require__(15);\n\nvar currentpc = function currentpc(ci) {\n  lua_assert(ci.callstatus & lstate.CIST_LUA);\n  return ci.l_savedpc - 1;\n};\n\nvar currentline = function currentline(ci) {\n  return ci.func.value.p.lineinfo.length !== 0 ? ci.func.value.p.lineinfo[currentpc(ci)] : -1;\n};\n/*\n** If function yielded, its 'func' can be in the 'extra' field. The\n** next function restores 'func' to its correct value for debugging\n** purposes. (It exchanges 'func' and 'extra'; so, when called again,\n** after debugging, it also \"re-restores\" ** 'func' to its altered value.\n*/\n\n\nvar swapextra = function swapextra(L) {\n  if (L.status === LUA_YIELD) {\n    var ci = L.ci;\n    /* get function that yielded */\n\n    var temp = ci.funcOff;\n    /* exchange its 'func' and 'extra' values */\n\n    ci.func = L.stack[ci.extra];\n    ci.funcOff = ci.extra;\n    ci.extra = temp;\n  }\n};\n\nvar lua_sethook = function lua_sethook(L, func, mask, count) {\n  if (func === null || mask === 0) {\n    /* turn off hooks? */\n    mask = 0;\n    func = null;\n  }\n\n  if (L.ci.callstatus & lstate.CIST_LUA) L.oldpc = L.ci.l_savedpc;\n  L.hook = func;\n  L.basehookcount = count;\n  L.hookcount = L.basehookcount;\n  L.hookmask = mask;\n};\n\nvar lua_gethook = function lua_gethook(L) {\n  return L.hook;\n};\n\nvar lua_gethookmask = function lua_gethookmask(L) {\n  return L.hookmask;\n};\n\nvar lua_gethookcount = function lua_gethookcount(L) {\n  return L.basehookcount;\n};\n\nvar lua_getstack = function lua_getstack(L, level, ar) {\n  var ci;\n  var status;\n  if (level < 0) return 0;\n  /* invalid (negative) level */\n\n  for (ci = L.ci; level > 0 && ci !== L.base_ci; ci = ci.previous) {\n    level--;\n  }\n\n  if (level === 0 && ci !== L.base_ci) {\n    /* level found? */\n    status = 1;\n    ar.i_ci = ci;\n  } else status = 0;\n  /* no such level */\n\n\n  return status;\n};\n\nvar upvalname = function upvalname(p, uv) {\n  lua_assert(uv < p.upvalues.length);\n  var s = p.upvalues[uv].name;\n  if (s === null) return to_luastring(\"?\", true);\n  return s.getstr();\n};\n\nvar findvararg = function findvararg(ci, n) {\n  var nparams = ci.func.value.p.numparams;\n  if (n >= ci.l_base - ci.funcOff - nparams) return null;\n  /* no such vararg */\n  else {\n      return {\n        pos: ci.funcOff + nparams + n,\n        name: to_luastring(\"(*vararg)\", true)\n        /* generic name for any vararg */\n\n      };\n    }\n};\n\nvar findlocal = function findlocal(L, ci, n) {\n  var base,\n      name = null;\n\n  if (ci.callstatus & lstate.CIST_LUA) {\n    if (n < 0)\n      /* access to vararg values? */\n      return findvararg(ci, -n);else {\n      base = ci.l_base;\n      name = lfunc.luaF_getlocalname(ci.func.value.p, n, currentpc(ci));\n    }\n  } else base = ci.funcOff + 1;\n\n  if (name === null) {\n    /* no 'standard' name? */\n    var limit = ci === L.ci ? L.top : ci.next.funcOff;\n    if (limit - base >= n && n > 0)\n      /* is 'n' inside 'ci' stack? */\n      name = to_luastring(\"(*temporary)\", true);\n      /* generic name for any valid slot */\n    else return null;\n    /* no name */\n  }\n\n  return {\n    pos: base + (n - 1),\n    name: name\n  };\n};\n\nvar lua_getlocal = function lua_getlocal(L, ar, n) {\n  var name;\n  swapextra(L);\n\n  if (ar === null) {\n    /* information about non-active function? */\n    if (!L.stack[L.top - 1].ttisLclosure())\n      /* not a Lua function? */\n      name = null;else\n      /* consider live variables at function start (parameters) */\n      name = lfunc.luaF_getlocalname(L.stack[L.top - 1].value.p, n, 0);\n  } else {\n    /* active function; get information through 'ar' */\n    var local = findlocal(L, ar.i_ci, n);\n\n    if (local) {\n      name = local.name;\n      lobject.pushobj2s(L, L.stack[local.pos]);\n      api_check(L, L.top <= L.ci.top, \"stack overflow\");\n    } else {\n      name = null;\n    }\n  }\n\n  swapextra(L);\n  return name;\n};\n\nvar lua_setlocal = function lua_setlocal(L, ar, n) {\n  var name;\n  swapextra(L);\n  var local = findlocal(L, ar.i_ci, n);\n\n  if (local) {\n    name = local.name;\n    lobject.setobjs2s(L, local.pos, L.top - 1);\n    delete L.stack[--L.top];\n    /* pop value */\n  } else {\n    name = null;\n  }\n\n  swapextra(L);\n  return name;\n};\n\nvar funcinfo = function funcinfo(ar, cl) {\n  if (cl === null || cl instanceof lobject.CClosure) {\n    ar.source = to_luastring(\"=[JS]\", true);\n    ar.linedefined = -1;\n    ar.lastlinedefined = -1;\n    ar.what = to_luastring(\"J\", true);\n  } else {\n    var p = cl.p;\n    ar.source = p.source ? p.source.getstr() : to_luastring(\"=?\", true);\n    ar.linedefined = p.linedefined;\n    ar.lastlinedefined = p.lastlinedefined;\n    ar.what = ar.linedefined === 0 ? to_luastring(\"main\", true) : to_luastring(\"Lua\", true);\n  }\n\n  ar.short_src = lobject.luaO_chunkid(ar.source, LUA_IDSIZE);\n};\n\nvar collectvalidlines = function collectvalidlines(L, f) {\n  if (f === null || f instanceof lobject.CClosure) {\n    L.stack[L.top] = new lobject.TValue(LUA_TNIL, null);\n    lapi.api_incr_top(L);\n  } else {\n    var lineinfo = f.p.lineinfo;\n    var t = ltable.luaH_new(L);\n    L.stack[L.top] = new lobject.TValue(LUA_TTABLE, t);\n    lapi.api_incr_top(L);\n    var v = new lobject.TValue(LUA_TBOOLEAN, true);\n\n    for (var i = 0; i < lineinfo.length; i++) {\n      ltable.luaH_setint(t, lineinfo[i], v);\n    }\n  }\n};\n\nvar getfuncname = function getfuncname(L, ci) {\n  var r = {\n    name: null,\n    funcname: null\n  };\n  if (ci === null) return null;else if (ci.callstatus & lstate.CIST_FIN) {\n    /* is this a finalizer? */\n    r.name = to_luastring(\"__gc\", true);\n    r.funcname = to_luastring(\"metamethod\", true);\n    /* report it as such */\n\n    return r;\n  }\n  /* calling function is a known Lua function? */\n  else if (!(ci.callstatus & lstate.CIST_TAIL) && ci.previous.callstatus & lstate.CIST_LUA) return funcnamefromcode(L, ci.previous);else return null;\n  /* no way to find a name */\n};\n\nvar auxgetinfo = function auxgetinfo(L, what, ar, f, ci) {\n  var status = 1;\n\n  for (; what.length > 0; what = what.subarray(1)) {\n    switch (what[0]) {\n      case 83\n      /* ('S').charCodeAt(0) */\n      :\n        {\n          funcinfo(ar, f);\n          break;\n        }\n\n      case 108\n      /* ('l').charCodeAt(0) */\n      :\n        {\n          ar.currentline = ci && ci.callstatus & lstate.CIST_LUA ? currentline(ci) : -1;\n          break;\n        }\n\n      case 117\n      /* ('u').charCodeAt(0) */\n      :\n        {\n          ar.nups = f === null ? 0 : f.nupvalues;\n\n          if (f === null || f instanceof lobject.CClosure) {\n            ar.isvararg = true;\n            ar.nparams = 0;\n          } else {\n            ar.isvararg = f.p.is_vararg;\n            ar.nparams = f.p.numparams;\n          }\n\n          break;\n        }\n\n      case 116\n      /* ('t').charCodeAt(0) */\n      :\n        {\n          ar.istailcall = ci ? ci.callstatus & lstate.CIST_TAIL : 0;\n          break;\n        }\n\n      case 110\n      /* ('n').charCodeAt(0) */\n      :\n        {\n          var r = getfuncname(L, ci);\n\n          if (r === null) {\n            ar.namewhat = to_luastring(\"\", true);\n            ar.name = null;\n          } else {\n            ar.namewhat = r.funcname;\n            ar.name = r.name;\n          }\n\n          break;\n        }\n\n      case 76\n      /* ('L').charCodeAt(0) */\n      :\n      case 102\n      /* ('f').charCodeAt(0) */\n      :\n        /* handled by lua_getinfo */\n        break;\n\n      default:\n        status = 0;\n\n      /* invalid option */\n    }\n  }\n\n  return status;\n};\n\nvar lua_getinfo = function lua_getinfo(L, what, ar) {\n  what = from_userstring(what);\n  var status, cl, ci, func;\n  swapextra(L);\n\n  if (what[0] === 62\n  /* ('>').charCodeAt(0) */\n  ) {\n      ci = null;\n      func = L.stack[L.top - 1];\n      api_check(L, func.ttisfunction(), \"function expected\");\n      what = what.subarray(1);\n      /* skip the '>' */\n\n      L.top--;\n      /* pop function */\n    } else {\n    ci = ar.i_ci;\n    func = ci.func;\n    lua_assert(ci.func.ttisfunction());\n  }\n\n  cl = func.ttisclosure() ? func.value : null;\n  status = auxgetinfo(L, what, ar, cl, ci);\n\n  if (luastring_indexOf(what, 102\n  /* ('f').charCodeAt(0) */\n  ) >= 0) {\n    lobject.pushobj2s(L, func);\n    api_check(L, L.top <= L.ci.top, \"stack overflow\");\n  }\n\n  swapextra(L);\n  if (luastring_indexOf(what, 76\n  /* ('L').charCodeAt(0) */\n  ) >= 0) collectvalidlines(L, cl);\n  return status;\n};\n\nvar kname = function kname(p, pc, c) {\n  var r = {\n    name: null,\n    funcname: null\n  };\n\n  if (lopcodes.ISK(c)) {\n    /* is 'c' a constant? */\n    var kvalue = p.k[lopcodes.INDEXK(c)];\n\n    if (kvalue.ttisstring()) {\n      /* literal constant? */\n      r.name = kvalue.svalue();\n      /* it is its own name */\n\n      return r;\n    }\n    /* else no reasonable name found */\n\n  } else {\n    /* 'c' is a register */\n    var what = getobjname(p, pc, c);\n    /* search for 'c' */\n\n    if (what && what.funcname[0] === 99\n    /* ('c').charCodeAt(0) */\n    ) {\n        /* found a constant name? */\n        return what;\n        /* 'name' already filled */\n      }\n    /* else no reasonable name found */\n\n  }\n\n  r.name = to_luastring(\"?\", true);\n  return r;\n  /* no reasonable name found */\n};\n\nvar filterpc = function filterpc(pc, jmptarget) {\n  if (pc < jmptarget)\n    /* is code conditional (inside a jump)? */\n    return -1;\n    /* cannot know who sets that register */\n  else return pc;\n  /* current position sets that register */\n};\n/*\n** try to find last instruction before 'lastpc' that modified register 'reg'\n*/\n\n\nvar findsetreg = function findsetreg(p, lastpc, reg) {\n  var setreg = -1;\n  /* keep last instruction that changed 'reg' */\n\n  var jmptarget = 0;\n  /* any code before this address is conditional */\n\n  var OCi = lopcodes.OpCodesI;\n\n  for (var pc = 0; pc < lastpc; pc++) {\n    var i = p.code[pc];\n    var a = i.A;\n\n    switch (i.opcode) {\n      case OCi.OP_LOADNIL:\n        {\n          var b = i.B;\n          if (a <= reg && reg <= a + b)\n            /* set registers from 'a' to 'a+b' */\n            setreg = filterpc(pc, jmptarget);\n          break;\n        }\n\n      case OCi.OP_TFORCALL:\n        {\n          if (reg >= a + 2)\n            /* affect all regs above its base */\n            setreg = filterpc(pc, jmptarget);\n          break;\n        }\n\n      case OCi.OP_CALL:\n      case OCi.OP_TAILCALL:\n        {\n          if (reg >= a)\n            /* affect all registers above base */\n            setreg = filterpc(pc, jmptarget);\n          break;\n        }\n\n      case OCi.OP_JMP:\n        {\n          var _b = i.sBx;\n          var dest = pc + 1 + _b;\n          /* jump is forward and do not skip 'lastpc'? */\n\n          if (pc < dest && dest <= lastpc) {\n            if (dest > jmptarget) jmptarget = dest;\n            /* update 'jmptarget' */\n          }\n\n          break;\n        }\n\n      default:\n        if (lopcodes.testAMode(i.opcode) && reg === a) setreg = filterpc(pc, jmptarget);\n        break;\n    }\n  }\n\n  return setreg;\n};\n\nvar getobjname = function getobjname(p, lastpc, reg) {\n  var r = {\n    name: lfunc.luaF_getlocalname(p, reg + 1, lastpc),\n    funcname: null\n  };\n\n  if (r.name) {\n    /* is a local? */\n    r.funcname = to_luastring(\"local\", true);\n    return r;\n  }\n  /* else try symbolic execution */\n\n\n  var pc = findsetreg(p, lastpc, reg);\n  var OCi = lopcodes.OpCodesI;\n\n  if (pc !== -1) {\n    /* could find instruction? */\n    var i = p.code[pc];\n\n    switch (i.opcode) {\n      case OCi.OP_MOVE:\n        {\n          var b = i.B;\n          /* move from 'b' to 'a' */\n\n          if (b < i.A) return getobjname(p, pc, b);\n          /* get name for 'b' */\n\n          break;\n        }\n\n      case OCi.OP_GETTABUP:\n      case OCi.OP_GETTABLE:\n        {\n          var k = i.C;\n          /* key index */\n\n          var t = i.B;\n          /* table index */\n\n          var vn = i.opcode === OCi.OP_GETTABLE ? lfunc.luaF_getlocalname(p, t + 1, pc) : upvalname(p, t);\n          r.name = kname(p, pc, k).name;\n          r.funcname = vn && luastring_eq(vn, llex.LUA_ENV) ? to_luastring(\"global\", true) : to_luastring(\"field\", true);\n          return r;\n        }\n\n      case OCi.OP_GETUPVAL:\n        {\n          r.name = upvalname(p, i.B);\n          r.funcname = to_luastring(\"upvalue\", true);\n          return r;\n        }\n\n      case OCi.OP_LOADK:\n      case OCi.OP_LOADKX:\n        {\n          var _b2 = i.opcode === OCi.OP_LOADK ? i.Bx : p.code[pc + 1].Ax;\n\n          if (p.k[_b2].ttisstring()) {\n            r.name = p.k[_b2].svalue();\n            r.funcname = to_luastring(\"constant\", true);\n            return r;\n          }\n\n          break;\n        }\n\n      case OCi.OP_SELF:\n        {\n          var _k = i.C;\n          r.name = kname(p, pc, _k).name;\n          r.funcname = to_luastring(\"method\", true);\n          return r;\n        }\n\n      default:\n        break;\n    }\n  }\n\n  return null;\n};\n/*\n** Try to find a name for a function based on the code that called it.\n** (Only works when function was called by a Lua function.)\n** Returns what the name is (e.g., \"for iterator\", \"method\",\n** \"metamethod\") and sets '*name' to point to the name.\n*/\n\n\nvar funcnamefromcode = function funcnamefromcode(L, ci) {\n  var r = {\n    name: null,\n    funcname: null\n  };\n  var tm = 0;\n  /* (initial value avoids warnings) */\n\n  var p = ci.func.value.p;\n  /* calling function */\n\n  var pc = currentpc(ci);\n  /* calling instruction index */\n\n  var i = p.code[pc];\n  /* calling instruction */\n\n  var OCi = lopcodes.OpCodesI;\n\n  if (ci.callstatus & lstate.CIST_HOOKED) {\n    r.name = to_luastring(\"?\", true);\n    r.funcname = to_luastring(\"hook\", true);\n    return r;\n  }\n\n  switch (i.opcode) {\n    case OCi.OP_CALL:\n    case OCi.OP_TAILCALL:\n      return getobjname(p, pc, i.A);\n\n    /* get function name */\n\n    case OCi.OP_TFORCALL:\n      r.name = to_luastring(\"for iterator\", true);\n      r.funcname = to_luastring(\"for iterator\", true);\n      return r;\n\n    /* other instructions can do calls through metamethods */\n\n    case OCi.OP_SELF:\n    case OCi.OP_GETTABUP:\n    case OCi.OP_GETTABLE:\n      tm = ltm.TMS.TM_INDEX;\n      break;\n\n    case OCi.OP_SETTABUP:\n    case OCi.OP_SETTABLE:\n      tm = ltm.TMS.TM_NEWINDEX;\n      break;\n\n    case OCi.OP_ADD:\n      tm = ltm.TMS.TM_ADD;\n      break;\n\n    case OCi.OP_SUB:\n      tm = ltm.TMS.TM_SUB;\n      break;\n\n    case OCi.OP_MUL:\n      tm = ltm.TMS.TM_MUL;\n      break;\n\n    case OCi.OP_MOD:\n      tm = ltm.TMS.TM_MOD;\n      break;\n\n    case OCi.OP_POW:\n      tm = ltm.TMS.TM_POW;\n      break;\n\n    case OCi.OP_DIV:\n      tm = ltm.TMS.TM_DIV;\n      break;\n\n    case OCi.OP_IDIV:\n      tm = ltm.TMS.TM_IDIV;\n      break;\n\n    case OCi.OP_BAND:\n      tm = ltm.TMS.TM_BAND;\n      break;\n\n    case OCi.OP_BOR:\n      tm = ltm.TMS.TM_BOR;\n      break;\n\n    case OCi.OP_BXOR:\n      tm = ltm.TMS.TM_BXOR;\n      break;\n\n    case OCi.OP_SHL:\n      tm = ltm.TMS.TM_SHL;\n      break;\n\n    case OCi.OP_SHR:\n      tm = ltm.TMS.TM_SHR;\n      break;\n\n    case OCi.OP_UNM:\n      tm = ltm.TMS.TM_UNM;\n      break;\n\n    case OCi.OP_BNOT:\n      tm = ltm.TMS.TM_BNOT;\n      break;\n\n    case OCi.OP_LEN:\n      tm = ltm.TMS.TM_LEN;\n      break;\n\n    case OCi.OP_CONCAT:\n      tm = ltm.TMS.TM_CONCAT;\n      break;\n\n    case OCi.OP_EQ:\n      tm = ltm.TMS.TM_EQ;\n      break;\n\n    case OCi.OP_LT:\n      tm = ltm.TMS.TM_LT;\n      break;\n\n    case OCi.OP_LE:\n      tm = ltm.TMS.TM_LE;\n      break;\n\n    default:\n      return null;\n\n    /* cannot find a reasonable name */\n  }\n\n  r.name = L.l_G.tmname[tm].getstr();\n  r.funcname = to_luastring(\"metamethod\", true);\n  return r;\n};\n\nvar isinstack = function isinstack(L, ci, o) {\n  for (var i = ci.l_base; i < ci.top; i++) {\n    if (L.stack[i] === o) return i;\n  }\n\n  return false;\n};\n/*\n** Checks whether value 'o' came from an upvalue. (That can only happen\n** with instructions OP_GETTABUP/OP_SETTABUP, which operate directly on\n** upvalues.)\n*/\n\n\nvar getupvalname = function getupvalname(L, ci, o) {\n  var c = ci.func.value;\n\n  for (var i = 0; i < c.nupvalues; i++) {\n    if (c.upvals[i] === o) {\n      return {\n        name: upvalname(c.p, i),\n        funcname: to_luastring('upvalue', true)\n      };\n    }\n  }\n\n  return null;\n};\n\nvar varinfo = function varinfo(L, o) {\n  var ci = L.ci;\n  var kind = null;\n\n  if (ci.callstatus & lstate.CIST_LUA) {\n    kind = getupvalname(L, ci, o);\n    /* check whether 'o' is an upvalue */\n\n    var stkid = isinstack(L, ci, o);\n    if (!kind && stkid)\n      /* no? try a register */\n      kind = getobjname(ci.func.value.p, currentpc(ci), stkid - ci.l_base);\n  }\n\n  return kind ? lobject.luaO_pushfstring(L, to_luastring(\" (%s '%s')\", true), kind.funcname, kind.name) : to_luastring(\"\", true);\n};\n\nvar luaG_typeerror = function luaG_typeerror(L, o, op) {\n  var t = ltm.luaT_objtypename(L, o);\n  luaG_runerror(L, to_luastring(\"attempt to %s a %s value%s\", true), op, t, varinfo(L, o));\n};\n\nvar luaG_concaterror = function luaG_concaterror(L, p1, p2) {\n  if (p1.ttisstring() || lvm.cvt2str(p1)) p1 = p2;\n  luaG_typeerror(L, p1, to_luastring('concatenate', true));\n};\n/*\n** Error when both values are convertible to numbers, but not to integers\n*/\n\n\nvar luaG_opinterror = function luaG_opinterror(L, p1, p2, msg) {\n  if (lvm.tonumber(p1) === false) p2 = p1;\n  luaG_typeerror(L, p2, msg);\n};\n\nvar luaG_ordererror = function luaG_ordererror(L, p1, p2) {\n  var t1 = ltm.luaT_objtypename(L, p1);\n  var t2 = ltm.luaT_objtypename(L, p2);\n  if (luastring_eq(t1, t2)) luaG_runerror(L, to_luastring(\"attempt to compare two %s values\", true), t1);else luaG_runerror(L, to_luastring(\"attempt to compare %s with %s\", true), t1, t2);\n};\n/* add src:line information to 'msg' */\n\n\nvar luaG_addinfo = function luaG_addinfo(L, msg, src, line) {\n  var buff;\n  if (src) buff = lobject.luaO_chunkid(src.getstr(), LUA_IDSIZE);else buff = to_luastring(\"?\", true);\n  return lobject.luaO_pushfstring(L, to_luastring(\"%s:%d: %s\", true), buff, line, msg);\n};\n\nvar luaG_runerror = function luaG_runerror(L, fmt) {\n  var ci = L.ci;\n\n  for (var _len = arguments.length, argp = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    argp[_key - 2] = arguments[_key];\n  }\n\n  var msg = lobject.luaO_pushvfstring(L, fmt, argp);\n  if (ci.callstatus & lstate.CIST_LUA)\n    /* if Lua function, add source:line information */\n    luaG_addinfo(L, msg, ci.func.value.p.source, currentline(ci));\n  luaG_errormsg(L);\n};\n\nvar luaG_errormsg = function luaG_errormsg(L) {\n  if (L.errfunc !== 0) {\n    /* is there an error handling function? */\n    var errfunc = L.errfunc;\n    lobject.pushobj2s(L, L.stack[L.top - 1]);\n    /* move argument */\n\n    lobject.setobjs2s(L, L.top - 2, errfunc);\n    /* push function */\n\n    ldo.luaD_callnoyield(L, L.top - 2, 1);\n  }\n\n  ldo.luaD_throw(L, LUA_ERRRUN);\n};\n/*\n** Error when both values are convertible to numbers, but not to integers\n*/\n\n\nvar luaG_tointerror = function luaG_tointerror(L, p1, p2) {\n  var temp = lvm.tointeger(p1);\n  if (temp === false) p2 = p1;\n  luaG_runerror(L, to_luastring(\"number%s has no integer representation\", true), varinfo(L, p2));\n};\n\nvar luaG_traceexec = function luaG_traceexec(L) {\n  var ci = L.ci;\n  var mask = L.hookmask;\n  var counthook = --L.hookcount === 0 && mask & LUA_MASKCOUNT;\n  if (counthook) L.hookcount = L.basehookcount;\n  /* reset count */\n  else if (!(mask & LUA_MASKLINE)) return;\n  /* no line hook and count != 0; nothing to be done */\n\n  if (ci.callstatus & lstate.CIST_HOOKYIELD) {\n    /* called hook last time? */\n    ci.callstatus &= ~lstate.CIST_HOOKYIELD;\n    /* erase mark */\n\n    return;\n    /* do not call hook again (VM yielded, so it did not move) */\n  }\n\n  if (counthook) ldo.luaD_hook(L, LUA_HOOKCOUNT, -1);\n  /* call count hook */\n\n  if (mask & LUA_MASKLINE) {\n    var p = ci.func.value.p;\n    var npc = ci.l_savedpc - 1; // pcRel(ci.u.l.savedpc, p);\n\n    var newline = p.lineinfo.length !== 0 ? p.lineinfo[npc] : -1;\n    if (npc === 0 ||\n    /* call linehook when enter a new function, */\n    ci.l_savedpc <= L.oldpc ||\n    /* when jump back (loop), or when */\n    newline !== (p.lineinfo.length !== 0 ? p.lineinfo[L.oldpc - 1] : -1))\n      /* enter a new line */\n      ldo.luaD_hook(L, LUA_HOOKLINE, newline);\n    /* call line hook */\n  }\n\n  L.oldpc = ci.l_savedpc;\n\n  if (L.status === LUA_YIELD) {\n    /* did hook yield? */\n    if (counthook) L.hookcount = 1;\n    /* undo decrement to zero */\n\n    ci.l_savedpc--;\n    /* undo increment (resume will increment it again) */\n\n    ci.callstatus |= lstate.CIST_HOOKYIELD;\n    /* mark that it yielded */\n\n    ci.funcOff = L.top - 1;\n    /* protect stack below results */\n\n    ci.func = L.stack[ci.funcOff];\n    ldo.luaD_throw(L, LUA_YIELD);\n  }\n};\n\nmodule.exports.luaG_addinfo = luaG_addinfo;\nmodule.exports.luaG_concaterror = luaG_concaterror;\nmodule.exports.luaG_errormsg = luaG_errormsg;\nmodule.exports.luaG_opinterror = luaG_opinterror;\nmodule.exports.luaG_ordererror = luaG_ordererror;\nmodule.exports.luaG_runerror = luaG_runerror;\nmodule.exports.luaG_tointerror = luaG_tointerror;\nmodule.exports.luaG_traceexec = luaG_traceexec;\nmodule.exports.luaG_typeerror = luaG_typeerror;\nmodule.exports.lua_gethook = lua_gethook;\nmodule.exports.lua_gethookcount = lua_gethookcount;\nmodule.exports.lua_gethookmask = lua_gethookmask;\nmodule.exports.lua_getinfo = lua_getinfo;\nmodule.exports.lua_getlocal = lua_getlocal;\nmodule.exports.lua_getstack = lua_getstack;\nmodule.exports.lua_sethook = lua_sethook;\nmodule.exports.lua_setlocal = lua_setlocal;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///11\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar _require = __webpack_require__(1),\n    LUA_MINSTACK = _require.LUA_MINSTACK,\n    LUA_RIDX_GLOBALS = _require.LUA_RIDX_GLOBALS,\n    LUA_RIDX_MAINTHREAD = _require.LUA_RIDX_MAINTHREAD,\n    _require$constant_typ = _require.constant_types,\n    LUA_NUMTAGS = _require$constant_typ.LUA_NUMTAGS,\n    LUA_TNIL = _require$constant_typ.LUA_TNIL,\n    LUA_TTABLE = _require$constant_typ.LUA_TTABLE,\n    LUA_TTHREAD = _require$constant_typ.LUA_TTHREAD,\n    LUA_OK = _require.thread_status.LUA_OK;\n\nvar lobject = __webpack_require__(6);\n\nvar ldo = __webpack_require__(8);\n\nvar lapi = __webpack_require__(19);\n\nvar ltable = __webpack_require__(9);\n\nvar ltm = __webpack_require__(14);\n\nvar EXTRA_STACK = 5;\nvar BASIC_STACK_SIZE = 2 * LUA_MINSTACK;\n\nvar CallInfo = function CallInfo() {\n  _classCallCheck(this, CallInfo);\n\n  this.func = null;\n  this.funcOff = NaN;\n  this.top = NaN;\n  this.previous = null;\n  this.next = null;\n  /* only for Lua functions */\n\n  this.l_base = NaN;\n  /* base for this function */\n\n  this.l_code = null;\n  /* reference to this.func.p.code */\n\n  this.l_savedpc = NaN;\n  /* offset into l_code */\n\n  /* only for JS functions */\n\n  this.c_k = null;\n  /* continuation in case of yields */\n\n  this.c_old_errfunc = null;\n  this.c_ctx = null;\n  /* context info. in case of yields */\n\n  this.nresults = NaN;\n  this.callstatus = NaN;\n};\n\nvar lua_State = function lua_State(g) {\n  _classCallCheck(this, lua_State);\n\n  this.id = g.id_counter++;\n  this.base_ci = new CallInfo();\n  /* CallInfo for first level (C calling Lua) */\n\n  this.top = NaN;\n  /* first free slot in the stack */\n\n  this.stack_last = NaN;\n  /* last free slot in the stack */\n\n  this.oldpc = NaN;\n  /* last pc traced */\n\n  /* preinit_thread */\n\n  this.l_G = g;\n  this.stack = null;\n  this.ci = null;\n  this.errorJmp = null;\n  this.nCcalls = 0;\n  this.hook = null;\n  this.hookmask = 0;\n  this.basehookcount = 0;\n  this.allowhook = 1;\n  this.hookcount = this.basehookcount;\n  this.nny = 1;\n  this.status = LUA_OK;\n  this.errfunc = 0;\n};\n\nvar global_State = function global_State() {\n  _classCallCheck(this, global_State);\n\n  this.id_counter = 1;\n  /* used to give objects unique ids */\n\n  this.ids = new WeakMap();\n  this.mainthread = null;\n  this.l_registry = new lobject.TValue(LUA_TNIL, null);\n  this.panic = null;\n  this.atnativeerror = null;\n  this.version = null;\n  this.tmname = new Array(ltm.TMS.TM_N);\n  this.mt = new Array(LUA_NUMTAGS);\n};\n\nvar luaE_extendCI = function luaE_extendCI(L) {\n  var ci = new CallInfo();\n  L.ci.next = ci;\n  ci.previous = L.ci;\n  ci.next = null;\n  L.ci = ci;\n  return ci;\n};\n\nvar luaE_freeCI = function luaE_freeCI(L) {\n  var ci = L.ci;\n  ci.next = null;\n};\n\nvar stack_init = function stack_init(L1, L) {\n  L1.stack = new Array(BASIC_STACK_SIZE);\n  L1.top = 0;\n  L1.stack_last = BASIC_STACK_SIZE - EXTRA_STACK;\n  /* initialize first ci */\n\n  var ci = L1.base_ci;\n  ci.next = ci.previous = null;\n  ci.callstatus = 0;\n  ci.funcOff = L1.top;\n  ci.func = L1.stack[L1.top];\n  L1.stack[L1.top++] = new lobject.TValue(LUA_TNIL, null);\n  ci.top = L1.top + LUA_MINSTACK;\n  L1.ci = ci;\n};\n\nvar freestack = function freestack(L) {\n  L.ci = L.base_ci;\n  luaE_freeCI(L);\n  L.stack = null;\n};\n/*\n** Create registry table and its predefined values\n*/\n\n\nvar init_registry = function init_registry(L, g) {\n  var registry = ltable.luaH_new(L);\n  g.l_registry.sethvalue(registry);\n  ltable.luaH_setint(registry, LUA_RIDX_MAINTHREAD, new lobject.TValue(LUA_TTHREAD, L));\n  ltable.luaH_setint(registry, LUA_RIDX_GLOBALS, new lobject.TValue(LUA_TTABLE, ltable.luaH_new(L)));\n};\n/*\n** open parts of the state that may cause memory-allocation errors.\n** ('g->version' !== NULL flags that the state was completely build)\n*/\n\n\nvar f_luaopen = function f_luaopen(L) {\n  var g = L.l_G;\n  stack_init(L, L);\n  init_registry(L, g);\n  ltm.luaT_init(L);\n  g.version = lapi.lua_version(null);\n};\n\nvar lua_newthread = function lua_newthread(L) {\n  var g = L.l_G;\n  var L1 = new lua_State(g);\n  L.stack[L.top] = new lobject.TValue(LUA_TTHREAD, L1);\n  lapi.api_incr_top(L);\n  L1.hookmask = L.hookmask;\n  L1.basehookcount = L.basehookcount;\n  L1.hook = L.hook;\n  L1.hookcount = L1.basehookcount;\n  stack_init(L1, L);\n  return L1;\n};\n\nvar luaE_freethread = function luaE_freethread(L, L1) {\n  freestack(L1);\n};\n\nvar lua_newstate = function lua_newstate() {\n  var g = new global_State();\n  var L = new lua_State(g);\n  g.mainthread = L;\n\n  if (ldo.luaD_rawrunprotected(L, f_luaopen, null) !== LUA_OK) {\n    L = null;\n  }\n\n  return L;\n};\n\nvar close_state = function close_state(L) {\n  freestack(L);\n};\n\nvar lua_close = function lua_close(L) {\n  L = L.l_G.mainthread;\n  /* only the main thread can be closed */\n\n  close_state(L);\n};\n\nmodule.exports.lua_State = lua_State;\nmodule.exports.CallInfo = CallInfo;\nmodule.exports.CIST_OAH = 1 << 0;\n/* original value of 'allowhook' */\n\nmodule.exports.CIST_LUA = 1 << 1;\n/* call is running a Lua function */\n\nmodule.exports.CIST_HOOKED = 1 << 2;\n/* call is running a debug hook */\n\nmodule.exports.CIST_FRESH = 1 << 3;\n/* call is running on a fresh invocation of luaV_execute */\n\nmodule.exports.CIST_YPCALL = 1 << 4;\n/* call is a yieldable protected call */\n\nmodule.exports.CIST_TAIL = 1 << 5;\n/* call was tail called */\n\nmodule.exports.CIST_HOOKYIELD = 1 << 6;\n/* last hook called yielded */\n\nmodule.exports.CIST_LEQ = 1 << 7;\n/* using __lt for __le */\n\nmodule.exports.CIST_FIN = 1 << 8;\n/* call is running a finalizer */\n\nmodule.exports.EXTRA_STACK = EXTRA_STACK;\nmodule.exports.lua_close = lua_close;\nmodule.exports.lua_newstate = lua_newstate;\nmodule.exports.lua_newthread = lua_newthread;\nmodule.exports.luaE_extendCI = luaE_extendCI;\nmodule.exports.luaE_freeCI = luaE_freeCI;\nmodule.exports.luaE_freethread = luaE_freethread;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///12\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar _require = __webpack_require__(1),\n    LUA_TNIL = _require.constant_types.LUA_TNIL;\n\nvar lobject = __webpack_require__(6);\n\nvar Proto = function Proto(L) {\n  _classCallCheck(this, Proto);\n\n  this.id = L.l_G.id_counter++;\n  this.k = []; // constants used by the function\n\n  this.p = []; // functions defined inside the function\n\n  this.code = []; // opcodes\n\n  this.cache = null; // last-created closure with this prototype\n\n  this.lineinfo = []; // map from opcodes to source lines (debug information)\n\n  this.upvalues = []; // upvalue information\n\n  this.numparams = 0; // number of fixed parameters\n\n  this.is_vararg = false;\n  this.maxstacksize = 0; // number of registers needed by this function\n\n  this.locvars = []; // information about local variables (debug information)\n\n  this.linedefined = 0; // debug information\n\n  this.lastlinedefined = 0; // debug information\n\n  this.source = null; // used for debug information\n};\n\nvar luaF_newLclosure = function luaF_newLclosure(L, n) {\n  return new lobject.LClosure(L, n);\n};\n\nvar luaF_findupval = function luaF_findupval(L, level) {\n  return L.stack[level];\n};\n\nvar luaF_close = function luaF_close(L, level) {\n  /* Create new TValues on stack;\n   * any closures will keep referencing old TValues */\n  for (var i = level; i < L.top; i++) {\n    var old = L.stack[i];\n    L.stack[i] = new lobject.TValue(old.type, old.value);\n  }\n};\n/*\n** fill a closure with new upvalues\n*/\n\n\nvar luaF_initupvals = function luaF_initupvals(L, cl) {\n  for (var i = 0; i < cl.nupvalues; i++) {\n    cl.upvals[i] = new lobject.TValue(LUA_TNIL, null);\n  }\n};\n/*\n** Look for n-th local variable at line 'line' in function 'func'.\n** Returns null if not found.\n*/\n\n\nvar luaF_getlocalname = function luaF_getlocalname(f, local_number, pc) {\n  for (var i = 0; i < f.locvars.length && f.locvars[i].startpc <= pc; i++) {\n    if (pc < f.locvars[i].endpc) {\n      /* is variable active? */\n      local_number--;\n      if (local_number === 0) return f.locvars[i].varname.getstr();\n    }\n  }\n\n  return null;\n  /* not found */\n};\n\nmodule.exports.MAXUPVAL = 255;\nmodule.exports.Proto = Proto;\nmodule.exports.luaF_findupval = luaF_findupval;\nmodule.exports.luaF_close = luaF_close;\nmodule.exports.luaF_getlocalname = luaF_getlocalname;\nmodule.exports.luaF_initupvals = luaF_initupvals;\nmodule.exports.luaF_newLclosure = luaF_newLclosure;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mZW5nYXJpLy4vbm9kZV9tb2R1bGVzL2Zlbmdhcmkvc3JjL2xmdW5jLmpzPzY5MzkiXSwibmFtZXMiOlsicmVxdWlyZSIsIkxVQV9UTklMIiwiY29uc3RhbnRfdHlwZXMiLCJsb2JqZWN0IiwiUHJvdG8iLCJMIiwiaWQiLCJsX0ciLCJpZF9jb3VudGVyIiwiayIsInAiLCJjb2RlIiwiY2FjaGUiLCJsaW5laW5mbyIsInVwdmFsdWVzIiwibnVtcGFyYW1zIiwiaXNfdmFyYXJnIiwibWF4c3RhY2tzaXplIiwibG9jdmFycyIsImxpbmVkZWZpbmVkIiwibGFzdGxpbmVkZWZpbmVkIiwic291cmNlIiwibHVhRl9uZXdMY2xvc3VyZSIsIm4iLCJMQ2xvc3VyZSIsImx1YUZfZmluZHVwdmFsIiwibGV2ZWwiLCJzdGFjayIsImx1YUZfY2xvc2UiLCJpIiwidG9wIiwib2xkIiwiVFZhbHVlIiwidHlwZSIsInZhbHVlIiwibHVhRl9pbml0dXB2YWxzIiwiY2wiLCJudXB2YWx1ZXMiLCJ1cHZhbHMiLCJsdWFGX2dldGxvY2FsbmFtZSIsImYiLCJsb2NhbF9udW1iZXIiLCJwYyIsImxlbmd0aCIsInN0YXJ0cGMiLCJlbmRwYyIsInZhcm5hbWUiLCJnZXRzdHIiLCJtb2R1bGUiLCJleHBvcnRzIiwiTUFYVVBWQUwiXSwibWFwcGluZ3MiOiJBQUFhOzs7O2VBRTRCQSxtQkFBTyxDQUFDLENBQUQsQztJQUF0QkMsUSxZQUFsQkMsYyxDQUFrQkQsUTs7QUFDMUIsSUFBTUUsT0FBTyxHQUFHSCxtQkFBTyxDQUFDLENBQUQsQ0FBdkI7O0lBRU1JLEssR0FDRixlQUFZQyxDQUFaLEVBQWU7QUFBQTs7QUFDWCxPQUFLQyxFQUFMLEdBQVVELENBQUMsQ0FBQ0UsR0FBRixDQUFNQyxVQUFOLEVBQVY7QUFDQSxPQUFLQyxDQUFMLEdBQVMsRUFBVCxDQUZXLENBRWU7O0FBQzFCLE9BQUtDLENBQUwsR0FBUyxFQUFULENBSFcsQ0FHZTs7QUFDMUIsT0FBS0MsSUFBTCxHQUFZLEVBQVosQ0FKVyxDQUllOztBQUMxQixPQUFLQyxLQUFMLEdBQWEsSUFBYixDQUxXLENBS2U7O0FBQzFCLE9BQUtDLFFBQUwsR0FBZ0IsRUFBaEIsQ0FOVyxDQU1lOztBQUMxQixPQUFLQyxRQUFMLEdBQWdCLEVBQWhCLENBUFcsQ0FPZTs7QUFDMUIsT0FBS0MsU0FBTCxHQUFpQixDQUFqQixDQVJXLENBUWU7O0FBQzFCLE9BQUtDLFNBQUwsR0FBaUIsS0FBakI7QUFDQSxPQUFLQyxZQUFMLEdBQW9CLENBQXBCLENBVlcsQ0FVZTs7QUFDMUIsT0FBS0MsT0FBTCxHQUFlLEVBQWYsQ0FYVyxDQVdlOztBQUMxQixPQUFLQyxXQUFMLEdBQW1CLENBQW5CLENBWlcsQ0FZZTs7QUFDMUIsT0FBS0MsZUFBTCxHQUF1QixDQUF2QixDQWJXLENBYWU7O0FBQzFCLE9BQUtDLE1BQUwsR0FBYyxJQUFkLENBZFcsQ0FjZTtBQUM3QixDOztBQUdMLElBQU1DLGdCQUFnQixHQUFHLFNBQW5CQSxnQkFBbUIsQ0FBU2pCLENBQVQsRUFBWWtCLENBQVosRUFBZTtBQUNwQyxTQUFPLElBQUlwQixPQUFPLENBQUNxQixRQUFaLENBQXFCbkIsQ0FBckIsRUFBd0JrQixDQUF4QixDQUFQO0FBQ0gsQ0FGRDs7QUFLQSxJQUFNRSxjQUFjLEdBQUcsU0FBakJBLGNBQWlCLENBQVNwQixDQUFULEVBQVlxQixLQUFaLEVBQW1CO0FBQ3RDLFNBQU9yQixDQUFDLENBQUNzQixLQUFGLENBQVFELEtBQVIsQ0FBUDtBQUNILENBRkQ7O0FBSUEsSUFBTUUsVUFBVSxHQUFHLFNBQWJBLFVBQWEsQ0FBU3ZCLENBQVQsRUFBWXFCLEtBQVosRUFBbUI7QUFDbEM7O0FBRUEsT0FBSyxJQUFJRyxDQUFDLEdBQUNILEtBQVgsRUFBa0JHLENBQUMsR0FBQ3hCLENBQUMsQ0FBQ3lCLEdBQXRCLEVBQTJCRCxDQUFDLEVBQTVCLEVBQWdDO0FBQzVCLFFBQUlFLEdBQUcsR0FBRzFCLENBQUMsQ0FBQ3NCLEtBQUYsQ0FBUUUsQ0FBUixDQUFWO0FBQ0F4QixLQUFDLENBQUNzQixLQUFGLENBQVFFLENBQVIsSUFBYSxJQUFJMUIsT0FBTyxDQUFDNkIsTUFBWixDQUFtQkQsR0FBRyxDQUFDRSxJQUF2QixFQUE2QkYsR0FBRyxDQUFDRyxLQUFqQyxDQUFiO0FBQ0g7QUFDSixDQVBEO0FBU0E7Ozs7O0FBR0EsSUFBTUMsZUFBZSxHQUFHLFNBQWxCQSxlQUFrQixDQUFTOUIsQ0FBVCxFQUFZK0IsRUFBWixFQUFnQjtBQUNwQyxPQUFLLElBQUlQLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdPLEVBQUUsQ0FBQ0MsU0FBdkIsRUFBa0NSLENBQUMsRUFBbkM7QUFDSU8sTUFBRSxDQUFDRSxNQUFILENBQVVULENBQVYsSUFBZSxJQUFJMUIsT0FBTyxDQUFDNkIsTUFBWixDQUFtQi9CLFFBQW5CLEVBQTZCLElBQTdCLENBQWY7QUFESjtBQUVILENBSEQ7QUFLQTs7Ozs7O0FBSUEsSUFBTXNDLGlCQUFpQixHQUFHLFNBQXBCQSxpQkFBb0IsQ0FBU0MsQ0FBVCxFQUFZQyxZQUFaLEVBQTBCQyxFQUExQixFQUE4QjtBQUNwRCxPQUFLLElBQUliLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdXLENBQUMsQ0FBQ3RCLE9BQUYsQ0FBVXlCLE1BQWQsSUFBd0JILENBQUMsQ0FBQ3RCLE9BQUYsQ0FBVVcsQ0FBVixFQUFhZSxPQUFiLElBQXdCRixFQUFoRSxFQUFvRWIsQ0FBQyxFQUFyRSxFQUF5RTtBQUNyRSxRQUFJYSxFQUFFLEdBQUdGLENBQUMsQ0FBQ3RCLE9BQUYsQ0FBVVcsQ0FBVixFQUFhZ0IsS0FBdEIsRUFBNkI7QUFBRztBQUM1Qkosa0JBQVk7QUFDWixVQUFJQSxZQUFZLEtBQUssQ0FBckIsRUFDSSxPQUFPRCxDQUFDLENBQUN0QixPQUFGLENBQVVXLENBQVYsRUFBYWlCLE9BQWIsQ0FBcUJDLE1BQXJCLEVBQVA7QUFDUDtBQUNKOztBQUNELFNBQU8sSUFBUDtBQUFjO0FBQ2pCLENBVEQ7O0FBV0FDLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlQyxRQUFmLEdBQW1DLEdBQW5DO0FBQ0FGLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlN0MsS0FBZixHQUFtQ0EsS0FBbkM7QUFDQTRDLE1BQU0sQ0FBQ0MsT0FBUCxDQUFleEIsY0FBZixHQUFtQ0EsY0FBbkM7QUFDQXVCLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlckIsVUFBZixHQUFtQ0EsVUFBbkM7QUFDQW9CLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlVixpQkFBZixHQUFtQ0EsaUJBQW5DO0FBQ0FTLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlZCxlQUFmLEdBQW1DQSxlQUFuQztBQUNBYSxNQUFNLENBQUNDLE9BQVAsQ0FBZTNCLGdCQUFmLEdBQW1DQSxnQkFBbkMiLCJmaWxlIjoiMTMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgeyBjb25zdGFudF90eXBlczogeyBMVUFfVE5JTCB9IH0gPSByZXF1aXJlKCcuL2RlZnMuanMnKTtcbmNvbnN0IGxvYmplY3QgPSByZXF1aXJlKCcuL2xvYmplY3QuanMnKTtcblxuY2xhc3MgUHJvdG8ge1xuICAgIGNvbnN0cnVjdG9yKEwpIHtcbiAgICAgICAgdGhpcy5pZCA9IEwubF9HLmlkX2NvdW50ZXIrKztcbiAgICAgICAgdGhpcy5rID0gW107ICAgICAgICAgICAgICAvLyBjb25zdGFudHMgdXNlZCBieSB0aGUgZnVuY3Rpb25cbiAgICAgICAgdGhpcy5wID0gW107ICAgICAgICAgICAgICAvLyBmdW5jdGlvbnMgZGVmaW5lZCBpbnNpZGUgdGhlIGZ1bmN0aW9uXG4gICAgICAgIHRoaXMuY29kZSA9IFtdOyAgICAgICAgICAgLy8gb3Bjb2Rlc1xuICAgICAgICB0aGlzLmNhY2hlID0gbnVsbDsgICAgICAgIC8vIGxhc3QtY3JlYXRlZCBjbG9zdXJlIHdpdGggdGhpcyBwcm90b3R5cGVcbiAgICAgICAgdGhpcy5saW5laW5mbyA9IFtdOyAgICAgICAvLyBtYXAgZnJvbSBvcGNvZGVzIHRvIHNvdXJjZSBsaW5lcyAoZGVidWcgaW5mb3JtYXRpb24pXG4gICAgICAgIHRoaXMudXB2YWx1ZXMgPSBbXTsgICAgICAgLy8gdXB2YWx1ZSBpbmZvcm1hdGlvblxuICAgICAgICB0aGlzLm51bXBhcmFtcyA9IDA7ICAgICAgIC8vIG51bWJlciBvZiBmaXhlZCBwYXJhbWV0ZXJzXG4gICAgICAgIHRoaXMuaXNfdmFyYXJnID0gZmFsc2U7XG4gICAgICAgIHRoaXMubWF4c3RhY2tzaXplID0gMDsgICAgLy8gbnVtYmVyIG9mIHJlZ2lzdGVycyBuZWVkZWQgYnkgdGhpcyBmdW5jdGlvblxuICAgICAgICB0aGlzLmxvY3ZhcnMgPSBbXTsgICAgICAgIC8vIGluZm9ybWF0aW9uIGFib3V0IGxvY2FsIHZhcmlhYmxlcyAoZGVidWcgaW5mb3JtYXRpb24pXG4gICAgICAgIHRoaXMubGluZWRlZmluZWQgPSAwOyAgICAgLy8gZGVidWcgaW5mb3JtYXRpb25cbiAgICAgICAgdGhpcy5sYXN0bGluZWRlZmluZWQgPSAwOyAvLyBkZWJ1ZyBpbmZvcm1hdGlvblxuICAgICAgICB0aGlzLnNvdXJjZSA9IG51bGw7ICAgICAgIC8vIHVzZWQgZm9yIGRlYnVnIGluZm9ybWF0aW9uXG4gICAgfVxufVxuXG5jb25zdCBsdWFGX25ld0xjbG9zdXJlID0gZnVuY3Rpb24oTCwgbikge1xuICAgIHJldHVybiBuZXcgbG9iamVjdC5MQ2xvc3VyZShMLCBuKTtcbn07XG5cblxuY29uc3QgbHVhRl9maW5kdXB2YWwgPSBmdW5jdGlvbihMLCBsZXZlbCkge1xuICAgIHJldHVybiBMLnN0YWNrW2xldmVsXTtcbn07XG5cbmNvbnN0IGx1YUZfY2xvc2UgPSBmdW5jdGlvbihMLCBsZXZlbCkge1xuICAgIC8qIENyZWF0ZSBuZXcgVFZhbHVlcyBvbiBzdGFjaztcbiAgICAgKiBhbnkgY2xvc3VyZXMgd2lsbCBrZWVwIHJlZmVyZW5jaW5nIG9sZCBUVmFsdWVzICovXG4gICAgZm9yIChsZXQgaT1sZXZlbDsgaTxMLnRvcDsgaSsrKSB7XG4gICAgICAgIGxldCBvbGQgPSBMLnN0YWNrW2ldO1xuICAgICAgICBMLnN0YWNrW2ldID0gbmV3IGxvYmplY3QuVFZhbHVlKG9sZC50eXBlLCBvbGQudmFsdWUpO1xuICAgIH1cbn07XG5cbi8qXG4qKiBmaWxsIGEgY2xvc3VyZSB3aXRoIG5ldyB1cHZhbHVlc1xuKi9cbmNvbnN0IGx1YUZfaW5pdHVwdmFscyA9IGZ1bmN0aW9uKEwsIGNsKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjbC5udXB2YWx1ZXM7IGkrKylcbiAgICAgICAgY2wudXB2YWxzW2ldID0gbmV3IGxvYmplY3QuVFZhbHVlKExVQV9UTklMLCBudWxsKTtcbn07XG5cbi8qXG4qKiBMb29rIGZvciBuLXRoIGxvY2FsIHZhcmlhYmxlIGF0IGxpbmUgJ2xpbmUnIGluIGZ1bmN0aW9uICdmdW5jJy5cbioqIFJldHVybnMgbnVsbCBpZiBub3QgZm91bmQuXG4qL1xuY29uc3QgbHVhRl9nZXRsb2NhbG5hbWUgPSBmdW5jdGlvbihmLCBsb2NhbF9udW1iZXIsIHBjKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmLmxvY3ZhcnMubGVuZ3RoICYmIGYubG9jdmFyc1tpXS5zdGFydHBjIDw9IHBjOyBpKyspIHtcbiAgICAgICAgaWYgKHBjIDwgZi5sb2N2YXJzW2ldLmVuZHBjKSB7ICAvKiBpcyB2YXJpYWJsZSBhY3RpdmU/ICovXG4gICAgICAgICAgICBsb2NhbF9udW1iZXItLTtcbiAgICAgICAgICAgIGlmIChsb2NhbF9udW1iZXIgPT09IDApXG4gICAgICAgICAgICAgICAgcmV0dXJuIGYubG9jdmFyc1tpXS52YXJuYW1lLmdldHN0cigpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsOyAgLyogbm90IGZvdW5kICovXG59O1xuXG5tb2R1bGUuZXhwb3J0cy5NQVhVUFZBTCAgICAgICAgICA9IDI1NTtcbm1vZHVsZS5leHBvcnRzLlByb3RvICAgICAgICAgICAgID0gUHJvdG87XG5tb2R1bGUuZXhwb3J0cy5sdWFGX2ZpbmR1cHZhbCAgICA9IGx1YUZfZmluZHVwdmFsO1xubW9kdWxlLmV4cG9ydHMubHVhRl9jbG9zZSAgICAgICAgPSBsdWFGX2Nsb3NlO1xubW9kdWxlLmV4cG9ydHMubHVhRl9nZXRsb2NhbG5hbWUgPSBsdWFGX2dldGxvY2FsbmFtZTtcbm1vZHVsZS5leHBvcnRzLmx1YUZfaW5pdHVwdmFscyAgID0gbHVhRl9pbml0dXB2YWxzO1xubW9kdWxlLmV4cG9ydHMubHVhRl9uZXdMY2xvc3VyZSAgPSBsdWFGX25ld0xjbG9zdXJlO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///13\n")},function(module,exports,__webpack_require__){"use strict";eval('\n\nvar _require = __webpack_require__(1),\n    _require$constant_typ = _require.constant_types,\n    LUA_TTABLE = _require$constant_typ.LUA_TTABLE,\n    LUA_TUSERDATA = _require$constant_typ.LUA_TUSERDATA,\n    to_luastring = _require.to_luastring;\n\nvar _require2 = __webpack_require__(4),\n    lua_assert = _require2.lua_assert;\n\nvar lobject = __webpack_require__(6);\n\nvar ldo = __webpack_require__(8);\n\nvar lstate = __webpack_require__(12);\n\nvar _require3 = __webpack_require__(10),\n    luaS_bless = _require3.luaS_bless,\n    luaS_new = _require3.luaS_new;\n\nvar ltable = __webpack_require__(9);\n\nvar ldebug = __webpack_require__(11);\n\nvar lvm = __webpack_require__(15);\n\nvar luaT_typenames_ = ["no value", "nil", "boolean", "userdata", "number", "string", "table", "function", "userdata", "thread", "proto"\n/* this last case is used for tests only */\n].map(function (e) {\n  return to_luastring(e);\n});\n\nvar ttypename = function ttypename(t) {\n  return luaT_typenames_[t + 1];\n};\n/*\n* WARNING: if you change the order of this enumeration,\n* grep "ORDER TM" and "ORDER OP"\n*/\n\n\nvar TMS = {\n  TM_INDEX: 0,\n  TM_NEWINDEX: 1,\n  TM_GC: 2,\n  TM_MODE: 3,\n  TM_LEN: 4,\n  TM_EQ: 5,\n\n  /* last tag method with fast access */\n  TM_ADD: 6,\n  TM_SUB: 7,\n  TM_MUL: 8,\n  TM_MOD: 9,\n  TM_POW: 10,\n  TM_DIV: 11,\n  TM_IDIV: 12,\n  TM_BAND: 13,\n  TM_BOR: 14,\n  TM_BXOR: 15,\n  TM_SHL: 16,\n  TM_SHR: 17,\n  TM_UNM: 18,\n  TM_BNOT: 19,\n  TM_LT: 20,\n  TM_LE: 21,\n  TM_CONCAT: 22,\n  TM_CALL: 23,\n  TM_N: 24\n  /* number of elements in the enum */\n\n};\n\nvar luaT_init = function luaT_init(L) {\n  L.l_G.tmname[TMS.TM_INDEX] = new luaS_new(L, to_luastring("__index", true));\n  L.l_G.tmname[TMS.TM_NEWINDEX] = new luaS_new(L, to_luastring("__newindex", true));\n  L.l_G.tmname[TMS.TM_GC] = new luaS_new(L, to_luastring("__gc", true));\n  L.l_G.tmname[TMS.TM_MODE] = new luaS_new(L, to_luastring("__mode", true));\n  L.l_G.tmname[TMS.TM_LEN] = new luaS_new(L, to_luastring("__len", true));\n  L.l_G.tmname[TMS.TM_EQ] = new luaS_new(L, to_luastring("__eq", true));\n  L.l_G.tmname[TMS.TM_ADD] = new luaS_new(L, to_luastring("__add", true));\n  L.l_G.tmname[TMS.TM_SUB] = new luaS_new(L, to_luastring("__sub", true));\n  L.l_G.tmname[TMS.TM_MUL] = new luaS_new(L, to_luastring("__mul", true));\n  L.l_G.tmname[TMS.TM_MOD] = new luaS_new(L, to_luastring("__mod", true));\n  L.l_G.tmname[TMS.TM_POW] = new luaS_new(L, to_luastring("__pow", true));\n  L.l_G.tmname[TMS.TM_DIV] = new luaS_new(L, to_luastring("__div", true));\n  L.l_G.tmname[TMS.TM_IDIV] = new luaS_new(L, to_luastring("__idiv", true));\n  L.l_G.tmname[TMS.TM_BAND] = new luaS_new(L, to_luastring("__band", true));\n  L.l_G.tmname[TMS.TM_BOR] = new luaS_new(L, to_luastring("__bor", true));\n  L.l_G.tmname[TMS.TM_BXOR] = new luaS_new(L, to_luastring("__bxor", true));\n  L.l_G.tmname[TMS.TM_SHL] = new luaS_new(L, to_luastring("__shl", true));\n  L.l_G.tmname[TMS.TM_SHR] = new luaS_new(L, to_luastring("__shr", true));\n  L.l_G.tmname[TMS.TM_UNM] = new luaS_new(L, to_luastring("__unm", true));\n  L.l_G.tmname[TMS.TM_BNOT] = new luaS_new(L, to_luastring("__bnot", true));\n  L.l_G.tmname[TMS.TM_LT] = new luaS_new(L, to_luastring("__lt", true));\n  L.l_G.tmname[TMS.TM_LE] = new luaS_new(L, to_luastring("__le", true));\n  L.l_G.tmname[TMS.TM_CONCAT] = new luaS_new(L, to_luastring("__concat", true));\n  L.l_G.tmname[TMS.TM_CALL] = new luaS_new(L, to_luastring("__call", true));\n};\n/*\n** Return the name of the type of an object. For tables and userdata\n** with metatable, use their \'__name\' metafield, if present.\n*/\n\n\nvar __name = to_luastring(\'__name\', true);\n\nvar luaT_objtypename = function luaT_objtypename(L, o) {\n  var mt;\n\n  if (o.ttistable() && (mt = o.value.metatable) !== null || o.ttisfulluserdata() && (mt = o.value.metatable) !== null) {\n    var name = ltable.luaH_getstr(mt, luaS_bless(L, __name));\n    if (name.ttisstring()) return name.svalue();\n  }\n\n  return ttypename(o.ttnov());\n};\n\nvar luaT_callTM = function luaT_callTM(L, f, p1, p2, p3, hasres) {\n  var func = L.top;\n  lobject.pushobj2s(L, f);\n  /* push function (assume EXTRA_STACK) */\n\n  lobject.pushobj2s(L, p1);\n  /* 1st argument */\n\n  lobject.pushobj2s(L, p2);\n  /* 2nd argument */\n\n  if (!hasres)\n    /* no result? \'p3\' is third argument */\n    lobject.pushobj2s(L, p3);\n  /* 3rd argument */\n\n  if (L.ci.callstatus & lstate.CIST_LUA) ldo.luaD_call(L, func, hasres);else ldo.luaD_callnoyield(L, func, hasres);\n\n  if (hasres) {\n    /* if has result, move it to its place */\n    var tv = L.stack[L.top - 1];\n    delete L.stack[--L.top];\n    p3.setfrom(tv);\n  }\n};\n\nvar luaT_callbinTM = function luaT_callbinTM(L, p1, p2, res, event) {\n  var tm = luaT_gettmbyobj(L, p1, event);\n  if (tm.ttisnil()) tm = luaT_gettmbyobj(L, p2, event);\n  if (tm.ttisnil()) return false;\n  luaT_callTM(L, tm, p1, p2, res, 1);\n  return true;\n};\n\nvar luaT_trybinTM = function luaT_trybinTM(L, p1, p2, res, event) {\n  if (!luaT_callbinTM(L, p1, p2, res, event)) {\n    switch (event) {\n      case TMS.TM_CONCAT:\n        return ldebug.luaG_concaterror(L, p1, p2);\n\n      case TMS.TM_BAND:\n      case TMS.TM_BOR:\n      case TMS.TM_BXOR:\n      case TMS.TM_SHL:\n      case TMS.TM_SHR:\n      case TMS.TM_BNOT:\n        {\n          var n1 = lvm.tonumber(p1);\n          var n2 = lvm.tonumber(p2);\n          if (n1 !== false && n2 !== false) return ldebug.luaG_tointerror(L, p1, p2);else return ldebug.luaG_opinterror(L, p1, p2, to_luastring("perform bitwise operation on", true));\n        }\n\n      default:\n        return ldebug.luaG_opinterror(L, p1, p2, to_luastring("perform arithmetic on", true));\n    }\n  }\n};\n\nvar luaT_callorderTM = function luaT_callorderTM(L, p1, p2, event) {\n  var res = new lobject.TValue();\n  if (!luaT_callbinTM(L, p1, p2, res, event)) return null;else return !res.l_isfalse();\n};\n\nvar fasttm = function fasttm(l, et, e) {\n  return et === null ? null : et.flags & 1 << e ? null : luaT_gettm(et, e, l.l_G.tmname[e]);\n};\n\nvar luaT_gettm = function luaT_gettm(events, event, ename) {\n  var tm = ltable.luaH_getstr(events, ename);\n  lua_assert(event <= TMS.TM_EQ);\n\n  if (tm.ttisnil()) {\n    /* no tag method? */\n    events.flags |= 1 << event;\n    /* cache this fact */\n\n    return null;\n  } else return tm;\n};\n\nvar luaT_gettmbyobj = function luaT_gettmbyobj(L, o, event) {\n  var mt;\n\n  switch (o.ttnov()) {\n    case LUA_TTABLE:\n    case LUA_TUSERDATA:\n      mt = o.value.metatable;\n      break;\n\n    default:\n      mt = L.l_G.mt[o.ttnov()];\n  }\n\n  return mt ? ltable.luaH_getstr(mt, L.l_G.tmname[event]) : lobject.luaO_nilobject;\n};\n\nmodule.exports.fasttm = fasttm;\nmodule.exports.TMS = TMS;\nmodule.exports.luaT_callTM = luaT_callTM;\nmodule.exports.luaT_callbinTM = luaT_callbinTM;\nmodule.exports.luaT_trybinTM = luaT_trybinTM;\nmodule.exports.luaT_callorderTM = luaT_callorderTM;\nmodule.exports.luaT_gettm = luaT_gettm;\nmodule.exports.luaT_gettmbyobj = luaT_gettmbyobj;\nmodule.exports.luaT_init = luaT_init;\nmodule.exports.luaT_objtypename = luaT_objtypename;\nmodule.exports.ttypename = ttypename;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///14\n')},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _require = __webpack_require__(1),\n    LUA_MASKLINE = _require.LUA_MASKLINE,\n    LUA_MASKCOUNT = _require.LUA_MASKCOUNT,\n    LUA_MULTRET = _require.LUA_MULTRET,\n    _require$constant_typ = _require.constant_types,\n    LUA_TBOOLEAN = _require$constant_typ.LUA_TBOOLEAN,\n    LUA_TLCF = _require$constant_typ.LUA_TLCF,\n    LUA_TLIGHTUSERDATA = _require$constant_typ.LUA_TLIGHTUSERDATA,\n    LUA_TLNGSTR = _require$constant_typ.LUA_TLNGSTR,\n    LUA_TNIL = _require$constant_typ.LUA_TNIL,\n    LUA_TNUMBER = _require$constant_typ.LUA_TNUMBER,\n    LUA_TNUMFLT = _require$constant_typ.LUA_TNUMFLT,\n    LUA_TNUMINT = _require$constant_typ.LUA_TNUMINT,\n    LUA_TSHRSTR = _require$constant_typ.LUA_TSHRSTR,\n    LUA_TTABLE = _require$constant_typ.LUA_TTABLE,\n    LUA_TUSERDATA = _require$constant_typ.LUA_TUSERDATA,\n    to_luastring = _require.to_luastring;\n\nvar _require2 = __webpack_require__(16),\n    INDEXK = _require2.INDEXK,\n    ISK = _require2.ISK,\n    LFIELDS_PER_FLUSH = _require2.LFIELDS_PER_FLUSH,\n    _require2$OpCodesI = _require2.OpCodesI,\n    OP_ADD = _require2$OpCodesI.OP_ADD,\n    OP_BAND = _require2$OpCodesI.OP_BAND,\n    OP_BNOT = _require2$OpCodesI.OP_BNOT,\n    OP_BOR = _require2$OpCodesI.OP_BOR,\n    OP_BXOR = _require2$OpCodesI.OP_BXOR,\n    OP_CALL = _require2$OpCodesI.OP_CALL,\n    OP_CLOSURE = _require2$OpCodesI.OP_CLOSURE,\n    OP_CONCAT = _require2$OpCodesI.OP_CONCAT,\n    OP_DIV = _require2$OpCodesI.OP_DIV,\n    OP_EQ = _require2$OpCodesI.OP_EQ,\n    OP_EXTRAARG = _require2$OpCodesI.OP_EXTRAARG,\n    OP_FORLOOP = _require2$OpCodesI.OP_FORLOOP,\n    OP_FORPREP = _require2$OpCodesI.OP_FORPREP,\n    OP_GETTABLE = _require2$OpCodesI.OP_GETTABLE,\n    OP_GETTABUP = _require2$OpCodesI.OP_GETTABUP,\n    OP_GETUPVAL = _require2$OpCodesI.OP_GETUPVAL,\n    OP_IDIV = _require2$OpCodesI.OP_IDIV,\n    OP_JMP = _require2$OpCodesI.OP_JMP,\n    OP_LE = _require2$OpCodesI.OP_LE,\n    OP_LEN = _require2$OpCodesI.OP_LEN,\n    OP_LOADBOOL = _require2$OpCodesI.OP_LOADBOOL,\n    OP_LOADK = _require2$OpCodesI.OP_LOADK,\n    OP_LOADKX = _require2$OpCodesI.OP_LOADKX,\n    OP_LOADNIL = _require2$OpCodesI.OP_LOADNIL,\n    OP_LT = _require2$OpCodesI.OP_LT,\n    OP_MOD = _require2$OpCodesI.OP_MOD,\n    OP_MOVE = _require2$OpCodesI.OP_MOVE,\n    OP_MUL = _require2$OpCodesI.OP_MUL,\n    OP_NEWTABLE = _require2$OpCodesI.OP_NEWTABLE,\n    OP_NOT = _require2$OpCodesI.OP_NOT,\n    OP_POW = _require2$OpCodesI.OP_POW,\n    OP_RETURN = _require2$OpCodesI.OP_RETURN,\n    OP_SELF = _require2$OpCodesI.OP_SELF,\n    OP_SETLIST = _require2$OpCodesI.OP_SETLIST,\n    OP_SETTABLE = _require2$OpCodesI.OP_SETTABLE,\n    OP_SETTABUP = _require2$OpCodesI.OP_SETTABUP,\n    OP_SETUPVAL = _require2$OpCodesI.OP_SETUPVAL,\n    OP_SHL = _require2$OpCodesI.OP_SHL,\n    OP_SHR = _require2$OpCodesI.OP_SHR,\n    OP_SUB = _require2$OpCodesI.OP_SUB,\n    OP_TAILCALL = _require2$OpCodesI.OP_TAILCALL,\n    OP_TEST = _require2$OpCodesI.OP_TEST,\n    OP_TESTSET = _require2$OpCodesI.OP_TESTSET,\n    OP_TFORCALL = _require2$OpCodesI.OP_TFORCALL,\n    OP_TFORLOOP = _require2$OpCodesI.OP_TFORLOOP,\n    OP_UNM = _require2$OpCodesI.OP_UNM,\n    OP_VARARG = _require2$OpCodesI.OP_VARARG;\n\nvar _require3 = __webpack_require__(3),\n    LUA_MAXINTEGER = _require3.LUA_MAXINTEGER,\n    LUA_MININTEGER = _require3.LUA_MININTEGER,\n    lua_numbertointeger = _require3.lua_numbertointeger;\n\nvar _require4 = __webpack_require__(4),\n    lua_assert = _require4.lua_assert,\n    luai_nummod = _require4.luai_nummod;\n\nvar lobject = __webpack_require__(6);\n\nvar lfunc = __webpack_require__(13);\n\nvar lstate = __webpack_require__(12);\n\nvar _require5 = __webpack_require__(10),\n    luaS_bless = _require5.luaS_bless,\n    luaS_eqlngstr = _require5.luaS_eqlngstr,\n    luaS_hashlongstr = _require5.luaS_hashlongstr;\n\nvar ldo = __webpack_require__(8);\n\nvar ltm = __webpack_require__(14);\n\nvar ltable = __webpack_require__(9);\n\nvar ldebug = __webpack_require__(11);\n/*\n** finish execution of an opcode interrupted by an yield\n*/\n\n\nvar luaV_finishOp = function luaV_finishOp(L) {\n  var ci = L.ci;\n  var base = ci.l_base;\n  var inst = ci.l_code[ci.l_savedpc - 1];\n  /* interrupted instruction */\n\n  var op = inst.opcode;\n\n  switch (op) {\n    /* finish its execution */\n    case OP_ADD:\n    case OP_SUB:\n    case OP_MUL:\n    case OP_DIV:\n    case OP_IDIV:\n    case OP_BAND:\n    case OP_BOR:\n    case OP_BXOR:\n    case OP_SHL:\n    case OP_SHR:\n    case OP_MOD:\n    case OP_POW:\n    case OP_UNM:\n    case OP_BNOT:\n    case OP_LEN:\n    case OP_GETTABUP:\n    case OP_GETTABLE:\n    case OP_SELF:\n      {\n        lobject.setobjs2s(L, base + inst.A, L.top - 1);\n        delete L.stack[--L.top];\n        break;\n      }\n\n    case OP_LE:\n    case OP_LT:\n    case OP_EQ:\n      {\n        var res = !L.stack[L.top - 1].l_isfalse();\n        delete L.stack[--L.top];\n\n        if (ci.callstatus & lstate.CIST_LEQ) {\n          /* \"<=\" using \"<\" instead? */\n          lua_assert(op === OP_LE);\n          ci.callstatus ^= lstate.CIST_LEQ;\n          /* clear mark */\n\n          res = !res;\n          /* negate result */\n        }\n\n        lua_assert(ci.l_code[ci.l_savedpc].opcode === OP_JMP);\n        if (res !== (inst.A ? true : false))\n          /* condition failed? */\n          ci.l_savedpc++;\n        /* skip jump instruction */\n\n        break;\n      }\n\n    case OP_CONCAT:\n      {\n        var top = L.top - 1;\n        /* top when 'luaT_trybinTM' was called */\n\n        var b = inst.B;\n        /* first element to concatenate */\n\n        var total = top - 1 - (base + b);\n        /* yet to concatenate */\n\n        lobject.setobjs2s(L, top - 2, top);\n        /* put TM result in proper position */\n\n        if (total > 1) {\n          /* are there elements to concat? */\n          L.top = top - 1;\n          /* top is one after last element (at top-2) */\n\n          luaV_concat(L, total);\n          /* concat them (may yield again) */\n        }\n        /* move final result to final position */\n\n\n        lobject.setobjs2s(L, ci.l_base + inst.A, L.top - 1);\n        ldo.adjust_top(L, ci.top);\n        /* restore top */\n\n        break;\n      }\n\n    case OP_TFORCALL:\n      {\n        lua_assert(ci.l_code[ci.l_savedpc].opcode === OP_TFORLOOP);\n        ldo.adjust_top(L, ci.top);\n        /* correct top */\n\n        break;\n      }\n\n    case OP_CALL:\n      {\n        if (inst.C - 1 >= 0)\n          /* nresults >= 0? */\n          ldo.adjust_top(L, ci.top);\n        /* adjust results */\n\n        break;\n      }\n  }\n};\n\nvar RA = function RA(L, base, i) {\n  return base + i.A;\n};\n\nvar RB = function RB(L, base, i) {\n  return base + i.B;\n}; // const RC = function(L, base, i) {\n//     return base + i.C;\n// };\n\n\nvar RKB = function RKB(L, base, k, i) {\n  return ISK(i.B) ? k[INDEXK(i.B)] : L.stack[base + i.B];\n};\n\nvar RKC = function RKC(L, base, k, i) {\n  return ISK(i.C) ? k[INDEXK(i.C)] : L.stack[base + i.C];\n};\n\nvar luaV_execute = function luaV_execute(L) {\n  var ci = L.ci;\n  ci.callstatus |= lstate.CIST_FRESH;\n\n  newframe: for (;;) {\n    lua_assert(ci === L.ci);\n    var cl = ci.func.value;\n    var k = cl.p.k;\n    var base = ci.l_base;\n    var i = ci.l_code[ci.l_savedpc++];\n\n    if (L.hookmask & (LUA_MASKLINE | LUA_MASKCOUNT)) {\n      ldebug.luaG_traceexec(L);\n    }\n\n    var ra = RA(L, base, i);\n    var opcode = i.opcode;\n\n    switch (opcode) {\n      case OP_MOVE:\n        {\n          lobject.setobjs2s(L, ra, RB(L, base, i));\n          break;\n        }\n\n      case OP_LOADK:\n        {\n          var konst = k[i.Bx];\n          lobject.setobj2s(L, ra, konst);\n          break;\n        }\n\n      case OP_LOADKX:\n        {\n          lua_assert(ci.l_code[ci.l_savedpc].opcode === OP_EXTRAARG);\n          var _konst = k[ci.l_code[ci.l_savedpc++].Ax];\n          lobject.setobj2s(L, ra, _konst);\n          break;\n        }\n\n      case OP_LOADBOOL:\n        {\n          L.stack[ra].setbvalue(i.B !== 0);\n          if (i.C !== 0) ci.l_savedpc++;\n          /* skip next instruction (if C) */\n\n          break;\n        }\n\n      case OP_LOADNIL:\n        {\n          for (var j = 0; j <= i.B; j++) {\n            L.stack[ra + j].setnilvalue();\n          }\n\n          break;\n        }\n\n      case OP_GETUPVAL:\n        {\n          var b = i.B;\n          lobject.setobj2s(L, ra, cl.upvals[b]);\n          break;\n        }\n\n      case OP_GETTABUP:\n        {\n          var upval = cl.upvals[i.B];\n          var rc = RKC(L, base, k, i);\n          luaV_gettable(L, upval, rc, ra);\n          break;\n        }\n\n      case OP_GETTABLE:\n        {\n          var rb = L.stack[RB(L, base, i)];\n\n          var _rc = RKC(L, base, k, i);\n\n          luaV_gettable(L, rb, _rc, ra);\n          break;\n        }\n\n      case OP_SETTABUP:\n        {\n          var _upval = cl.upvals[i.A];\n\n          var _rb = RKB(L, base, k, i);\n\n          var _rc2 = RKC(L, base, k, i);\n\n          settable(L, _upval, _rb, _rc2);\n          break;\n        }\n\n      case OP_SETUPVAL:\n        {\n          var uv = cl.upvals[i.B];\n          uv.setfrom(L.stack[ra]);\n          break;\n        }\n\n      case OP_SETTABLE:\n        {\n          var table = L.stack[ra];\n          var key = RKB(L, base, k, i);\n          var v = RKC(L, base, k, i);\n          settable(L, table, key, v);\n          break;\n        }\n\n      case OP_NEWTABLE:\n        {\n          L.stack[ra].sethvalue(ltable.luaH_new(L));\n          break;\n        }\n\n      case OP_SELF:\n        {\n          var _rb2 = RB(L, base, i);\n\n          var _rc3 = RKC(L, base, k, i);\n\n          lobject.setobjs2s(L, ra + 1, _rb2);\n          luaV_gettable(L, L.stack[_rb2], _rc3, ra);\n          break;\n        }\n\n      case OP_ADD:\n        {\n          var op1 = RKB(L, base, k, i);\n          var op2 = RKC(L, base, k, i);\n          var numberop1 = void 0,\n              numberop2 = void 0;\n\n          if (op1.ttisinteger() && op2.ttisinteger()) {\n            L.stack[ra].setivalue(op1.value + op2.value | 0);\n          } else if ((numberop1 = tonumber(op1)) !== false && (numberop2 = tonumber(op2)) !== false) {\n            L.stack[ra].setfltvalue(numberop1 + numberop2);\n          } else {\n            ltm.luaT_trybinTM(L, op1, op2, L.stack[ra], ltm.TMS.TM_ADD);\n          }\n\n          break;\n        }\n\n      case OP_SUB:\n        {\n          var _op = RKB(L, base, k, i);\n\n          var _op2 = RKC(L, base, k, i);\n\n          var _numberop = void 0,\n              _numberop2 = void 0;\n\n          if (_op.ttisinteger() && _op2.ttisinteger()) {\n            L.stack[ra].setivalue(_op.value - _op2.value | 0);\n          } else if ((_numberop = tonumber(_op)) !== false && (_numberop2 = tonumber(_op2)) !== false) {\n            L.stack[ra].setfltvalue(_numberop - _numberop2);\n          } else {\n            ltm.luaT_trybinTM(L, _op, _op2, L.stack[ra], ltm.TMS.TM_SUB);\n          }\n\n          break;\n        }\n\n      case OP_MUL:\n        {\n          var _op3 = RKB(L, base, k, i);\n\n          var _op4 = RKC(L, base, k, i);\n\n          var _numberop3 = void 0,\n              _numberop4 = void 0;\n\n          if (_op3.ttisinteger() && _op4.ttisinteger()) {\n            L.stack[ra].setivalue(luaV_imul(_op3.value, _op4.value));\n          } else if ((_numberop3 = tonumber(_op3)) !== false && (_numberop4 = tonumber(_op4)) !== false) {\n            L.stack[ra].setfltvalue(_numberop3 * _numberop4);\n          } else {\n            ltm.luaT_trybinTM(L, _op3, _op4, L.stack[ra], ltm.TMS.TM_MUL);\n          }\n\n          break;\n        }\n\n      case OP_MOD:\n        {\n          var _op5 = RKB(L, base, k, i);\n\n          var _op6 = RKC(L, base, k, i);\n\n          var _numberop5 = void 0,\n              _numberop6 = void 0;\n\n          if (_op5.ttisinteger() && _op6.ttisinteger()) {\n            L.stack[ra].setivalue(luaV_mod(L, _op5.value, _op6.value));\n          } else if ((_numberop5 = tonumber(_op5)) !== false && (_numberop6 = tonumber(_op6)) !== false) {\n            L.stack[ra].setfltvalue(luai_nummod(L, _numberop5, _numberop6));\n          } else {\n            ltm.luaT_trybinTM(L, _op5, _op6, L.stack[ra], ltm.TMS.TM_MOD);\n          }\n\n          break;\n        }\n\n      case OP_POW:\n        {\n          var _op7 = RKB(L, base, k, i);\n\n          var _op8 = RKC(L, base, k, i);\n\n          var _numberop7 = void 0,\n              _numberop8 = void 0;\n\n          if ((_numberop7 = tonumber(_op7)) !== false && (_numberop8 = tonumber(_op8)) !== false) {\n            L.stack[ra].setfltvalue(Math.pow(_numberop7, _numberop8));\n          } else {\n            ltm.luaT_trybinTM(L, _op7, _op8, L.stack[ra], ltm.TMS.TM_POW);\n          }\n\n          break;\n        }\n\n      case OP_DIV:\n        {\n          var _op9 = RKB(L, base, k, i);\n\n          var _op10 = RKC(L, base, k, i);\n\n          var _numberop9 = void 0,\n              _numberop10 = void 0;\n\n          if ((_numberop9 = tonumber(_op9)) !== false && (_numberop10 = tonumber(_op10)) !== false) {\n            L.stack[ra].setfltvalue(_numberop9 / _numberop10);\n          } else {\n            ltm.luaT_trybinTM(L, _op9, _op10, L.stack[ra], ltm.TMS.TM_DIV);\n          }\n\n          break;\n        }\n\n      case OP_IDIV:\n        {\n          var _op11 = RKB(L, base, k, i);\n\n          var _op12 = RKC(L, base, k, i);\n\n          var _numberop11 = void 0,\n              _numberop12 = void 0;\n\n          if (_op11.ttisinteger() && _op12.ttisinteger()) {\n            L.stack[ra].setivalue(luaV_div(L, _op11.value, _op12.value));\n          } else if ((_numberop11 = tonumber(_op11)) !== false && (_numberop12 = tonumber(_op12)) !== false) {\n            L.stack[ra].setfltvalue(Math.floor(_numberop11 / _numberop12));\n          } else {\n            ltm.luaT_trybinTM(L, _op11, _op12, L.stack[ra], ltm.TMS.TM_IDIV);\n          }\n\n          break;\n        }\n\n      case OP_BAND:\n        {\n          var _op13 = RKB(L, base, k, i);\n\n          var _op14 = RKC(L, base, k, i);\n\n          var _numberop13 = void 0,\n              _numberop14 = void 0;\n\n          if ((_numberop13 = tointeger(_op13)) !== false && (_numberop14 = tointeger(_op14)) !== false) {\n            L.stack[ra].setivalue(_numberop13 & _numberop14);\n          } else {\n            ltm.luaT_trybinTM(L, _op13, _op14, L.stack[ra], ltm.TMS.TM_BAND);\n          }\n\n          break;\n        }\n\n      case OP_BOR:\n        {\n          var _op15 = RKB(L, base, k, i);\n\n          var _op16 = RKC(L, base, k, i);\n\n          var _numberop15 = void 0,\n              _numberop16 = void 0;\n\n          if ((_numberop15 = tointeger(_op15)) !== false && (_numberop16 = tointeger(_op16)) !== false) {\n            L.stack[ra].setivalue(_numberop15 | _numberop16);\n          } else {\n            ltm.luaT_trybinTM(L, _op15, _op16, L.stack[ra], ltm.TMS.TM_BOR);\n          }\n\n          break;\n        }\n\n      case OP_BXOR:\n        {\n          var _op17 = RKB(L, base, k, i);\n\n          var _op18 = RKC(L, base, k, i);\n\n          var _numberop17 = void 0,\n              _numberop18 = void 0;\n\n          if ((_numberop17 = tointeger(_op17)) !== false && (_numberop18 = tointeger(_op18)) !== false) {\n            L.stack[ra].setivalue(_numberop17 ^ _numberop18);\n          } else {\n            ltm.luaT_trybinTM(L, _op17, _op18, L.stack[ra], ltm.TMS.TM_BXOR);\n          }\n\n          break;\n        }\n\n      case OP_SHL:\n        {\n          var _op19 = RKB(L, base, k, i);\n\n          var _op20 = RKC(L, base, k, i);\n\n          var _numberop19 = void 0,\n              _numberop20 = void 0;\n\n          if ((_numberop19 = tointeger(_op19)) !== false && (_numberop20 = tointeger(_op20)) !== false) {\n            L.stack[ra].setivalue(luaV_shiftl(_numberop19, _numberop20));\n          } else {\n            ltm.luaT_trybinTM(L, _op19, _op20, L.stack[ra], ltm.TMS.TM_SHL);\n          }\n\n          break;\n        }\n\n      case OP_SHR:\n        {\n          var _op21 = RKB(L, base, k, i);\n\n          var _op22 = RKC(L, base, k, i);\n\n          var _numberop21 = void 0,\n              _numberop22 = void 0;\n\n          if ((_numberop21 = tointeger(_op21)) !== false && (_numberop22 = tointeger(_op22)) !== false) {\n            L.stack[ra].setivalue(luaV_shiftl(_numberop21, -_numberop22));\n          } else {\n            ltm.luaT_trybinTM(L, _op21, _op22, L.stack[ra], ltm.TMS.TM_SHR);\n          }\n\n          break;\n        }\n\n      case OP_UNM:\n        {\n          var op = L.stack[RB(L, base, i)];\n          var numberop = void 0;\n\n          if (op.ttisinteger()) {\n            L.stack[ra].setivalue(-op.value | 0);\n          } else if ((numberop = tonumber(op)) !== false) {\n            L.stack[ra].setfltvalue(-numberop);\n          } else {\n            ltm.luaT_trybinTM(L, op, op, L.stack[ra], ltm.TMS.TM_UNM);\n          }\n\n          break;\n        }\n\n      case OP_BNOT:\n        {\n          var _op23 = L.stack[RB(L, base, i)];\n\n          if (_op23.ttisinteger()) {\n            L.stack[ra].setivalue(~_op23.value);\n          } else {\n            ltm.luaT_trybinTM(L, _op23, _op23, L.stack[ra], ltm.TMS.TM_BNOT);\n          }\n\n          break;\n        }\n\n      case OP_NOT:\n        {\n          var _op24 = L.stack[RB(L, base, i)];\n          L.stack[ra].setbvalue(_op24.l_isfalse());\n          break;\n        }\n\n      case OP_LEN:\n        {\n          luaV_objlen(L, L.stack[ra], L.stack[RB(L, base, i)]);\n          break;\n        }\n\n      case OP_CONCAT:\n        {\n          var _b = i.B;\n          var c = i.C;\n          L.top = base + c + 1;\n          /* mark the end of concat operands */\n\n          luaV_concat(L, c - _b + 1);\n\n          var _rb3 = base + _b;\n\n          lobject.setobjs2s(L, ra, _rb3);\n          ldo.adjust_top(L, ci.top);\n          /* restore top */\n\n          break;\n        }\n\n      case OP_JMP:\n        {\n          dojump(L, ci, i, 0);\n          break;\n        }\n\n      case OP_EQ:\n        {\n          if (luaV_equalobj(L, RKB(L, base, k, i), RKC(L, base, k, i)) !== i.A) ci.l_savedpc++;else donextjump(L, ci);\n          break;\n        }\n\n      case OP_LT:\n        {\n          if (luaV_lessthan(L, RKB(L, base, k, i), RKC(L, base, k, i)) !== i.A) ci.l_savedpc++;else donextjump(L, ci);\n          break;\n        }\n\n      case OP_LE:\n        {\n          if (luaV_lessequal(L, RKB(L, base, k, i), RKC(L, base, k, i)) !== i.A) ci.l_savedpc++;else donextjump(L, ci);\n          break;\n        }\n\n      case OP_TEST:\n        {\n          if (i.C ? L.stack[ra].l_isfalse() : !L.stack[ra].l_isfalse()) ci.l_savedpc++;else donextjump(L, ci);\n          break;\n        }\n\n      case OP_TESTSET:\n        {\n          var rbIdx = RB(L, base, i);\n          var _rb4 = L.stack[rbIdx];\n          if (i.C ? _rb4.l_isfalse() : !_rb4.l_isfalse()) ci.l_savedpc++;else {\n            lobject.setobjs2s(L, ra, rbIdx);\n            donextjump(L, ci);\n          }\n          break;\n        }\n\n      case OP_CALL:\n        {\n          var _b2 = i.B;\n          var nresults = i.C - 1;\n          if (_b2 !== 0) ldo.adjust_top(L, ra + _b2);\n          /* else previous instruction set top */\n\n          if (ldo.luaD_precall(L, ra, nresults)) {\n            if (nresults >= 0) ldo.adjust_top(L, ci.top);\n            /* adjust results */\n          } else {\n            ci = L.ci;\n            continue newframe;\n          }\n\n          break;\n        }\n\n      case OP_TAILCALL:\n        {\n          var _b3 = i.B;\n          if (_b3 !== 0) ldo.adjust_top(L, ra + _b3);\n          /* else previous instruction set top */\n\n          if (ldo.luaD_precall(L, ra, LUA_MULTRET)) {// JS function\n          } else {\n            /* tail call: put called frame (n) in place of caller one (o) */\n            var nci = L.ci;\n            var oci = nci.previous;\n            var nfunc = nci.func;\n            var nfuncOff = nci.funcOff;\n            var ofuncOff = oci.funcOff;\n            var lim = nci.l_base + nfunc.value.p.numparams;\n            if (cl.p.p.length > 0) lfunc.luaF_close(L, oci.l_base);\n\n            for (var aux = 0; nfuncOff + aux < lim; aux++) {\n              lobject.setobjs2s(L, ofuncOff + aux, nfuncOff + aux);\n            }\n\n            oci.l_base = ofuncOff + (nci.l_base - nfuncOff);\n            oci.top = ofuncOff + (L.top - nfuncOff);\n            ldo.adjust_top(L, oci.top);\n            /* correct top */\n\n            oci.l_code = nci.l_code;\n            oci.l_savedpc = nci.l_savedpc;\n            oci.callstatus |= lstate.CIST_TAIL;\n            oci.next = null;\n            ci = L.ci = oci;\n            lua_assert(L.top === oci.l_base + L.stack[ofuncOff].value.p.maxstacksize);\n            continue newframe;\n          }\n\n          break;\n        }\n\n      case OP_RETURN:\n        {\n          if (cl.p.p.length > 0) lfunc.luaF_close(L, base);\n\n          var _b4 = ldo.luaD_poscall(L, ci, ra, i.B !== 0 ? i.B - 1 : L.top - ra);\n\n          if (ci.callstatus & lstate.CIST_FRESH) return;\n          /* external invocation: return */\n\n          /* invocation via reentry: continue execution */\n\n          ci = L.ci;\n          if (_b4) ldo.adjust_top(L, ci.top);\n          lua_assert(ci.callstatus & lstate.CIST_LUA);\n          lua_assert(ci.l_code[ci.l_savedpc - 1].opcode === OP_CALL);\n          continue newframe;\n        }\n\n      case OP_FORLOOP:\n        {\n          if (L.stack[ra].ttisinteger()) {\n            /* integer loop? */\n            var step = L.stack[ra + 2].value;\n            var idx = L.stack[ra].value + step | 0;\n            var limit = L.stack[ra + 1].value;\n\n            if (0 < step ? idx <= limit : limit <= idx) {\n              ci.l_savedpc += i.sBx;\n              L.stack[ra].chgivalue(idx);\n              /* update internal index... */\n\n              L.stack[ra + 3].setivalue(idx);\n            }\n          } else {\n            /* floating loop */\n            var _step = L.stack[ra + 2].value;\n\n            var _idx = L.stack[ra].value + _step;\n\n            var _limit = L.stack[ra + 1].value;\n\n            if (0 < _step ? _idx <= _limit : _limit <= _idx) {\n              ci.l_savedpc += i.sBx;\n              L.stack[ra].chgfltvalue(_idx);\n              /* update internal index... */\n\n              L.stack[ra + 3].setfltvalue(_idx);\n            }\n          }\n\n          break;\n        }\n\n      case OP_FORPREP:\n        {\n          var init = L.stack[ra];\n          var plimit = L.stack[ra + 1];\n          var pstep = L.stack[ra + 2];\n          var forlim = void 0;\n\n          if (init.ttisinteger() && pstep.ttisinteger() && (forlim = forlimit(plimit, pstep.value))) {\n            /* all values are integer */\n            var initv = forlim.stopnow ? 0 : init.value;\n            plimit.value = forlim.ilimit;\n            init.value = initv - pstep.value | 0;\n          } else {\n            /* try making all values floats */\n            var nlimit = void 0,\n                nstep = void 0,\n                ninit = void 0;\n            if ((nlimit = tonumber(plimit)) === false) ldebug.luaG_runerror(L, to_luastring(\"'for' limit must be a number\", true));\n            L.stack[ra + 1].setfltvalue(nlimit);\n            if ((nstep = tonumber(pstep)) === false) ldebug.luaG_runerror(L, to_luastring(\"'for' step must be a number\", true));\n            L.stack[ra + 2].setfltvalue(nstep);\n            if ((ninit = tonumber(init)) === false) ldebug.luaG_runerror(L, to_luastring(\"'for' initial value must be a number\", true));\n            L.stack[ra].setfltvalue(ninit - nstep);\n          }\n\n          ci.l_savedpc += i.sBx;\n          break;\n        }\n\n      case OP_TFORCALL:\n        {\n          var cb = ra + 3;\n          /* call base */\n\n          lobject.setobjs2s(L, cb + 2, ra + 2);\n          lobject.setobjs2s(L, cb + 1, ra + 1);\n          lobject.setobjs2s(L, cb, ra);\n          ldo.adjust_top(L, cb + 3);\n          /* func. + 2 args (state and index) */\n\n          ldo.luaD_call(L, cb, i.C);\n          ldo.adjust_top(L, ci.top);\n          /* go straight to OP_TFORLOOP */\n\n          i = ci.l_code[ci.l_savedpc++];\n          ra = RA(L, base, i);\n          lua_assert(i.opcode === OP_TFORLOOP);\n        }\n\n      /* fall through */\n\n      case OP_TFORLOOP:\n        {\n          if (!L.stack[ra + 1].ttisnil()) {\n            /* continue loop? */\n            lobject.setobjs2s(L, ra, ra + 1);\n            /* save control variable */\n\n            ci.l_savedpc += i.sBx;\n            /* jump back */\n          }\n\n          break;\n        }\n\n      case OP_SETLIST:\n        {\n          var n = i.B;\n          var _c = i.C;\n          if (n === 0) n = L.top - ra - 1;\n\n          if (_c === 0) {\n            lua_assert(ci.l_code[ci.l_savedpc].opcode === OP_EXTRAARG);\n            _c = ci.l_code[ci.l_savedpc++].Ax;\n          }\n\n          var h = L.stack[ra].value;\n          var last = (_c - 1) * LFIELDS_PER_FLUSH + n;\n\n          for (; n > 0; n--) {\n            ltable.luaH_setint(h, last--, L.stack[ra + n]);\n          }\n\n          ldo.adjust_top(L, ci.top);\n          /* correct top (in case of previous open call) */\n\n          break;\n        }\n\n      case OP_CLOSURE:\n        {\n          var p = cl.p.p[i.Bx];\n          var ncl = getcached(p, cl.upvals, L.stack, base);\n          /* cached closure */\n\n          if (ncl === null)\n            /* no match? */\n            pushclosure(L, p, cl.upvals, base, ra);\n            /* create a new one */\n          else L.stack[ra].setclLvalue(ncl);\n          break;\n        }\n\n      case OP_VARARG:\n        {\n          var _b5 = i.B - 1;\n\n          var _n = base - ci.funcOff - cl.p.numparams - 1;\n\n          var _j = void 0;\n\n          if (_n < 0)\n            /* less arguments than parameters? */\n            _n = 0;\n          /* no vararg arguments */\n\n          if (_b5 < 0) {\n            _b5 = _n;\n            /* get all var. arguments */\n\n            ldo.luaD_checkstack(L, _n);\n            ldo.adjust_top(L, ra + _n);\n          }\n\n          for (_j = 0; _j < _b5 && _j < _n; _j++) {\n            lobject.setobjs2s(L, ra + _j, base - _n + _j);\n          }\n\n          for (; _j < _b5; _j++) {\n            /* complete required results with nil */\n            L.stack[ra + _j].setnilvalue();\n          }\n\n          break;\n        }\n\n      case OP_EXTRAARG:\n        {\n          throw Error(\"invalid opcode\");\n        }\n    }\n  }\n};\n\nvar dojump = function dojump(L, ci, i, e) {\n  var a = i.A;\n  if (a !== 0) lfunc.luaF_close(L, ci.l_base + a - 1);\n  ci.l_savedpc += i.sBx + e;\n};\n\nvar donextjump = function donextjump(L, ci) {\n  dojump(L, ci, ci.l_code[ci.l_savedpc], 1);\n};\n\nvar luaV_lessthan = function luaV_lessthan(L, l, r) {\n  if (l.ttisnumber() && r.ttisnumber()) return LTnum(l, r) ? 1 : 0;else if (l.ttisstring() && r.ttisstring()) return l_strcmp(l.tsvalue(), r.tsvalue()) < 0 ? 1 : 0;else {\n    var res = ltm.luaT_callorderTM(L, l, r, ltm.TMS.TM_LT);\n    if (res === null) ldebug.luaG_ordererror(L, l, r);\n    return res ? 1 : 0;\n  }\n};\n\nvar luaV_lessequal = function luaV_lessequal(L, l, r) {\n  var res;\n  if (l.ttisnumber() && r.ttisnumber()) return LEnum(l, r) ? 1 : 0;else if (l.ttisstring() && r.ttisstring()) return l_strcmp(l.tsvalue(), r.tsvalue()) <= 0 ? 1 : 0;else {\n    res = ltm.luaT_callorderTM(L, l, r, ltm.TMS.TM_LE);\n    if (res !== null) return res ? 1 : 0;\n  }\n  /* try 'lt': */\n\n  L.ci.callstatus |= lstate.CIST_LEQ;\n  /* mark it is doing 'lt' for 'le' */\n\n  res = ltm.luaT_callorderTM(L, r, l, ltm.TMS.TM_LT);\n  L.ci.callstatus ^= lstate.CIST_LEQ;\n  /* clear mark */\n\n  if (res === null) ldebug.luaG_ordererror(L, l, r);\n  return res ? 0 : 1;\n  /* result is negated */\n};\n\nvar luaV_equalobj = function luaV_equalobj(L, t1, t2) {\n  if (t1.ttype() !== t2.ttype()) {\n    /* not the same variant? */\n    if (t1.ttnov() !== t2.ttnov() || t1.ttnov() !== LUA_TNUMBER) return 0;\n    /* only numbers can be equal with different variants */\n    else {\n        /* two numbers with different variants */\n\n        /* OPTIMIZATION: instead of calling luaV_tointeger we can just let JS do the comparison */\n        return t1.value === t2.value ? 1 : 0;\n      }\n  }\n\n  var tm;\n  /* values have same type and same variant */\n\n  switch (t1.ttype()) {\n    case LUA_TNIL:\n      return 1;\n\n    case LUA_TBOOLEAN:\n      return t1.value == t2.value ? 1 : 0;\n    // Might be 1 or true\n\n    case LUA_TLIGHTUSERDATA:\n    case LUA_TNUMINT:\n    case LUA_TNUMFLT:\n    case LUA_TLCF:\n      return t1.value === t2.value ? 1 : 0;\n\n    case LUA_TSHRSTR:\n    case LUA_TLNGSTR:\n      {\n        return luaS_eqlngstr(t1.tsvalue(), t2.tsvalue()) ? 1 : 0;\n      }\n\n    case LUA_TUSERDATA:\n    case LUA_TTABLE:\n      if (t1.value === t2.value) return 1;else if (L === null) return 0;\n      tm = ltm.fasttm(L, t1.value.metatable, ltm.TMS.TM_EQ);\n      if (tm === null) tm = ltm.fasttm(L, t2.value.metatable, ltm.TMS.TM_EQ);\n      break;\n\n    default:\n      return t1.value === t2.value ? 1 : 0;\n  }\n\n  if (tm === null)\n    /* no TM? */\n    return 0;\n  var tv = new lobject.TValue();\n  /* doesn't use the stack */\n\n  ltm.luaT_callTM(L, tm, t1, t2, tv, 1);\n  return tv.l_isfalse() ? 0 : 1;\n};\n\nvar luaV_rawequalobj = function luaV_rawequalobj(t1, t2) {\n  return luaV_equalobj(null, t1, t2);\n};\n\nvar forlimit = function forlimit(obj, step) {\n  var stopnow = false;\n  var ilimit = luaV_tointeger(obj, step < 0 ? 2 : 1);\n\n  if (ilimit === false) {\n    var n = tonumber(obj);\n    if (n === false) return false;\n\n    if (0 < n) {\n      ilimit = LUA_MAXINTEGER;\n      if (step < 0) stopnow = true;\n    } else {\n      ilimit = LUA_MININTEGER;\n      if (step >= 0) stopnow = true;\n    }\n  }\n\n  return {\n    stopnow: stopnow,\n    ilimit: ilimit\n  };\n};\n/*\n** try to convert a value to an integer, rounding according to 'mode':\n** mode === 0: accepts only integral values\n** mode === 1: takes the floor of the number\n** mode === 2: takes the ceil of the number\n*/\n\n\nvar luaV_tointeger = function luaV_tointeger(obj, mode) {\n  if (obj.ttisfloat()) {\n    var n = obj.value;\n    var f = Math.floor(n);\n\n    if (n !== f) {\n      /* not an integral value? */\n      if (mode === 0) return false;\n      /* fails if mode demands integral value */\n      else if (mode > 1)\n          /* needs ceil? */\n          f += 1;\n      /* convert floor to ceil (remember: n !== f) */\n    }\n\n    return lua_numbertointeger(f);\n  } else if (obj.ttisinteger()) {\n    return obj.value;\n  } else if (cvt2num(obj)) {\n    var v = new lobject.TValue();\n    if (lobject.luaO_str2num(obj.svalue(), v) === obj.vslen() + 1) return luaV_tointeger(v, mode);\n  }\n\n  return false;\n};\n\nvar tointeger = function tointeger(o) {\n  return o.ttisinteger() ? o.value : luaV_tointeger(o, 0);\n};\n\nvar tonumber = function tonumber(o) {\n  if (o.ttnov() === LUA_TNUMBER) return o.value;\n\n  if (cvt2num(o)) {\n    /* string convertible to number? */\n    var v = new lobject.TValue();\n    if (lobject.luaO_str2num(o.svalue(), v) === o.vslen() + 1) return v.value;\n  }\n\n  return false;\n};\n/*\n** Return 'l < r', for numbers.\n** As fengari uses javascript numbers for both floats and integers and has\n** correct semantics, we can just compare values.\n*/\n\n\nvar LTnum = function LTnum(l, r) {\n  return l.value < r.value;\n};\n/*\n** Return 'l <= r', for numbers.\n*/\n\n\nvar LEnum = function LEnum(l, r) {\n  return l.value <= r.value;\n};\n/*\n** Compare two strings 'ls' x 'rs', returning an integer smaller-equal-\n** -larger than zero if 'ls' is smaller-equal-larger than 'rs'.\n*/\n\n\nvar l_strcmp = function l_strcmp(ls, rs) {\n  var l = luaS_hashlongstr(ls);\n  var r = luaS_hashlongstr(rs);\n  /* In fengari we assume string hash has same collation as byte values */\n\n  if (l === r) return 0;else if (l < r) return -1;else return 1;\n};\n/*\n** Main operation 'ra' = #rb'.\n*/\n\n\nvar luaV_objlen = function luaV_objlen(L, ra, rb) {\n  var tm;\n\n  switch (rb.ttype()) {\n    case LUA_TTABLE:\n      {\n        var h = rb.value;\n        tm = ltm.fasttm(L, h.metatable, ltm.TMS.TM_LEN);\n        if (tm !== null) break;\n        /* metamethod? break switch to call it */\n\n        ra.setivalue(ltable.luaH_getn(h));\n        /* else primitive len */\n\n        return;\n      }\n\n    case LUA_TSHRSTR:\n    case LUA_TLNGSTR:\n      ra.setivalue(rb.vslen());\n      return;\n\n    default:\n      {\n        tm = ltm.luaT_gettmbyobj(L, rb, ltm.TMS.TM_LEN);\n        if (tm.ttisnil()) ldebug.luaG_typeerror(L, rb, to_luastring(\"get length of\", true));\n        break;\n      }\n  }\n\n  ltm.luaT_callTM(L, tm, rb, rb, ra, 1);\n};\n/* Shim taken from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul */\n\n\nvar luaV_imul = Math.imul || function (a, b) {\n  var aHi = a >>> 16 & 0xffff;\n  var aLo = a & 0xffff;\n  var bHi = b >>> 16 & 0xffff;\n  var bLo = b & 0xffff;\n  /*\n  ** the shift by 0 fixes the sign on the high part\n  ** the final |0 converts the unsigned value into a signed value\n  */\n\n  return aLo * bLo + (aHi * bLo + aLo * bHi << 16 >>> 0) | 0;\n};\n\nvar luaV_div = function luaV_div(L, m, n) {\n  if (n === 0) ldebug.luaG_runerror(L, to_luastring(\"attempt to divide by zero\"));\n  return Math.floor(m / n) | 0;\n}; // % semantic on negative numbers is different in js\n\n\nvar luaV_mod = function luaV_mod(L, m, n) {\n  if (n === 0) ldebug.luaG_runerror(L, to_luastring(\"attempt to perform 'n%%0'\"));\n  return m - Math.floor(m / n) * n | 0;\n};\n\nvar NBITS = 32;\n\nvar luaV_shiftl = function luaV_shiftl(x, y) {\n  if (y < 0) {\n    /* shift right? */\n    if (y <= -NBITS) return 0;else return x >>> -y;\n  } else {\n    /* shift left */\n    if (y >= NBITS) return 0;else return x << y;\n  }\n};\n/*\n** check whether cached closure in prototype 'p' may be reused, that is,\n** whether there is a cached closure with the same upvalues needed by\n** new closure to be created.\n*/\n\n\nvar getcached = function getcached(p, encup, stack, base) {\n  var c = p.cache;\n\n  if (c !== null) {\n    /* is there a cached closure? */\n    var uv = p.upvalues;\n    var nup = uv.length;\n\n    for (var i = 0; i < nup; i++) {\n      /* check whether it has right upvalues */\n      var v = uv[i].instack ? stack[base + uv[i].idx] : encup[uv[i].idx];\n      if (c.upvals[i] !== v) return null;\n      /* wrong upvalue; cannot reuse closure */\n    }\n  }\n\n  return c;\n  /* return cached closure (or NULL if no cached closure) */\n};\n/*\n** create a new Lua closure, push it in the stack, and initialize\n** its upvalues.\n*/\n\n\nvar pushclosure = function pushclosure(L, p, encup, base, ra) {\n  var nup = p.upvalues.length;\n  var uv = p.upvalues;\n  var ncl = new lobject.LClosure(L, nup);\n  ncl.p = p;\n  L.stack[ra].setclLvalue(ncl);\n\n  for (var i = 0; i < nup; i++) {\n    if (uv[i].instack) ncl.upvals[i] = lfunc.luaF_findupval(L, base + uv[i].idx);else ncl.upvals[i] = encup[uv[i].idx];\n  }\n\n  p.cache = ncl;\n  /* save it on cache for reuse */\n};\n\nvar cvt2str = function cvt2str(o) {\n  return o.ttisnumber();\n};\n\nvar cvt2num = function cvt2num(o) {\n  return o.ttisstring();\n};\n\nvar tostring = function tostring(L, i) {\n  var o = L.stack[i];\n  if (o.ttisstring()) return true;\n\n  if (cvt2str(o)) {\n    lobject.luaO_tostring(L, o);\n    return true;\n  }\n\n  return false;\n};\n\nvar isemptystr = function isemptystr(o) {\n  return o.ttisstring() && o.vslen() === 0;\n};\n/* copy strings in stack from top - n up to top - 1 to buffer */\n\n\nvar copy2buff = function copy2buff(L, top, n, buff) {\n  var tl = 0;\n  /* size already copied */\n\n  do {\n    var tv = L.stack[top - n];\n    var l = tv.vslen();\n    /* length of string being copied */\n\n    var s = tv.svalue();\n    buff.set(s, tl);\n    tl += l;\n  } while (--n > 0);\n};\n/*\n** Main operation for concatenation: concat 'total' values in the stack,\n** from 'L->top - total' up to 'L->top - 1'.\n*/\n\n\nvar luaV_concat = function luaV_concat(L, total) {\n  lua_assert(total >= 2);\n\n  do {\n    var top = L.top;\n    var n = 2;\n    /* number of elements handled in this pass (at least 2) */\n\n    if (!(L.stack[top - 2].ttisstring() || cvt2str(L.stack[top - 2])) || !tostring(L, top - 1)) {\n      ltm.luaT_trybinTM(L, L.stack[top - 2], L.stack[top - 1], L.stack[top - 2], ltm.TMS.TM_CONCAT);\n    } else if (isemptystr(L.stack[top - 1])) {\n      tostring(L, top - 2);\n    } else if (isemptystr(L.stack[top - 2])) {\n      lobject.setobjs2s(L, top - 2, top - 1);\n    } else {\n      /* at least two non-empty string values; get as many as possible */\n      var tl = L.stack[top - 1].vslen();\n      /* collect total length and number of strings */\n\n      for (n = 1; n < total && tostring(L, top - n - 1); n++) {\n        var l = L.stack[top - n - 1].vslen();\n        tl += l;\n      }\n\n      var buff = new Uint8Array(tl);\n      copy2buff(L, top, n, buff);\n      var ts = luaS_bless(L, buff);\n      lobject.setsvalue2s(L, top - n, ts);\n    }\n\n    total -= n - 1;\n    /* got 'n' strings to create 1 new */\n\n    /* popped 'n' strings and pushed one */\n\n    for (; L.top > top - (n - 1);) {\n      delete L.stack[--L.top];\n    }\n  } while (total > 1);\n  /* repeat until only 1 result left */\n\n};\n\nvar MAXTAGLOOP = 2000;\n\nvar luaV_gettable = function luaV_gettable(L, t, key, ra) {\n  for (var loop = 0; loop < MAXTAGLOOP; loop++) {\n    var tm = void 0;\n\n    if (!t.ttistable()) {\n      tm = ltm.luaT_gettmbyobj(L, t, ltm.TMS.TM_INDEX);\n      if (tm.ttisnil()) ldebug.luaG_typeerror(L, t, to_luastring('index', true));\n      /* no metamethod */\n\n      /* else will try the metamethod */\n    } else {\n      var slot = ltable.luaH_get(L, t.value, key);\n\n      if (!slot.ttisnil()) {\n        lobject.setobj2s(L, ra, slot);\n        return;\n      } else {\n        /* 't' is a table */\n        tm = ltm.fasttm(L, t.value.metatable, ltm.TMS.TM_INDEX);\n        /* table's metamethod */\n\n        if (tm === null) {\n          /* no metamethod? */\n          L.stack[ra].setnilvalue();\n          /* result is nil */\n\n          return;\n        }\n      }\n      /* else will try the metamethod */\n\n    }\n\n    if (tm.ttisfunction()) {\n      /* is metamethod a function? */\n      ltm.luaT_callTM(L, tm, t, key, L.stack[ra], 1);\n      /* call it */\n\n      return;\n    }\n\n    t = tm;\n    /* else try to access 'tm[key]' */\n  }\n\n  ldebug.luaG_runerror(L, to_luastring(\"'__index' chain too long; possible loop\", true));\n};\n\nvar settable = function settable(L, t, key, val) {\n  for (var loop = 0; loop < MAXTAGLOOP; loop++) {\n    var tm = void 0;\n\n    if (t.ttistable()) {\n      var h = t.value;\n      /* save 't' table */\n\n      var slot = ltable.luaH_get(L, h, key);\n\n      if (!slot.ttisnil() || (tm = ltm.fasttm(L, h.metatable, ltm.TMS.TM_NEWINDEX)) === null) {\n        ltable.luaH_setfrom(L, h, key, val);\n        ltable.invalidateTMcache(h);\n        return;\n      }\n      /* else will try the metamethod */\n\n    } else {\n      /* not a table; check metamethod */\n      if ((tm = ltm.luaT_gettmbyobj(L, t, ltm.TMS.TM_NEWINDEX)).ttisnil()) ldebug.luaG_typeerror(L, t, to_luastring('index', true));\n    }\n    /* try the metamethod */\n\n\n    if (tm.ttisfunction()) {\n      ltm.luaT_callTM(L, tm, t, key, val, 0);\n      return;\n    }\n\n    t = tm;\n    /* else repeat assignment over 'tm' */\n  }\n\n  ldebug.luaG_runerror(L, to_luastring(\"'__newindex' chain too long; possible loop\", true));\n};\n\nmodule.exports.cvt2str = cvt2str;\nmodule.exports.cvt2num = cvt2num;\nmodule.exports.luaV_gettable = luaV_gettable;\nmodule.exports.luaV_concat = luaV_concat;\nmodule.exports.luaV_div = luaV_div;\nmodule.exports.luaV_equalobj = luaV_equalobj;\nmodule.exports.luaV_execute = luaV_execute;\nmodule.exports.luaV_finishOp = luaV_finishOp;\nmodule.exports.luaV_imul = luaV_imul;\nmodule.exports.luaV_lessequal = luaV_lessequal;\nmodule.exports.luaV_lessthan = luaV_lessthan;\nmodule.exports.luaV_mod = luaV_mod;\nmodule.exports.luaV_objlen = luaV_objlen;\nmodule.exports.luaV_rawequalobj = luaV_rawequalobj;\nmodule.exports.luaV_shiftl = luaV_shiftl;\nmodule.exports.luaV_tointeger = luaV_tointeger;\nmodule.exports.settable = settable;\nmodule.exports.tointeger = tointeger;\nmodule.exports.tonumber = tonumber;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///15\n")},function(module,exports,__webpack_require__){"use strict";eval('\n\nvar OpCodes = ["MOVE", "LOADK", "LOADKX", "LOADBOOL", "LOADNIL", "GETUPVAL", "GETTABUP", "GETTABLE", "SETTABUP", "SETUPVAL", "SETTABLE", "NEWTABLE", "SELF", "ADD", "SUB", "MUL", "MOD", "POW", "DIV", "IDIV", "BAND", "BOR", "BXOR", "SHL", "SHR", "UNM", "BNOT", "NOT", "LEN", "CONCAT", "JMP", "EQ", "LT", "LE", "TEST", "TESTSET", "CALL", "TAILCALL", "RETURN", "FORLOOP", "FORPREP", "TFORCALL", "TFORLOOP", "SETLIST", "CLOSURE", "VARARG", "EXTRAARG"];\nvar OpCodesI = {\n  OP_MOVE: 0,\n  OP_LOADK: 1,\n  OP_LOADKX: 2,\n  OP_LOADBOOL: 3,\n  OP_LOADNIL: 4,\n  OP_GETUPVAL: 5,\n  OP_GETTABUP: 6,\n  OP_GETTABLE: 7,\n  OP_SETTABUP: 8,\n  OP_SETUPVAL: 9,\n  OP_SETTABLE: 10,\n  OP_NEWTABLE: 11,\n  OP_SELF: 12,\n  OP_ADD: 13,\n  OP_SUB: 14,\n  OP_MUL: 15,\n  OP_MOD: 16,\n  OP_POW: 17,\n  OP_DIV: 18,\n  OP_IDIV: 19,\n  OP_BAND: 20,\n  OP_BOR: 21,\n  OP_BXOR: 22,\n  OP_SHL: 23,\n  OP_SHR: 24,\n  OP_UNM: 25,\n  OP_BNOT: 26,\n  OP_NOT: 27,\n  OP_LEN: 28,\n  OP_CONCAT: 29,\n  OP_JMP: 30,\n  OP_EQ: 31,\n  OP_LT: 32,\n  OP_LE: 33,\n  OP_TEST: 34,\n  OP_TESTSET: 35,\n  OP_CALL: 36,\n  OP_TAILCALL: 37,\n  OP_RETURN: 38,\n  OP_FORLOOP: 39,\n  OP_FORPREP: 40,\n  OP_TFORCALL: 41,\n  OP_TFORLOOP: 42,\n  OP_SETLIST: 43,\n  OP_CLOSURE: 44,\n  OP_VARARG: 45,\n  OP_EXTRAARG: 46\n};\n/*\n** masks for instruction properties. The format is:\n** bits 0-1: op mode\n** bits 2-3: C arg mode\n** bits 4-5: B arg mode\n** bit 6: instruction set register A\n** bit 7: operator is a test (next instruction must be a jump)\n*/\n\nvar OpArgN = 0;\n/* argument is not used */\n\nvar OpArgU = 1;\n/* argument is used */\n\nvar OpArgR = 2;\n/* argument is a register or a jump offset */\n\nvar OpArgK = 3;\n/* argument is a constant or register/constant */\n\n/* basic instruction format */\n\nvar iABC = 0;\nvar iABx = 1;\nvar iAsBx = 2;\nvar iAx = 3;\nvar luaP_opmodes = [0 << 7 | 1 << 6 | OpArgR << 4 | OpArgN << 2 | iABC,\n/* OP_MOVE */\n0 << 7 | 1 << 6 | OpArgK << 4 | OpArgN << 2 | iABx,\n/* OP_LOADK */\n0 << 7 | 1 << 6 | OpArgN << 4 | OpArgN << 2 | iABx,\n/* OP_LOADKX */\n0 << 7 | 1 << 6 | OpArgU << 4 | OpArgU << 2 | iABC,\n/* OP_LOADBOOL */\n0 << 7 | 1 << 6 | OpArgU << 4 | OpArgN << 2 | iABC,\n/* OP_LOADNIL */\n0 << 7 | 1 << 6 | OpArgU << 4 | OpArgN << 2 | iABC,\n/* OP_GETUPVAL */\n0 << 7 | 1 << 6 | OpArgU << 4 | OpArgK << 2 | iABC,\n/* OP_GETTABUP */\n0 << 7 | 1 << 6 | OpArgR << 4 | OpArgK << 2 | iABC,\n/* OP_GETTABLE */\n0 << 7 | 0 << 6 | OpArgK << 4 | OpArgK << 2 | iABC,\n/* OP_SETTABUP */\n0 << 7 | 0 << 6 | OpArgU << 4 | OpArgN << 2 | iABC,\n/* OP_SETUPVAL */\n0 << 7 | 0 << 6 | OpArgK << 4 | OpArgK << 2 | iABC,\n/* OP_SETTABLE */\n0 << 7 | 1 << 6 | OpArgU << 4 | OpArgU << 2 | iABC,\n/* OP_NEWTABLE */\n0 << 7 | 1 << 6 | OpArgR << 4 | OpArgK << 2 | iABC,\n/* OP_SELF */\n0 << 7 | 1 << 6 | OpArgK << 4 | OpArgK << 2 | iABC,\n/* OP_ADD */\n0 << 7 | 1 << 6 | OpArgK << 4 | OpArgK << 2 | iABC,\n/* OP_SUB */\n0 << 7 | 1 << 6 | OpArgK << 4 | OpArgK << 2 | iABC,\n/* OP_MUL */\n0 << 7 | 1 << 6 | OpArgK << 4 | OpArgK << 2 | iABC,\n/* OP_MOD */\n0 << 7 | 1 << 6 | OpArgK << 4 | OpArgK << 2 | iABC,\n/* OP_POW */\n0 << 7 | 1 << 6 | OpArgK << 4 | OpArgK << 2 | iABC,\n/* OP_DIV */\n0 << 7 | 1 << 6 | OpArgK << 4 | OpArgK << 2 | iABC,\n/* OP_IDIV */\n0 << 7 | 1 << 6 | OpArgK << 4 | OpArgK << 2 | iABC,\n/* OP_BAND */\n0 << 7 | 1 << 6 | OpArgK << 4 | OpArgK << 2 | iABC,\n/* OP_BOR */\n0 << 7 | 1 << 6 | OpArgK << 4 | OpArgK << 2 | iABC,\n/* OP_BXOR */\n0 << 7 | 1 << 6 | OpArgK << 4 | OpArgK << 2 | iABC,\n/* OP_SHL */\n0 << 7 | 1 << 6 | OpArgK << 4 | OpArgK << 2 | iABC,\n/* OP_SHR */\n0 << 7 | 1 << 6 | OpArgR << 4 | OpArgN << 2 | iABC,\n/* OP_UNM */\n0 << 7 | 1 << 6 | OpArgR << 4 | OpArgN << 2 | iABC,\n/* OP_BNOT */\n0 << 7 | 1 << 6 | OpArgR << 4 | OpArgN << 2 | iABC,\n/* OP_NOT */\n0 << 7 | 1 << 6 | OpArgR << 4 | OpArgN << 2 | iABC,\n/* OP_LEN */\n0 << 7 | 1 << 6 | OpArgR << 4 | OpArgR << 2 | iABC,\n/* OP_CONCAT */\n0 << 7 | 0 << 6 | OpArgR << 4 | OpArgN << 2 | iAsBx,\n/* OP_JMP */\n1 << 7 | 0 << 6 | OpArgK << 4 | OpArgK << 2 | iABC,\n/* OP_EQ */\n1 << 7 | 0 << 6 | OpArgK << 4 | OpArgK << 2 | iABC,\n/* OP_LT */\n1 << 7 | 0 << 6 | OpArgK << 4 | OpArgK << 2 | iABC,\n/* OP_LE */\n1 << 7 | 0 << 6 | OpArgN << 4 | OpArgU << 2 | iABC,\n/* OP_TEST */\n1 << 7 | 1 << 6 | OpArgR << 4 | OpArgU << 2 | iABC,\n/* OP_TESTSET */\n0 << 7 | 1 << 6 | OpArgU << 4 | OpArgU << 2 | iABC,\n/* OP_CALL */\n0 << 7 | 1 << 6 | OpArgU << 4 | OpArgU << 2 | iABC,\n/* OP_TAILCALL */\n0 << 7 | 0 << 6 | OpArgU << 4 | OpArgN << 2 | iABC,\n/* OP_RETURN */\n0 << 7 | 1 << 6 | OpArgR << 4 | OpArgN << 2 | iAsBx,\n/* OP_FORLOOP */\n0 << 7 | 1 << 6 | OpArgR << 4 | OpArgN << 2 | iAsBx,\n/* OP_FORPREP */\n0 << 7 | 0 << 6 | OpArgN << 4 | OpArgU << 2 | iABC,\n/* OP_TFORCALL */\n0 << 7 | 1 << 6 | OpArgR << 4 | OpArgN << 2 | iAsBx,\n/* OP_TFORLOOP */\n0 << 7 | 0 << 6 | OpArgU << 4 | OpArgU << 2 | iABC,\n/* OP_SETLIST */\n0 << 7 | 1 << 6 | OpArgU << 4 | OpArgN << 2 | iABx,\n/* OP_CLOSURE */\n0 << 7 | 1 << 6 | OpArgU << 4 | OpArgN << 2 | iABC,\n/* OP_VARARG */\n0 << 7 | 0 << 6 | OpArgU << 4 | OpArgU << 2 | iAx\n/* OP_EXTRAARG */\n];\n\nvar getOpMode = function getOpMode(m) {\n  return luaP_opmodes[m] & 3;\n};\n\nvar getBMode = function getBMode(m) {\n  return luaP_opmodes[m] >> 4 & 3;\n};\n\nvar getCMode = function getCMode(m) {\n  return luaP_opmodes[m] >> 2 & 3;\n};\n\nvar testAMode = function testAMode(m) {\n  return luaP_opmodes[m] & 1 << 6;\n};\n\nvar testTMode = function testTMode(m) {\n  return luaP_opmodes[m] & 1 << 7;\n};\n\nvar SIZE_C = 9;\nvar SIZE_B = 9;\nvar SIZE_Bx = SIZE_C + SIZE_B;\nvar SIZE_A = 8;\nvar SIZE_Ax = SIZE_C + SIZE_B + SIZE_A;\nvar SIZE_OP = 6;\nvar POS_OP = 0;\nvar POS_A = POS_OP + SIZE_OP;\nvar POS_C = POS_A + SIZE_A;\nvar POS_B = POS_C + SIZE_C;\nvar POS_Bx = POS_C;\nvar POS_Ax = POS_A;\nvar MAXARG_Bx = (1 << SIZE_Bx) - 1;\nvar MAXARG_sBx = MAXARG_Bx >> 1;\n/* \'sBx\' is signed */\n\nvar MAXARG_Ax = (1 << SIZE_Ax) - 1;\nvar MAXARG_A = (1 << SIZE_A) - 1;\nvar MAXARG_B = (1 << SIZE_B) - 1;\nvar MAXARG_C = (1 << SIZE_C) - 1;\n/* this bit 1 means constant (0 means register) */\n\nvar BITRK = 1 << SIZE_B - 1;\nvar MAXINDEXRK = BITRK - 1;\n/*\n** invalid register that fits in 8 bits\n*/\n\nvar NO_REG = MAXARG_A;\n/* test whether value is a constant */\n\nvar ISK = function ISK(x) {\n  return x & BITRK;\n};\n/* gets the index of the constant */\n\n\nvar INDEXK = function INDEXK(r) {\n  return r & ~BITRK;\n};\n/* code a constant index as a RK value */\n\n\nvar RKASK = function RKASK(x) {\n  return x | BITRK;\n};\n/* creates a mask with \'n\' 1 bits at position \'p\' */\n\n\nvar MASK1 = function MASK1(n, p) {\n  return ~(~0 << n) << p;\n};\n/* creates a mask with \'n\' 0 bits at position \'p\' */\n\n\nvar MASK0 = function MASK0(n, p) {\n  return ~MASK1(n, p);\n};\n\nvar GET_OPCODE = function GET_OPCODE(i) {\n  return i.opcode;\n};\n\nvar SET_OPCODE = function SET_OPCODE(i, o) {\n  i.code = i.code & MASK0(SIZE_OP, POS_OP) | o << POS_OP & MASK1(SIZE_OP, POS_OP);\n  return fullins(i);\n};\n\nvar setarg = function setarg(i, v, pos, size) {\n  i.code = i.code & MASK0(size, pos) | v << pos & MASK1(size, pos);\n  return fullins(i);\n};\n\nvar GETARG_A = function GETARG_A(i) {\n  return i.A;\n};\n\nvar SETARG_A = function SETARG_A(i, v) {\n  return setarg(i, v, POS_A, SIZE_A);\n};\n\nvar GETARG_B = function GETARG_B(i) {\n  return i.B;\n};\n\nvar SETARG_B = function SETARG_B(i, v) {\n  return setarg(i, v, POS_B, SIZE_B);\n};\n\nvar GETARG_C = function GETARG_C(i) {\n  return i.C;\n};\n\nvar SETARG_C = function SETARG_C(i, v) {\n  return setarg(i, v, POS_C, SIZE_C);\n};\n\nvar GETARG_Bx = function GETARG_Bx(i) {\n  return i.Bx;\n};\n\nvar SETARG_Bx = function SETARG_Bx(i, v) {\n  return setarg(i, v, POS_Bx, SIZE_Bx);\n};\n\nvar GETARG_Ax = function GETARG_Ax(i) {\n  return i.Ax;\n};\n\nvar SETARG_Ax = function SETARG_Ax(i, v) {\n  return setarg(i, v, POS_Ax, SIZE_Ax);\n};\n\nvar GETARG_sBx = function GETARG_sBx(i) {\n  return i.sBx;\n};\n\nvar SETARG_sBx = function SETARG_sBx(i, b) {\n  return SETARG_Bx(i, b + MAXARG_sBx);\n};\n/*\n** Pre-calculate all possible part of the instruction\n*/\n\n\nvar fullins = function fullins(ins) {\n  if (typeof ins === "number") {\n    return {\n      code: ins,\n      opcode: ins >> POS_OP & MASK1(SIZE_OP, 0),\n      A: ins >> POS_A & MASK1(SIZE_A, 0),\n      B: ins >> POS_B & MASK1(SIZE_B, 0),\n      C: ins >> POS_C & MASK1(SIZE_C, 0),\n      Bx: ins >> POS_Bx & MASK1(SIZE_Bx, 0),\n      Ax: ins >> POS_Ax & MASK1(SIZE_Ax, 0),\n      sBx: (ins >> POS_Bx & MASK1(SIZE_Bx, 0)) - MAXARG_sBx\n    };\n  } else {\n    var i = ins.code;\n    ins.opcode = i >> POS_OP & MASK1(SIZE_OP, 0);\n    ins.A = i >> POS_A & MASK1(SIZE_A, 0);\n    ins.B = i >> POS_B & MASK1(SIZE_B, 0);\n    ins.C = i >> POS_C & MASK1(SIZE_C, 0);\n    ins.Bx = i >> POS_Bx & MASK1(SIZE_Bx, 0);\n    ins.Ax = i >> POS_Ax & MASK1(SIZE_Ax, 0);\n    ins.sBx = (i >> POS_Bx & MASK1(SIZE_Bx, 0)) - MAXARG_sBx;\n    return ins;\n  }\n};\n\nvar CREATE_ABC = function CREATE_ABC(o, a, b, c) {\n  return fullins(o << POS_OP | a << POS_A | b << POS_B | c << POS_C);\n};\n\nvar CREATE_ABx = function CREATE_ABx(o, a, bc) {\n  return fullins(o << POS_OP | a << POS_A | bc << POS_Bx);\n};\n\nvar CREATE_Ax = function CREATE_Ax(o, a) {\n  return fullins(o << POS_OP | a << POS_Ax);\n};\n/* number of list items to accumulate before a SETLIST instruction */\n\n\nvar LFIELDS_PER_FLUSH = 50;\nmodule.exports.BITRK = BITRK;\nmodule.exports.CREATE_ABC = CREATE_ABC;\nmodule.exports.CREATE_ABx = CREATE_ABx;\nmodule.exports.CREATE_Ax = CREATE_Ax;\nmodule.exports.GET_OPCODE = GET_OPCODE;\nmodule.exports.GETARG_A = GETARG_A;\nmodule.exports.GETARG_B = GETARG_B;\nmodule.exports.GETARG_C = GETARG_C;\nmodule.exports.GETARG_Bx = GETARG_Bx;\nmodule.exports.GETARG_Ax = GETARG_Ax;\nmodule.exports.GETARG_sBx = GETARG_sBx;\nmodule.exports.INDEXK = INDEXK;\nmodule.exports.ISK = ISK;\nmodule.exports.LFIELDS_PER_FLUSH = LFIELDS_PER_FLUSH;\nmodule.exports.MAXARG_A = MAXARG_A;\nmodule.exports.MAXARG_Ax = MAXARG_Ax;\nmodule.exports.MAXARG_B = MAXARG_B;\nmodule.exports.MAXARG_Bx = MAXARG_Bx;\nmodule.exports.MAXARG_C = MAXARG_C;\nmodule.exports.MAXARG_sBx = MAXARG_sBx;\nmodule.exports.MAXINDEXRK = MAXINDEXRK;\nmodule.exports.NO_REG = NO_REG;\nmodule.exports.OpArgK = OpArgK;\nmodule.exports.OpArgN = OpArgN;\nmodule.exports.OpArgR = OpArgR;\nmodule.exports.OpArgU = OpArgU;\nmodule.exports.OpCodes = OpCodes;\nmodule.exports.OpCodesI = OpCodesI;\nmodule.exports.POS_A = POS_A;\nmodule.exports.POS_Ax = POS_Ax;\nmodule.exports.POS_B = POS_B;\nmodule.exports.POS_Bx = POS_Bx;\nmodule.exports.POS_C = POS_C;\nmodule.exports.POS_OP = POS_OP;\nmodule.exports.RKASK = RKASK;\nmodule.exports.SETARG_A = SETARG_A;\nmodule.exports.SETARG_Ax = SETARG_Ax;\nmodule.exports.SETARG_B = SETARG_B;\nmodule.exports.SETARG_Bx = SETARG_Bx;\nmodule.exports.SETARG_C = SETARG_C;\nmodule.exports.SETARG_sBx = SETARG_sBx;\nmodule.exports.SET_OPCODE = SET_OPCODE;\nmodule.exports.SIZE_A = SIZE_A;\nmodule.exports.SIZE_Ax = SIZE_Ax;\nmodule.exports.SIZE_B = SIZE_B;\nmodule.exports.SIZE_Bx = SIZE_Bx;\nmodule.exports.SIZE_C = SIZE_C;\nmodule.exports.SIZE_OP = SIZE_OP;\nmodule.exports.fullins = fullins;\nmodule.exports.getBMode = getBMode;\nmodule.exports.getCMode = getCMode;\nmodule.exports.getOpMode = getOpMode;\nmodule.exports.iABC = iABC;\nmodule.exports.iABx = iABx;\nmodule.exports.iAsBx = iAsBx;\nmodule.exports.iAx = iAx;\nmodule.exports.testAMode = testAMode;\nmodule.exports.testTMode = testTMode;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///16\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nvar _require = __webpack_require__(2),\n    LUA_VERSION_MAJOR = _require.LUA_VERSION_MAJOR,\n    LUA_VERSION_MINOR = _require.LUA_VERSION_MINOR;\n\nvar LUA_VERSUFFIX = "_" + LUA_VERSION_MAJOR + "_" + LUA_VERSION_MINOR;\nmodule.exports.LUA_VERSUFFIX = LUA_VERSUFFIX;\n\nmodule.exports.lua_assert = function (c) {};\n\nmodule.exports.luaopen_base = __webpack_require__(24).luaopen_base;\nvar LUA_COLIBNAME = "coroutine";\nmodule.exports.LUA_COLIBNAME = LUA_COLIBNAME;\nmodule.exports.luaopen_coroutine = __webpack_require__(25).luaopen_coroutine;\nvar LUA_TABLIBNAME = "table";\nmodule.exports.LUA_TABLIBNAME = LUA_TABLIBNAME;\nmodule.exports.luaopen_table = __webpack_require__(26).luaopen_table;\n\nif (false) { var LUA_IOLIBNAME; }\n\nvar LUA_OSLIBNAME = "os";\nmodule.exports.LUA_OSLIBNAME = LUA_OSLIBNAME;\nmodule.exports.luaopen_os = __webpack_require__(27).luaopen_os;\nvar LUA_STRLIBNAME = "string";\nmodule.exports.LUA_STRLIBNAME = LUA_STRLIBNAME;\nmodule.exports.luaopen_string = __webpack_require__(28).luaopen_string;\nvar LUA_UTF8LIBNAME = "utf8";\nmodule.exports.LUA_UTF8LIBNAME = LUA_UTF8LIBNAME;\nmodule.exports.luaopen_utf8 = __webpack_require__(29).luaopen_utf8;\nvar LUA_BITLIBNAME = "bit32";\nmodule.exports.LUA_BITLIBNAME = LUA_BITLIBNAME; // module.exports.luaopen_bit32 = require("./lbitlib.js").luaopen_bit32;\n\nvar LUA_MATHLIBNAME = "math";\nmodule.exports.LUA_MATHLIBNAME = LUA_MATHLIBNAME;\nmodule.exports.luaopen_math = __webpack_require__(30).luaopen_math;\nvar LUA_DBLIBNAME = "debug";\nmodule.exports.LUA_DBLIBNAME = LUA_DBLIBNAME;\nmodule.exports.luaopen_debug = __webpack_require__(31).luaopen_debug;\nvar LUA_LOADLIBNAME = "package";\nmodule.exports.LUA_LOADLIBNAME = LUA_LOADLIBNAME;\nmodule.exports.luaopen_package = __webpack_require__(32).luaopen_package;\nvar LUA_FENGARILIBNAME = "fengari";\nmodule.exports.LUA_FENGARILIBNAME = LUA_FENGARILIBNAME;\nmodule.exports.luaopen_fengari = __webpack_require__(33).luaopen_fengari;\n\nvar linit = __webpack_require__(39);\n\nmodule.exports.luaL_openlibs = linit.luaL_openlibs;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mZW5nYXJpLy4vbm9kZV9tb2R1bGVzL2Zlbmdhcmkvc3JjL2x1YWxpYi5qcz9mNjZlIl0sIm5hbWVzIjpbInJlcXVpcmUiLCJMVUFfVkVSU0lPTl9NQUpPUiIsIkxVQV9WRVJTSU9OX01JTk9SIiwiTFVBX1ZFUlNVRkZJWCIsIm1vZHVsZSIsImV4cG9ydHMiLCJsdWFfYXNzZXJ0IiwiYyIsImx1YW9wZW5fYmFzZSIsIkxVQV9DT0xJQk5BTUUiLCJsdWFvcGVuX2Nvcm91dGluZSIsIkxVQV9UQUJMSUJOQU1FIiwibHVhb3Blbl90YWJsZSIsIkxVQV9PU0xJQk5BTUUiLCJsdWFvcGVuX29zIiwiTFVBX1NUUkxJQk5BTUUiLCJsdWFvcGVuX3N0cmluZyIsIkxVQV9VVEY4TElCTkFNRSIsImx1YW9wZW5fdXRmOCIsIkxVQV9CSVRMSUJOQU1FIiwiTFVBX01BVEhMSUJOQU1FIiwibHVhb3Blbl9tYXRoIiwiTFVBX0RCTElCTkFNRSIsImx1YW9wZW5fZGVidWciLCJMVUFfTE9BRExJQk5BTUUiLCJsdWFvcGVuX3BhY2thZ2UiLCJMVUFfRkVOR0FSSUxJQk5BTUUiLCJsdWFvcGVuX2ZlbmdhcmkiLCJsaW5pdCIsImx1YUxfb3BlbmxpYnMiXSwibWFwcGluZ3MiOiJBQUFhOztlQUtUQSxtQkFBTyxDQUFDLENBQUQsQztJQUZQQyxpQixZQUFBQSxpQjtJQUNBQyxpQixZQUFBQSxpQjs7QUFHSixJQUFNQyxhQUFhLEdBQUcsTUFBTUYsaUJBQU4sR0FBMEIsR0FBMUIsR0FBZ0NDLGlCQUF0RDtBQUNBRSxNQUFNLENBQUNDLE9BQVAsQ0FBZUYsYUFBZixHQUErQkEsYUFBL0I7O0FBRUFDLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlQyxVQUFmLEdBQTRCLFVBQVNDLENBQVQsRUFBWSxDQUFFLENBQTFDOztBQUVBSCxNQUFNLENBQUNDLE9BQVAsQ0FBZUcsWUFBZixHQUE4QlIsbUJBQU8sQ0FBQyxFQUFELENBQVAsQ0FBeUJRLFlBQXZEO0FBRUEsSUFBTUMsYUFBYSxHQUFHLFdBQXRCO0FBQ0FMLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlSSxhQUFmLEdBQStCQSxhQUEvQjtBQUNBTCxNQUFNLENBQUNDLE9BQVAsQ0FBZUssaUJBQWYsR0FBbUNWLG1CQUFPLENBQUMsRUFBRCxDQUFQLENBQXlCVSxpQkFBNUQ7QUFFQSxJQUFNQyxjQUFjLEdBQUcsT0FBdkI7QUFDQVAsTUFBTSxDQUFDQyxPQUFQLENBQWVNLGNBQWYsR0FBZ0NBLGNBQWhDO0FBQ0FQLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlTyxhQUFmLEdBQStCWixtQkFBTyxDQUFDLEVBQUQsQ0FBUCxDQUF3QlksYUFBdkQ7O0FBRUEsSUFBSSxLQUFKLEVBQW9DLHNCQUluQzs7QUFFRCxJQUFNQyxhQUFhLEdBQUcsSUFBdEI7QUFDQVQsTUFBTSxDQUFDQyxPQUFQLENBQWVRLGFBQWYsR0FBK0JBLGFBQS9CO0FBQ0FULE1BQU0sQ0FBQ0MsT0FBUCxDQUFlUyxVQUFmLEdBQTRCZCxtQkFBTyxDQUFDLEVBQUQsQ0FBUCxDQUF1QmMsVUFBbkQ7QUFFQSxJQUFNQyxjQUFjLEdBQUcsUUFBdkI7QUFDQVgsTUFBTSxDQUFDQyxPQUFQLENBQWVVLGNBQWYsR0FBZ0NBLGNBQWhDO0FBQ0FYLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlVyxjQUFmLEdBQWdDaEIsbUJBQU8sQ0FBQyxFQUFELENBQVAsQ0FBd0JnQixjQUF4RDtBQUVBLElBQU1DLGVBQWUsR0FBRyxNQUF4QjtBQUNBYixNQUFNLENBQUNDLE9BQVAsQ0FBZVksZUFBZixHQUFpQ0EsZUFBakM7QUFDQWIsTUFBTSxDQUFDQyxPQUFQLENBQWVhLFlBQWYsR0FBOEJsQixtQkFBTyxDQUFDLEVBQUQsQ0FBUCxDQUF5QmtCLFlBQXZEO0FBRUEsSUFBTUMsY0FBYyxHQUFHLE9BQXZCO0FBQ0FmLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlYyxjQUFmLEdBQWdDQSxjQUFoQyxDLENBQ0E7O0FBRUEsSUFBTUMsZUFBZSxHQUFHLE1BQXhCO0FBQ0FoQixNQUFNLENBQUNDLE9BQVAsQ0FBZWUsZUFBZixHQUFpQ0EsZUFBakM7QUFDQWhCLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlZ0IsWUFBZixHQUE4QnJCLG1CQUFPLENBQUMsRUFBRCxDQUFQLENBQXlCcUIsWUFBdkQ7QUFFQSxJQUFNQyxhQUFhLEdBQUcsT0FBdEI7QUFDQWxCLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlaUIsYUFBZixHQUErQkEsYUFBL0I7QUFDQWxCLE1BQU0sQ0FBQ0MsT0FBUCxDQUFla0IsYUFBZixHQUErQnZCLG1CQUFPLENBQUMsRUFBRCxDQUFQLENBQXVCdUIsYUFBdEQ7QUFFQSxJQUFNQyxlQUFlLEdBQUcsU0FBeEI7QUFDQXBCLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlbUIsZUFBZixHQUFpQ0EsZUFBakM7QUFDQXBCLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlb0IsZUFBZixHQUFpQ3pCLG1CQUFPLENBQUMsRUFBRCxDQUFQLENBQXdCeUIsZUFBekQ7QUFFQSxJQUFNQyxrQkFBa0IsR0FBRyxTQUEzQjtBQUNBdEIsTUFBTSxDQUFDQyxPQUFQLENBQWVxQixrQkFBZixHQUFvQ0Esa0JBQXBDO0FBQ0F0QixNQUFNLENBQUNDLE9BQVAsQ0FBZXNCLGVBQWYsR0FBaUMzQixtQkFBTyxDQUFDLEVBQUQsQ0FBUCxDQUEyQjJCLGVBQTVEOztBQUVBLElBQU1DLEtBQUssR0FBRzVCLG1CQUFPLENBQUMsRUFBRCxDQUFyQjs7QUFDQUksTUFBTSxDQUFDQyxPQUFQLENBQWV3QixhQUFmLEdBQStCRCxLQUFLLENBQUNDLGFBQXJDIiwiZmlsZSI6IjE3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IHtcbiAgICBMVUFfVkVSU0lPTl9NQUpPUixcbiAgICBMVUFfVkVSU0lPTl9NSU5PUlxufSA9IHJlcXVpcmUoXCIuL2x1YS5qc1wiKTtcblxuY29uc3QgTFVBX1ZFUlNVRkZJWCA9IFwiX1wiICsgTFVBX1ZFUlNJT05fTUFKT1IgKyBcIl9cIiArIExVQV9WRVJTSU9OX01JTk9SO1xubW9kdWxlLmV4cG9ydHMuTFVBX1ZFUlNVRkZJWCA9IExVQV9WRVJTVUZGSVg7XG5cbm1vZHVsZS5leHBvcnRzLmx1YV9hc3NlcnQgPSBmdW5jdGlvbihjKSB7fTtcblxubW9kdWxlLmV4cG9ydHMubHVhb3Blbl9iYXNlID0gcmVxdWlyZShcIi4vbGJhc2VsaWIuanNcIikubHVhb3Blbl9iYXNlO1xuXG5jb25zdCBMVUFfQ09MSUJOQU1FID0gXCJjb3JvdXRpbmVcIjtcbm1vZHVsZS5leHBvcnRzLkxVQV9DT0xJQk5BTUUgPSBMVUFfQ09MSUJOQU1FO1xubW9kdWxlLmV4cG9ydHMubHVhb3Blbl9jb3JvdXRpbmUgPSByZXF1aXJlKFwiLi9sY29yb2xpYi5qc1wiKS5sdWFvcGVuX2Nvcm91dGluZTtcblxuY29uc3QgTFVBX1RBQkxJQk5BTUUgPSBcInRhYmxlXCI7XG5tb2R1bGUuZXhwb3J0cy5MVUFfVEFCTElCTkFNRSA9IExVQV9UQUJMSUJOQU1FO1xubW9kdWxlLmV4cG9ydHMubHVhb3Blbl90YWJsZSA9IHJlcXVpcmUoXCIuL2x0YWJsaWIuanNcIikubHVhb3Blbl90YWJsZTtcblxuaWYgKHR5cGVvZiBwcm9jZXNzICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY29uc3QgTFVBX0lPTElCTkFNRSA9IFwiaW9cIjtcbiAgICBtb2R1bGUuZXhwb3J0cy5MVUFfSU9MSUJOQU1FID0gTFVBX0lPTElCTkFNRTtcbiAgICBtb2R1bGUuZXhwb3J0cy5sdWFvcGVuX2lvID0gcmVxdWlyZShcIi4vbGlvbGliLmpzXCIpLmx1YW9wZW5faW87XG59XG5cbmNvbnN0IExVQV9PU0xJQk5BTUUgPSBcIm9zXCI7XG5tb2R1bGUuZXhwb3J0cy5MVUFfT1NMSUJOQU1FID0gTFVBX09TTElCTkFNRTtcbm1vZHVsZS5leHBvcnRzLmx1YW9wZW5fb3MgPSByZXF1aXJlKFwiLi9sb3NsaWIuanNcIikubHVhb3Blbl9vcztcblxuY29uc3QgTFVBX1NUUkxJQk5BTUUgPSBcInN0cmluZ1wiO1xubW9kdWxlLmV4cG9ydHMuTFVBX1NUUkxJQk5BTUUgPSBMVUFfU1RSTElCTkFNRTtcbm1vZHVsZS5leHBvcnRzLmx1YW9wZW5fc3RyaW5nID0gcmVxdWlyZShcIi4vbHN0cmxpYi5qc1wiKS5sdWFvcGVuX3N0cmluZztcblxuY29uc3QgTFVBX1VURjhMSUJOQU1FID0gXCJ1dGY4XCI7XG5tb2R1bGUuZXhwb3J0cy5MVUFfVVRGOExJQk5BTUUgPSBMVUFfVVRGOExJQk5BTUU7XG5tb2R1bGUuZXhwb3J0cy5sdWFvcGVuX3V0ZjggPSByZXF1aXJlKFwiLi9sdXRmOGxpYi5qc1wiKS5sdWFvcGVuX3V0Zjg7XG5cbmNvbnN0IExVQV9CSVRMSUJOQU1FID0gXCJiaXQzMlwiO1xubW9kdWxlLmV4cG9ydHMuTFVBX0JJVExJQk5BTUUgPSBMVUFfQklUTElCTkFNRTtcbi8vIG1vZHVsZS5leHBvcnRzLmx1YW9wZW5fYml0MzIgPSByZXF1aXJlKFwiLi9sYml0bGliLmpzXCIpLmx1YW9wZW5fYml0MzI7XG5cbmNvbnN0IExVQV9NQVRITElCTkFNRSA9IFwibWF0aFwiO1xubW9kdWxlLmV4cG9ydHMuTFVBX01BVEhMSUJOQU1FID0gTFVBX01BVEhMSUJOQU1FO1xubW9kdWxlLmV4cG9ydHMubHVhb3Blbl9tYXRoID0gcmVxdWlyZShcIi4vbG1hdGhsaWIuanNcIikubHVhb3Blbl9tYXRoO1xuXG5jb25zdCBMVUFfREJMSUJOQU1FID0gXCJkZWJ1Z1wiO1xubW9kdWxlLmV4cG9ydHMuTFVBX0RCTElCTkFNRSA9IExVQV9EQkxJQk5BTUU7XG5tb2R1bGUuZXhwb3J0cy5sdWFvcGVuX2RlYnVnID0gcmVxdWlyZShcIi4vbGRibGliLmpzXCIpLmx1YW9wZW5fZGVidWc7XG5cbmNvbnN0IExVQV9MT0FETElCTkFNRSA9IFwicGFja2FnZVwiO1xubW9kdWxlLmV4cG9ydHMuTFVBX0xPQURMSUJOQU1FID0gTFVBX0xPQURMSUJOQU1FO1xubW9kdWxlLmV4cG9ydHMubHVhb3Blbl9wYWNrYWdlID0gcmVxdWlyZShcIi4vbG9hZGxpYi5qc1wiKS5sdWFvcGVuX3BhY2thZ2U7XG5cbmNvbnN0IExVQV9GRU5HQVJJTElCTkFNRSA9IFwiZmVuZ2FyaVwiO1xubW9kdWxlLmV4cG9ydHMuTFVBX0ZFTkdBUklMSUJOQU1FID0gTFVBX0ZFTkdBUklMSUJOQU1FO1xubW9kdWxlLmV4cG9ydHMubHVhb3Blbl9mZW5nYXJpID0gcmVxdWlyZShcIi4vZmVuZ2FyaWxpYi5qc1wiKS5sdWFvcGVuX2Zlbmdhcmk7XG5cbmNvbnN0IGxpbml0ID0gcmVxdWlyZSgnLi9saW5pdC5qcycpO1xubW9kdWxlLmV4cG9ydHMubHVhTF9vcGVubGlicyA9IGxpbml0Lmx1YUxfb3BlbmxpYnM7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///17\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nfunction _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\n\nvar _require = __webpack_require__(0),\n    lua = _require.lua,\n    lauxlib = _require.lauxlib,\n    lualib = _require.lualib,\n    to_luastring = _require.to_luastring;\n\nvar LUA_MULTRET = lua.LUA_MULTRET,\n    LUA_OK = lua.LUA_OK,\n    LUA_REGISTRYINDEX = lua.LUA_REGISTRYINDEX,\n    LUA_RIDX_MAINTHREAD = lua.LUA_RIDX_MAINTHREAD,\n    LUA_TBOOLEAN = lua.LUA_TBOOLEAN,\n    LUA_TFUNCTION = lua.LUA_TFUNCTION,\n    LUA_TLIGHTUSERDATA = lua.LUA_TLIGHTUSERDATA,\n    LUA_TNIL = lua.LUA_TNIL,\n    LUA_TNONE = lua.LUA_TNONE,\n    LUA_TNUMBER = lua.LUA_TNUMBER,\n    LUA_TSTRING = lua.LUA_TSTRING,\n    LUA_TTABLE = lua.LUA_TTABLE,\n    LUA_TTHREAD = lua.LUA_TTHREAD,\n    LUA_TUSERDATA = lua.LUA_TUSERDATA,\n    lua_atnativeerror = lua.lua_atnativeerror,\n    lua_call = lua.lua_call,\n    lua_getfield = lua.lua_getfield,\n    lua_gettable = lua.lua_gettable,\n    lua_gettop = lua.lua_gettop,\n    lua_isnil = lua.lua_isnil,\n    lua_isproxy = lua.lua_isproxy,\n    lua_newuserdata = lua.lua_newuserdata,\n    lua_pcall = lua.lua_pcall,\n    lua_pop = lua.lua_pop,\n    lua_pushboolean = lua.lua_pushboolean,\n    lua_pushcfunction = lua.lua_pushcfunction,\n    lua_pushinteger = lua.lua_pushinteger,\n    lua_pushlightuserdata = lua.lua_pushlightuserdata,\n    lua_pushliteral = lua.lua_pushliteral,\n    lua_pushnil = lua.lua_pushnil,\n    lua_pushnumber = lua.lua_pushnumber,\n    lua_pushstring = lua.lua_pushstring,\n    lua_pushvalue = lua.lua_pushvalue,\n    lua_rawgeti = lua.lua_rawgeti,\n    lua_rawgetp = lua.lua_rawgetp,\n    lua_rawsetp = lua.lua_rawsetp,\n    lua_rotate = lua.lua_rotate,\n    lua_setfield = lua.lua_setfield,\n    lua_settable = lua.lua_settable,\n    lua_settop = lua.lua_settop,\n    lua_toboolean = lua.lua_toboolean,\n    lua_tojsstring = lua.lua_tojsstring,\n    lua_tonumber = lua.lua_tonumber,\n    lua_toproxy = lua.lua_toproxy,\n    lua_tothread = lua.lua_tothread,\n    lua_touserdata = lua.lua_touserdata,\n    lua_type = lua.lua_type;\nvar luaL_argerror = lauxlib.luaL_argerror,\n    luaL_checkany = lauxlib.luaL_checkany,\n    luaL_checkoption = lauxlib.luaL_checkoption,\n    luaL_checkstack = lauxlib.luaL_checkstack,\n    luaL_checkudata = lauxlib.luaL_checkudata,\n    luaL_error = lauxlib.luaL_error,\n    luaL_getmetafield = lauxlib.luaL_getmetafield,\n    luaL_newlib = lauxlib.luaL_newlib,\n    luaL_newmetatable = lauxlib.luaL_newmetatable,\n    luaL_requiref = lauxlib.luaL_requiref,\n    luaL_setfuncs = lauxlib.luaL_setfuncs,\n    luaL_setmetatable = lauxlib.luaL_setmetatable,\n    luaL_testudata = lauxlib.luaL_testudata,\n    luaL_tolstring = lauxlib.luaL_tolstring;\nvar luaopen_base = lualib.luaopen_base;\nvar FENGARI_INTEROP_VERSION_MAJOR = "0";\nvar FENGARI_INTEROP_VERSION_MINOR = "1";\nvar FENGARI_INTEROP_VERSION_NUM = 1;\nvar FENGARI_INTEROP_VERSION_RELEASE = "2";\nvar FENGARI_INTEROP_VERSION = FENGARI_INTEROP_VERSION_MAJOR + "." + FENGARI_INTEROP_VERSION_MINOR;\nvar FENGARI_INTEROP_RELEASE = FENGARI_INTEROP_VERSION + "." + FENGARI_INTEROP_VERSION_RELEASE;\nvar custom_inspect_symbol;\n\nif (false) {}\n\nvar global_env = function () {\n  /* global WorkerGlobalScope */\n\n  /* see https://github.com/sindresorhus/globals/issues/127 */\n  if (false) {} else if (typeof window !== "undefined") {\n    /* browser window */\n    return window;\n  } else if (typeof WorkerGlobalScope !== \'undefined\' && self instanceof WorkerGlobalScope) {\n    /* web worker */\n    return self;\n  } else {\n    /* unknown global env */\n    return (0, eval)(\'this\');\n    /* use non-strict mode to get global env */\n  }\n}();\n\nvar apply, construct, Reflect_deleteProperty;\n\nif (typeof Reflect !== "undefined") {\n  apply = Reflect.apply;\n  construct = Reflect.construct;\n  Reflect_deleteProperty = Reflect.deleteProperty;\n} else {\n  var fApply = Function.apply;\n  var bind = Function.bind;\n\n  apply = function apply(target, thisArgument, argumentsList) {\n    return fApply.call(target, thisArgument, argumentsList);\n  };\n\n  construct = function construct(target, argumentsList\n  /*, newTarget */\n  ) {\n    switch (argumentsList.length) {\n      case 0:\n        return new target();\n\n      case 1:\n        return new target(argumentsList[0]);\n\n      case 2:\n        return new target(argumentsList[0], argumentsList[1]);\n\n      case 3:\n        return new target(argumentsList[0], argumentsList[1], argumentsList[2]);\n\n      case 4:\n        return new target(argumentsList[0], argumentsList[1], argumentsList[2], argumentsList[3]);\n    }\n\n    var args = [null];\n    args.push.apply(args, argumentsList);\n    return new (bind.apply(target, args))();\n  };\n  /* need to be in non-strict mode */\n\n\n  Reflect_deleteProperty = Function("t", "k", "delete t[k]");\n}\n/*\nString.concat coerces to string with correct hint for Symbol.toPrimitive\n`this` isn\'t allowed to be null, so bind the empty string\n*/\n\n\nvar toString = String.prototype.concat.bind("");\n\nvar isobject = function isobject(o) {\n  return _typeof(o) === "object" ? o !== null : typeof o === "function";\n};\n\nvar js_tname = to_luastring("js object");\nvar js_library_not_loaded = "js library not loaded into lua_State";\n\nvar testjs = function testjs(L, idx) {\n  var u = luaL_testudata(L, idx, js_tname);\n  if (u) return u.data;else return void 0;\n};\n\nvar checkjs = function checkjs(L, idx) {\n  return luaL_checkudata(L, idx, js_tname).data;\n};\n\nvar pushjs = function pushjs(L, v) {\n  var b = lua_newuserdata(L);\n  b.data = v;\n  luaL_setmetatable(L, js_tname);\n};\n\nvar getmainthread = function getmainthread(L) {\n  lua_rawgeti(L, LUA_REGISTRYINDEX, LUA_RIDX_MAINTHREAD);\n  var mainL = lua_tothread(L, -1);\n  lua_pop(L, 1);\n  return mainL;\n};\n/* weak map from states to proxy objects (for each object) in that state */\n\n\nvar states = new WeakMap();\n\nvar push = function push(L, v) {\n  switch (_typeof(v)) {\n    case "undefined":\n      lua_pushnil(L);\n      break;\n\n    case "number":\n      lua_pushnumber(L, v);\n      break;\n\n    case "string":\n      lua_pushstring(L, to_luastring(v));\n      break;\n\n    case "boolean":\n      lua_pushboolean(L, v);\n      break;\n\n    case "symbol":\n      lua_pushlightuserdata(L, v);\n      break;\n\n    case "function":\n      if (lua_isproxy(v, L)) {\n        v(L);\n        break;\n      }\n\n    /* fall through */\n\n    case "object":\n      if (v === null) {\n        /* can\'t use null in a WeakMap; grab from registry */\n        if (lua_rawgetp(L, LUA_REGISTRYINDEX, null) !== LUA_TUSERDATA) throw Error(js_library_not_loaded);\n        break;\n      }\n\n    /* fall through */\n\n    default:\n      {\n        /* Try and push same object again */\n        var objects_seen = states.get(getmainthread(L));\n        if (!objects_seen) throw Error(js_library_not_loaded);\n        var p = objects_seen.get(v);\n\n        if (p) {\n          p(L);\n        } else {\n          pushjs(L, v);\n          p = lua_toproxy(L, -1);\n          objects_seen.set(v, p);\n        }\n      }\n  }\n};\n\nvar atnativeerror = function atnativeerror(L) {\n  var u = lua_touserdata(L, 1);\n  push(L, u);\n  return 1;\n};\n\nvar tojs = function tojs(L, idx) {\n  switch (lua_type(L, idx)) {\n    case LUA_TNONE:\n    case LUA_TNIL:\n      return void 0;\n\n    case LUA_TBOOLEAN:\n      return lua_toboolean(L, idx);\n\n    case LUA_TLIGHTUSERDATA:\n      return lua_touserdata(L, idx);\n\n    case LUA_TNUMBER:\n      return lua_tonumber(L, idx);\n\n    case LUA_TSTRING:\n      return lua_tojsstring(L, idx);\n\n    case LUA_TUSERDATA:\n      {\n        var u = testjs(L, idx);\n        if (u !== void 0) return u;\n      }\n\n    /* fall through */\n\n    case LUA_TTABLE:\n    case LUA_TFUNCTION:\n    case LUA_TTHREAD:\n    /* fall through */\n\n    default:\n      return wrap(L, lua_toproxy(L, idx));\n  }\n};\n/* Calls function on the stack with `nargs` from the stack.\n   On lua error, re-throws as javascript error\n   On success, returns single return value */\n\n\nvar jscall = function jscall(L, nargs) {\n  var status = lua_pcall(L, nargs, 1, 0);\n  var r = tojs(L, -1);\n  lua_pop(L, 1);\n\n  switch (status) {\n    case LUA_OK:\n      return r;\n\n    default:\n      throw r;\n  }\n};\n\nvar invoke = function invoke(L, p, thisarg, args, n_results) {\n  if (!isobject(args)) throw new TypeError("`args` argument must be an object");\n  var length = +args.length;\n  if (!(length >= 0)) length = 0;\n  /* Keep NaN in mind */\n\n  luaL_checkstack(L, 2 + length, null);\n  var base = lua_gettop(L);\n  p(L);\n  push(L, thisarg);\n\n  for (var i = 0; i < length; i++) {\n    push(L, args[i]);\n  }\n\n  switch (lua_pcall(L, 1 + length, n_results, 0)) {\n    case LUA_OK:\n      {\n        var nres = lua_gettop(L) - base;\n        var res = new Array(nres);\n\n        for (var _i = 0; _i < nres; _i++) {\n          res[_i] = tojs(L, base + _i + 1);\n        }\n\n        lua_settop(L, base);\n        return res;\n      }\n\n    default:\n      {\n        var r = tojs(L, -1);\n        lua_settop(L, base);\n        throw r;\n      }\n  }\n};\n\nvar gettable = function gettable(L) {\n  lua_gettable(L, 1);\n  return 1;\n};\n\nvar _get = function get(L, p, prop) {\n  luaL_checkstack(L, 3, null);\n  lua_pushcfunction(L, gettable);\n  p(L);\n  push(L, prop);\n  return jscall(L, 2);\n};\n\nvar _has = function has(L, p, prop) {\n  luaL_checkstack(L, 3, null);\n  lua_pushcfunction(L, gettable);\n  p(L);\n  push(L, prop);\n  var status = lua_pcall(L, 2, 1, 0);\n\n  switch (status) {\n    case LUA_OK:\n      {\n        var r = lua_isnil(L, -1);\n        lua_pop(L, 1);\n        return !r;\n      }\n\n    default:\n      {\n        var _r = tojs(L, -1);\n\n        lua_pop(L, 1);\n        throw _r;\n      }\n  }\n};\n\nvar _set = function set(L, p, prop, value) {\n  luaL_checkstack(L, 4, null);\n  lua_pushcfunction(L, function (L) {\n    lua_settable(L, 1);\n    return 0;\n  });\n  p(L);\n  push(L, prop);\n  push(L, value);\n\n  switch (lua_pcall(L, 3, 0, 0)) {\n    case LUA_OK:\n      return;\n\n    default:\n      {\n        var r = tojs(L, -1);\n        lua_pop(L, 1);\n        throw r;\n      }\n  }\n};\n\nvar _deleteProperty = function deleteProperty(L, p, prop) {\n  luaL_checkstack(L, 4, null);\n  lua_pushcfunction(L, function (L) {\n    lua_settable(L, 1);\n    return 0;\n  });\n  p(L);\n  push(L, prop);\n  lua_pushnil(L);\n\n  switch (lua_pcall(L, 3, 0, 0)) {\n    case LUA_OK:\n      return;\n\n    default:\n      {\n        var r = tojs(L, -1);\n        lua_pop(L, 1);\n        throw r;\n      }\n  }\n};\n\nvar tostring = function tostring(L, p) {\n  luaL_checkstack(L, 2, null);\n  lua_pushcfunction(L, function (L) {\n    luaL_tolstring(L, 1);\n    return 1;\n  });\n  p(L);\n  return jscall(L, 1);\n};\n/* implements lua\'s "Generic For" protocol */\n\n\nvar iter_next = function iter_next() {\n  var L = this.L;\n  luaL_checkstack(L, 3, null);\n  var top = lua_gettop(L);\n  this.iter(L);\n  this.state(L);\n  this.last(L);\n\n  switch (lua_pcall(L, 2, LUA_MULTRET, 0)) {\n    case LUA_OK:\n      {\n        this.last = lua_toproxy(L, top + 1);\n        var r;\n\n        if (lua_isnil(L, -1)) {\n          r = {\n            done: true,\n            value: void 0\n          };\n        } else {\n          var n_results = lua_gettop(L) - top;\n          var result = new Array(n_results);\n\n          for (var i = 0; i < n_results; i++) {\n            result[i] = tojs(L, top + i + 1);\n          }\n\n          r = {\n            done: false,\n            value: result\n          };\n        }\n\n        lua_settop(L, top);\n        return r;\n      }\n\n    default:\n      {\n        var e = tojs(L, -1);\n        lua_pop(L, 1);\n        throw e;\n      }\n  }\n};\n/* make iteration use pairs() */\n\n\nvar jsiterator = function jsiterator(L, p) {\n  luaL_checkstack(L, 1, null);\n  lua_pushcfunction(L, function (L) {\n    luaL_requiref(L, to_luastring("_G"), luaopen_base, 0);\n    lua_getfield(L, -1, to_luastring("pairs"));\n    p(L);\n    lua_call(L, 1, 3);\n    return 3;\n  });\n\n  switch (lua_pcall(L, 0, 3, 0)) {\n    case LUA_OK:\n      {\n        var iter = lua_toproxy(L, -3);\n        var state = lua_toproxy(L, -2);\n        var last = lua_toproxy(L, -1);\n        lua_pop(L, 3);\n        return {\n          L: L,\n          iter: iter,\n          state: state,\n          last: last,\n          next: iter_next\n        };\n      }\n\n    default:\n      {\n        var r = tojs(L, -1);\n        lua_pop(L, 1);\n        throw r;\n      }\n  }\n};\n\nvar wrap = function wrap(L1, p) {\n  var L = getmainthread(L1);\n  /* we need `typeof js_proxy` to be "function" so that it\'s acceptable to native apis */\n\n  var js_proxy = function js_proxy() {\n    /* only get one result */\n    return invoke(L, p, this, arguments, 1)[0];\n  };\n\n  js_proxy.apply = function (thisarg, args) {\n    /* only get one result */\n    return invoke(L, p, thisarg, args, 1)[0];\n  };\n\n  js_proxy.invoke = function (thisarg, args) {\n    return invoke(L, p, thisarg, args, LUA_MULTRET);\n  };\n\n  js_proxy.get = function (k) {\n    return _get(L, p, k);\n  };\n\n  js_proxy.has = function (k) {\n    return _has(L, p, k);\n  };\n\n  js_proxy.set = function (k, v) {\n    return _set(L, p, k, v);\n  };\n\n  js_proxy.delete = function (k) {\n    return _deleteProperty(L, p, k);\n  };\n\n  js_proxy.toString = function () {\n    return tostring(L, p);\n  };\n\n  if (typeof Symbol === "function") {\n    js_proxy[Symbol.toStringTag] = "Fengari object";\n\n    js_proxy[Symbol.iterator] = function () {\n      return jsiterator(L, p);\n    };\n\n    if (Symbol.toPrimitive) {\n      js_proxy[Symbol.toPrimitive] = function (hint) {\n        if (hint === "string") {\n          return tostring(L, p);\n        }\n      };\n    }\n  }\n\n  if (custom_inspect_symbol) {\n    js_proxy[custom_inspect_symbol] = js_proxy.toString;\n  }\n\n  var objects_seen = states.get(L);\n  if (!objects_seen) throw Error(js_library_not_loaded);\n  objects_seen.set(js_proxy, p);\n  return js_proxy;\n};\n\nvar jslib = {\n  "new": function _new(L) {\n    var u = tojs(L, 1);\n    var nargs = lua_gettop(L) - 1;\n    var args = new Array(nargs);\n\n    for (var i = 0; i < nargs; i++) {\n      args[i] = tojs(L, i + 2);\n    }\n\n    push(L, construct(u, args));\n    return 1;\n  },\n  "tonumber": function tonumber(L) {\n    var u = tojs(L, 1);\n    lua_pushnumber(L, +u);\n    return 1;\n  },\n  "tostring": function tostring(L) {\n    var u = tojs(L, 1);\n    lua_pushliteral(L, toString(u));\n    return 1;\n  },\n  "instanceof": function _instanceof(L) {\n    var u1 = tojs(L, 1);\n    var u2 = tojs(L, 2);\n    lua_pushboolean(L, u1 instanceof u2);\n    return 1;\n  },\n  "typeof": function _typeof(L) {\n    var u = tojs(L, 1);\n    lua_pushliteral(L, _typeof(u));\n    return 1;\n  }\n};\n\nif (typeof Symbol === "function" && Symbol.iterator) {\n  var get_iterator = function get_iterator(L, idx) {\n    var u = checkjs(L, idx);\n    var getiter = u[Symbol.iterator];\n    if (!getiter) luaL_argerror(L, idx, to_luastring("object not iterable"));\n    var iter = apply(getiter, u, []);\n    if (!isobject(iter)) luaL_argerror(L, idx, to_luastring("Result of the Symbol.iterator method is not an object"));\n    return iter;\n  };\n\n  var next = function next(L) {\n    var iter = tojs(L, 1);\n    var r = iter.next();\n\n    if (r.done) {\n      return 0;\n    } else {\n      push(L, r.value);\n      return 1;\n    }\n  };\n\n  jslib["of"] = function (L) {\n    var iter = get_iterator(L, 1);\n    lua_pushcfunction(L, next);\n    push(L, iter);\n    return 2;\n  };\n}\n\nif (typeof Proxy === "function" && typeof Symbol === "function") {\n  var L_symbol = Symbol("lua_State");\n  var p_symbol = Symbol("fengari-proxy");\n  var proxy_handlers = {\n    "apply": function apply(target, thisarg, args) {\n      return invoke(target[L_symbol], target[p_symbol], thisarg, args, 1)[0];\n    },\n    "construct": function construct(target, argumentsList) {\n      var L = target[L_symbol];\n      var p = target[p_symbol];\n      var arg_length = argumentsList.length;\n      luaL_checkstack(L, 2 + arg_length, null);\n      p(L);\n      var idx = lua_gettop(L);\n\n      if (luaL_getmetafield(L, idx, to_luastring("construct")) === LUA_TNIL) {\n        lua_pop(L, 1);\n        throw new TypeError("not a constructor");\n      }\n\n      lua_rotate(L, idx, 1);\n\n      for (var i = 0; i < arg_length; i++) {\n        push(L, argumentsList[i]);\n      }\n\n      return jscall(L, 1 + arg_length);\n    },\n    "defineProperty": function defineProperty(target, prop, desc) {\n      var L = target[L_symbol];\n      var p = target[p_symbol];\n      luaL_checkstack(L, 4, null);\n      p(L);\n\n      if (luaL_getmetafield(L, -1, to_luastring("defineProperty")) === LUA_TNIL) {\n        lua_pop(L, 1);\n        return false;\n      }\n\n      lua_rotate(L, -2, 1);\n      push(L, prop);\n      push(L, desc);\n      return jscall(L, 3);\n    },\n    "deleteProperty": function deleteProperty(target, k) {\n      return _deleteProperty(target[L_symbol], target[p_symbol], k);\n    },\n    "get": function get(target, k) {\n      return _get(target[L_symbol], target[p_symbol], k);\n    },\n    "getOwnPropertyDescriptor": function getOwnPropertyDescriptor(target, prop) {\n      var L = target[L_symbol];\n      var p = target[p_symbol];\n      luaL_checkstack(L, 3, null);\n      p(L);\n\n      if (luaL_getmetafield(L, -1, to_luastring("getOwnPropertyDescriptor")) === LUA_TNIL) {\n        lua_pop(L, 1);\n        return;\n      }\n\n      lua_rotate(L, -2, 1);\n      push(L, prop);\n      return jscall(L, 2);\n    },\n    "getPrototypeOf": function getPrototypeOf(target) {\n      var L = target[L_symbol];\n      var p = target[p_symbol];\n      luaL_checkstack(L, 2, null);\n      p(L);\n\n      if (luaL_getmetafield(L, -1, to_luastring("getPrototypeOf")) === LUA_TNIL) {\n        lua_pop(L, 1);\n        return null;\n      }\n\n      lua_rotate(L, -2, 1);\n      return jscall(L, 1);\n    },\n    "has": function has(target, k) {\n      return _has(target[L_symbol], target[p_symbol], k);\n    },\n    "ownKeys": function ownKeys(target) {\n      var L = target[L_symbol];\n      var p = target[p_symbol];\n      luaL_checkstack(L, 2, null);\n      p(L);\n\n      if (luaL_getmetafield(L, -1, to_luastring("ownKeys")) === LUA_TNIL) {\n        lua_pop(L, 1);\n        throw Error("ownKeys unknown for fengari object");\n      }\n\n      lua_rotate(L, -2, 1);\n      return jscall(L, 1);\n    },\n    "set": function set(target, k, v) {\n      _set(target[L_symbol], target[p_symbol], k, v);\n\n      return true;\n    },\n    "setPrototypeOf": function setPrototypeOf(target, prototype) {\n      var L = target[L_symbol];\n      var p = target[p_symbol];\n      luaL_checkstack(L, 3, null);\n      p(L);\n\n      if (luaL_getmetafield(L, -1, to_luastring("setPrototypeOf")) === LUA_TNIL) {\n        lua_pop(L, 1);\n        return false;\n      }\n\n      lua_rotate(L, -2, 1);\n      push(L, prototype);\n      return jscall(L, 2);\n    }\n  };\n  /*\n  Functions created with `function(){}` have a non-configurable .prototype\n  field. This causes issues with the .ownKeys and .getOwnPropertyDescriptor\n  traps.\n  However using `.bind()` returns a function without the .prototype property.\n  \t```js\n  Reflect.ownKeys((function(){})) // Array [ "prototype", "length", "name" ]\n  Reflect.ownKeys((function(){}).bind()) // Array [ "length", "name" ]\n  ```\n  */\n\n  var raw_function = function raw_function() {\n    var f = function () {}.bind();\n\n    delete f.length;\n    delete f.name;\n    return f;\n  };\n  /*\n  We use Function() here to get prevent transpilers from converting to a\n  non-arrow function.\n  Additionally, we avoid setting the internal name field by never giving the\n  new function a name in the block it was defined (and instead delete-ing\n  the configurable fields .length and .name in a wrapper function)\n  */\n\n\n  var make_arrow_function = Function("return ()=>void 0;");\n\n  var raw_arrow_function = function raw_arrow_function() {\n    var f = make_arrow_function();\n    delete f.length;\n    delete f.name;\n    return f;\n  };\n  /*\n  Arrow functions do not have a .prototype field:\n  \t```js\n  Reflect.ownKeys((() = >void 0)) // Array [ "length", "name" ]\n  ```\n  \tHowever they cannot be used as a constructor:\n  \t```js\n  new (new Proxy(() => void 0, { construct: function() { return {}; } })) // TypeError: (intermediate value) is not a constructor\n  new (new Proxy(function(){}, { construct: function() { return {}; } })) // {}\n  ```\n  */\n\n\n  var createproxy = function createproxy(L1, p, type) {\n    var L = getmainthread(L1);\n    var target;\n\n    switch (type) {\n      case "function":\n        target = raw_function();\n        break;\n\n      case "arrow_function":\n        target = raw_arrow_function();\n        break;\n\n      case "object":\n        target = {};\n        break;\n\n      default:\n        throw TypeError("invalid type to createproxy");\n    }\n\n    target[p_symbol] = p;\n    target[L_symbol] = L;\n    return new Proxy(target, proxy_handlers);\n  };\n\n  var valid_types = ["function", "arrow_function", "object"];\n  var valid_types_as_luastring = valid_types.map(function (v) {\n    return to_luastring(v);\n  });\n\n  jslib["createproxy"] = function (L) {\n    luaL_checkany(L, 1);\n    var type = valid_types[luaL_checkoption(L, 2, valid_types_as_luastring[0], valid_types_as_luastring)];\n    var fengariProxy = createproxy(L, lua_toproxy(L, 1), type);\n    push(L, fengariProxy);\n    return 1;\n  };\n}\n\nvar jsmt = {\n  "__index": function __index(L) {\n    var u = checkjs(L, 1);\n    var k = tojs(L, 2);\n    push(L, u[k]);\n    return 1;\n  },\n  "__newindex": function __newindex(L) {\n    var u = checkjs(L, 1);\n    var k = tojs(L, 2);\n    var v = tojs(L, 3);\n    if (v === void 0) Reflect_deleteProperty(u, k);else u[k] = v;\n    return 0;\n  },\n  "__tostring": function __tostring(L) {\n    var u = checkjs(L, 1);\n    var s = toString(u);\n    lua_pushstring(L, to_luastring(s));\n    return 1;\n  },\n  "__call": function __call(L) {\n    var u = checkjs(L, 1);\n    var nargs = lua_gettop(L) - 1;\n    var thisarg;\n    var args = new Array(Math.max(0, nargs - 1));\n\n    if (nargs > 0) {\n      thisarg = tojs(L, 2);\n\n      if (nargs-- > 0) {\n        for (var i = 0; i < nargs; i++) {\n          args[i] = tojs(L, i + 3);\n        }\n      }\n    }\n\n    push(L, apply(u, thisarg, args));\n    return 1;\n  },\n  "__pairs": function __pairs(L) {\n    var u = checkjs(L, 1);\n    var f;\n    var iter, state, first;\n\n    if (typeof Symbol !== "function" || (f = u[Symbol.for("__pairs")]) === void 0) {\n      /* By default, iterate over Object.keys */\n      iter = function iter(last) {\n        if (this.index >= this.keys.length) return;\n        var key = this.keys[this.index++];\n        return [key, this.object[key]];\n      };\n\n      state = {\n        object: u,\n        keys: Object.keys(u),\n        index: 0\n      };\n    } else {\n      var r = apply(f, u, []);\n      if (r === void 0) luaL_error(L, to_luastring("bad \'__pairs\' result (object with keys \'iter\', \'state\', \'first\' expected)"));\n      iter = r.iter;\n      if (iter === void 0) luaL_error(L, to_luastring("bad \'__pairs\' result (object.iter is missing)"));\n      state = r.state;\n      first = r.first;\n    }\n\n    lua_pushcfunction(L, function () {\n      var state = tojs(L, 1);\n      var last = tojs(L, 2);\n      var r = apply(iter, state, [last]);\n      /* returning undefined indicates end of iteration */\n\n      if (r === void 0) return 0;\n      /* otherwise it should return an array of results */\n\n      if (!Array.isArray(r)) luaL_error(L, to_luastring("bad iterator result (Array or undefined expected)"));\n      luaL_checkstack(L, r.length, null);\n\n      for (var i = 0; i < r.length; i++) {\n        push(L, r[i]);\n      }\n\n      return r.length;\n    });\n    push(L, state);\n    push(L, first);\n    return 3;\n  },\n  "__len": function __len(L) {\n    var u = checkjs(L, 1);\n    var f;\n    var r;\n\n    if (typeof Symbol !== "function" || (f = u[Symbol.for("__len")]) === void 0) {\n      /* by default use .length field */\n      r = u.length;\n    } else {\n      r = apply(f, u, []);\n    }\n\n    push(L, r);\n    return 1;\n  }\n};\n\nvar luaopen_js = function luaopen_js(L) {\n  /* Add weak map to track objects seen */\n  states.set(getmainthread(L), new WeakMap());\n  lua_atnativeerror(L, atnativeerror);\n  luaL_newlib(L, jslib);\n  lua_pushliteral(L, FENGARI_INTEROP_VERSION);\n  lua_setfield(L, -2, to_luastring("_VERSION"));\n  lua_pushinteger(L, FENGARI_INTEROP_VERSION_NUM);\n  lua_setfield(L, -2, to_luastring("_VERSION_NUM"));\n  lua_pushliteral(L, FENGARI_INTEROP_RELEASE);\n  lua_setfield(L, -2, to_luastring("_RELEASE"));\n  luaL_newmetatable(L, js_tname);\n  luaL_setfuncs(L, jsmt, 0);\n  lua_pop(L, 1);\n  pushjs(L, null);\n  /* Store null object in registry under lightuserdata null */\n\n  lua_pushvalue(L, -1);\n  lua_rawsetp(L, LUA_REGISTRYINDEX, null);\n  lua_setfield(L, -2, to_luastring("null"));\n  push(L, global_env);\n  lua_setfield(L, -2, to_luastring("global"));\n  return 1;\n};\n\nmodule.exports.FENGARI_INTEROP_VERSION = FENGARI_INTEROP_VERSION;\nmodule.exports.FENGARI_INTEROP_VERSION_NUM = FENGARI_INTEROP_VERSION_NUM;\nmodule.exports.FENGARI_INTEROP_RELEASE = FENGARI_INTEROP_RELEASE;\nmodule.exports.checkjs = checkjs;\nmodule.exports.testjs = testjs;\nmodule.exports.pushjs = pushjs;\nmodule.exports.push = push;\nmodule.exports.tojs = tojs;\nmodule.exports.luaopen_js = luaopen_js;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///18\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nvar _require = __webpack_require__(1),\n    LUA_MULTRET = _require.LUA_MULTRET,\n    LUA_OPBNOT = _require.LUA_OPBNOT,\n    LUA_OPEQ = _require.LUA_OPEQ,\n    LUA_OPLE = _require.LUA_OPLE,\n    LUA_OPLT = _require.LUA_OPLT,\n    LUA_OPUNM = _require.LUA_OPUNM,\n    LUA_REGISTRYINDEX = _require.LUA_REGISTRYINDEX,\n    LUA_RIDX_GLOBALS = _require.LUA_RIDX_GLOBALS,\n    LUA_VERSION_NUM = _require.LUA_VERSION_NUM,\n    _require$constant_typ = _require.constant_types,\n    LUA_NUMTAGS = _require$constant_typ.LUA_NUMTAGS,\n    LUA_TBOOLEAN = _require$constant_typ.LUA_TBOOLEAN,\n    LUA_TCCL = _require$constant_typ.LUA_TCCL,\n    LUA_TFUNCTION = _require$constant_typ.LUA_TFUNCTION,\n    LUA_TLCF = _require$constant_typ.LUA_TLCF,\n    LUA_TLCL = _require$constant_typ.LUA_TLCL,\n    LUA_TLIGHTUSERDATA = _require$constant_typ.LUA_TLIGHTUSERDATA,\n    LUA_TLNGSTR = _require$constant_typ.LUA_TLNGSTR,\n    LUA_TNIL = _require$constant_typ.LUA_TNIL,\n    LUA_TNONE = _require$constant_typ.LUA_TNONE,\n    LUA_TNUMFLT = _require$constant_typ.LUA_TNUMFLT,\n    LUA_TNUMINT = _require$constant_typ.LUA_TNUMINT,\n    LUA_TSHRSTR = _require$constant_typ.LUA_TSHRSTR,\n    LUA_TTABLE = _require$constant_typ.LUA_TTABLE,\n    LUA_TTHREAD = _require$constant_typ.LUA_TTHREAD,\n    LUA_TUSERDATA = _require$constant_typ.LUA_TUSERDATA,\n    LUA_OK = _require.thread_status.LUA_OK,\n    from_userstring = _require.from_userstring,\n    to_luastring = _require.to_luastring;\n\nvar _require2 = __webpack_require__(4),\n    api_check = _require2.api_check;\n\nvar ldebug = __webpack_require__(11);\n\nvar ldo = __webpack_require__(8);\n\nvar _require3 = __webpack_require__(37),\n    luaU_dump = _require3.luaU_dump;\n\nvar lfunc = __webpack_require__(13);\n\nvar lobject = __webpack_require__(6);\n\nvar lstate = __webpack_require__(12);\n\nvar _require4 = __webpack_require__(10),\n    luaS_bless = _require4.luaS_bless,\n    luaS_new = _require4.luaS_new,\n    luaS_newliteral = _require4.luaS_newliteral;\n\nvar ltm = __webpack_require__(14);\n\nvar _require5 = __webpack_require__(3),\n    LUAI_MAXSTACK = _require5.LUAI_MAXSTACK;\n\nvar lvm = __webpack_require__(15);\n\nvar ltable = __webpack_require__(9);\n\nvar _require6 = __webpack_require__(20),\n    ZIO = _require6.ZIO;\n\nvar TValue = lobject.TValue;\nvar CClosure = lobject.CClosure;\n\nvar api_incr_top = function api_incr_top(L) {\n  L.top++;\n  api_check(L, L.top <= L.ci.top, "stack overflow");\n};\n\nvar api_checknelems = function api_checknelems(L, n) {\n  api_check(L, n < L.top - L.ci.funcOff, "not enough elements in the stack");\n};\n\nvar fengari_argcheck = function fengari_argcheck(c) {\n  if (!c) throw TypeError("invalid argument");\n};\n\nvar fengari_argcheckinteger = function fengari_argcheckinteger(n) {\n  fengari_argcheck(typeof n === "number" && (n | 0) === n);\n};\n\nvar isvalid = function isvalid(o) {\n  return o !== lobject.luaO_nilobject;\n};\n\nvar lua_version = function lua_version(L) {\n  if (L === null) return LUA_VERSION_NUM;else return L.l_G.version;\n};\n\nvar lua_atpanic = function lua_atpanic(L, panicf) {\n  var old = L.l_G.panic;\n  L.l_G.panic = panicf;\n  return old;\n};\n\nvar lua_atnativeerror = function lua_atnativeerror(L, errorf) {\n  var old = L.l_G.atnativeerror;\n  L.l_G.atnativeerror = errorf;\n  return old;\n}; // Return value for idx on stack\n\n\nvar index2addr = function index2addr(L, idx) {\n  var ci = L.ci;\n\n  if (idx > 0) {\n    var o = ci.funcOff + idx;\n    api_check(L, idx <= ci.top - (ci.funcOff + 1), "unacceptable index");\n    if (o >= L.top) return lobject.luaO_nilobject;else return L.stack[o];\n  } else if (idx > LUA_REGISTRYINDEX) {\n    api_check(L, idx !== 0 && -idx <= L.top, "invalid index");\n    return L.stack[L.top + idx];\n  } else if (idx === LUA_REGISTRYINDEX) {\n    return L.l_G.l_registry;\n  } else {\n    /* upvalues */\n    idx = LUA_REGISTRYINDEX - idx;\n    api_check(L, idx <= lfunc.MAXUPVAL + 1, "upvalue index too large");\n    if (ci.func.ttislcf())\n      /* light C function? */\n      return lobject.luaO_nilobject;\n      /* it has no upvalues */\n    else {\n        return idx <= ci.func.value.nupvalues ? ci.func.value.upvalue[idx - 1] : lobject.luaO_nilobject;\n      }\n  }\n}; // Like index2addr but returns the index on stack; doesn\'t allow pseudo indices\n\n\nvar index2addr_ = function index2addr_(L, idx) {\n  var ci = L.ci;\n\n  if (idx > 0) {\n    var o = ci.funcOff + idx;\n    api_check(L, idx <= ci.top - (ci.funcOff + 1), "unacceptable index");\n    if (o >= L.top) return null;else return o;\n  } else if (idx > LUA_REGISTRYINDEX) {\n    api_check(L, idx !== 0 && -idx <= L.top, "invalid index");\n    return L.top + idx;\n  } else {\n    /* registry or upvalue */\n    throw Error("attempt to use pseudo-index");\n  }\n};\n\nvar lua_checkstack = function lua_checkstack(L, n) {\n  var res;\n  var ci = L.ci;\n  api_check(L, n >= 0, "negative \'n\'");\n  if (L.stack_last - L.top > n)\n    /* stack large enough? */\n    res = true;else {\n    /* no; need to grow stack */\n    var inuse = L.top + lstate.EXTRA_STACK;\n    if (inuse > LUAI_MAXSTACK - n)\n      /* can grow without overflow? */\n      res = false;\n      /* no */\n    else {\n        /* try to grow stack */\n        ldo.luaD_growstack(L, n);\n        res = true;\n      }\n  }\n  if (res && ci.top < L.top + n) ci.top = L.top + n;\n  /* adjust frame top */\n\n  return res;\n};\n\nvar lua_xmove = function lua_xmove(from, to, n) {\n  if (from === to) return;\n  api_checknelems(from, n);\n  api_check(from, from.l_G === to.l_G, "moving among independent states");\n  api_check(from, to.ci.top - to.top >= n, "stack overflow");\n  from.top -= n;\n\n  for (var i = 0; i < n; i++) {\n    to.stack[to.top] = new lobject.TValue();\n    lobject.setobj2s(to, to.top, from.stack[from.top + i]);\n    delete from.stack[from.top + i];\n    to.top++;\n  }\n};\n/*\n** basic stack manipulation\n*/\n\n/*\n** convert an acceptable stack index into an absolute index\n*/\n\n\nvar lua_absindex = function lua_absindex(L, idx) {\n  return idx > 0 || idx <= LUA_REGISTRYINDEX ? idx : L.top - L.ci.funcOff + idx;\n};\n\nvar lua_gettop = function lua_gettop(L) {\n  return L.top - (L.ci.funcOff + 1);\n};\n\nvar lua_pushvalue = function lua_pushvalue(L, idx) {\n  lobject.pushobj2s(L, index2addr(L, idx));\n  api_check(L, L.top <= L.ci.top, "stack overflow");\n};\n\nvar lua_settop = function lua_settop(L, idx) {\n  var func = L.ci.funcOff;\n  var newtop;\n\n  if (idx >= 0) {\n    api_check(L, idx <= L.stack_last - (func + 1), "new top too large");\n    newtop = func + 1 + idx;\n  } else {\n    api_check(L, -(idx + 1) <= L.top - (func + 1), "invalid new top");\n    newtop = L.top + idx + 1;\n    /* \'subtract\' index (index is negative) */\n  }\n\n  ldo.adjust_top(L, newtop);\n};\n\nvar lua_pop = function lua_pop(L, n) {\n  lua_settop(L, -n - 1);\n};\n\nvar reverse = function reverse(L, from, to) {\n  for (; from < to; from++, to--) {\n    var fromtv = L.stack[from];\n    var temp = new TValue(fromtv.type, fromtv.value);\n    lobject.setobjs2s(L, from, to);\n    lobject.setobj2s(L, to, temp);\n  }\n};\n/*\n** Let x = AB, where A is a prefix of length \'n\'. Then,\n** rotate x n === BA. But BA === (A^r . B^r)^r.\n*/\n\n\nvar lua_rotate = function lua_rotate(L, idx, n) {\n  var t = L.top - 1;\n  var pIdx = index2addr_(L, idx);\n  var p = L.stack[pIdx];\n  api_check(L, isvalid(p) && idx > LUA_REGISTRYINDEX, "index not in the stack");\n  api_check(L, (n >= 0 ? n : -n) <= t - pIdx + 1, "invalid \'n\'");\n  var m = n >= 0 ? t - n : pIdx - n - 1;\n  /* end of prefix */\n\n  reverse(L, pIdx, m);\n  reverse(L, m + 1, L.top - 1);\n  reverse(L, pIdx, L.top - 1);\n};\n\nvar lua_copy = function lua_copy(L, fromidx, toidx) {\n  var from = index2addr(L, fromidx);\n  index2addr(L, toidx).setfrom(from);\n};\n\nvar lua_remove = function lua_remove(L, idx) {\n  lua_rotate(L, idx, -1);\n  lua_pop(L, 1);\n};\n\nvar lua_insert = function lua_insert(L, idx) {\n  lua_rotate(L, idx, 1);\n};\n\nvar lua_replace = function lua_replace(L, idx) {\n  lua_copy(L, -1, idx);\n  lua_pop(L, 1);\n};\n/*\n** push functions (JS -> stack)\n*/\n\n\nvar lua_pushnil = function lua_pushnil(L) {\n  L.stack[L.top] = new TValue(LUA_TNIL, null);\n  api_incr_top(L);\n};\n\nvar lua_pushnumber = function lua_pushnumber(L, n) {\n  fengari_argcheck(typeof n === "number");\n  L.stack[L.top] = new TValue(LUA_TNUMFLT, n);\n  api_incr_top(L);\n};\n\nvar lua_pushinteger = function lua_pushinteger(L, n) {\n  fengari_argcheckinteger(n);\n  L.stack[L.top] = new TValue(LUA_TNUMINT, n);\n  api_incr_top(L);\n};\n\nvar lua_pushlstring = function lua_pushlstring(L, s, len) {\n  fengari_argcheckinteger(len);\n  var ts;\n\n  if (len === 0) {\n    s = to_luastring("", true);\n    ts = luaS_bless(L, s);\n  } else {\n    s = from_userstring(s);\n    api_check(L, s.length >= len, "invalid length to lua_pushlstring");\n    ts = luaS_new(L, s.subarray(0, len));\n  }\n\n  lobject.pushsvalue2s(L, ts);\n  api_check(L, L.top <= L.ci.top, "stack overflow");\n  return ts.value;\n};\n\nvar lua_pushstring = function lua_pushstring(L, s) {\n  if (s === undefined || s === null) {\n    L.stack[L.top] = new TValue(LUA_TNIL, null);\n    L.top++;\n  } else {\n    var ts = luaS_new(L, from_userstring(s));\n    lobject.pushsvalue2s(L, ts);\n    s = ts.getstr();\n    /* internal copy */\n  }\n\n  api_check(L, L.top <= L.ci.top, "stack overflow");\n  return s;\n};\n\nvar lua_pushvfstring = function lua_pushvfstring(L, fmt, argp) {\n  fmt = from_userstring(fmt);\n  return lobject.luaO_pushvfstring(L, fmt, argp);\n};\n\nvar lua_pushfstring = function lua_pushfstring(L, fmt) {\n  fmt = from_userstring(fmt);\n\n  for (var _len = arguments.length, argp = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    argp[_key - 2] = arguments[_key];\n  }\n\n  return lobject.luaO_pushvfstring(L, fmt, argp);\n};\n/* Similar to lua_pushstring, but takes a JS string */\n\n\nvar lua_pushliteral = function lua_pushliteral(L, s) {\n  if (s === undefined || s === null) {\n    L.stack[L.top] = new TValue(LUA_TNIL, null);\n    L.top++;\n  } else {\n    fengari_argcheck(typeof s === "string");\n    var ts = luaS_newliteral(L, s);\n    lobject.pushsvalue2s(L, ts);\n    s = ts.getstr();\n    /* internal copy */\n  }\n\n  api_check(L, L.top <= L.ci.top, "stack overflow");\n  return s;\n};\n\nvar lua_pushcclosure = function lua_pushcclosure(L, fn, n) {\n  fengari_argcheck(typeof fn === "function");\n  fengari_argcheckinteger(n);\n  if (n === 0) L.stack[L.top] = new TValue(LUA_TLCF, fn);else {\n    api_checknelems(L, n);\n    api_check(L, n <= lfunc.MAXUPVAL, "upvalue index too large");\n    var cl = new CClosure(L, fn, n);\n\n    for (var i = 0; i < n; i++) {\n      cl.upvalue[i].setfrom(L.stack[L.top - n + i]);\n    }\n\n    for (var _i = 1; _i < n; _i++) {\n      delete L.stack[--L.top];\n    }\n\n    if (n > 0) --L.top;\n    L.stack[L.top].setclCvalue(cl);\n  }\n  api_incr_top(L);\n};\n\nvar lua_pushjsclosure = lua_pushcclosure;\n\nvar lua_pushcfunction = function lua_pushcfunction(L, fn) {\n  lua_pushcclosure(L, fn, 0);\n};\n\nvar lua_pushjsfunction = lua_pushcfunction;\n\nvar lua_pushboolean = function lua_pushboolean(L, b) {\n  L.stack[L.top] = new TValue(LUA_TBOOLEAN, !!b);\n  api_incr_top(L);\n};\n\nvar lua_pushlightuserdata = function lua_pushlightuserdata(L, p) {\n  L.stack[L.top] = new TValue(LUA_TLIGHTUSERDATA, p);\n  api_incr_top(L);\n};\n\nvar lua_pushthread = function lua_pushthread(L) {\n  L.stack[L.top] = new TValue(LUA_TTHREAD, L);\n  api_incr_top(L);\n  return L.l_G.mainthread === L;\n};\n\nvar lua_pushglobaltable = function lua_pushglobaltable(L) {\n  lua_rawgeti(L, LUA_REGISTRYINDEX, LUA_RIDX_GLOBALS);\n};\n/*\n** set functions (stack -> Lua)\n*/\n\n/*\n** t[k] = value at the top of the stack (where \'k\' is a string)\n*/\n\n\nvar auxsetstr = function auxsetstr(L, t, k) {\n  var str = luaS_new(L, from_userstring(k));\n  api_checknelems(L, 1);\n  lobject.pushsvalue2s(L, str);\n  /* push \'str\' (to make it a TValue) */\n\n  api_check(L, L.top <= L.ci.top, "stack overflow");\n  lvm.settable(L, t, L.stack[L.top - 1], L.stack[L.top - 2]);\n  /* pop value and key */\n\n  delete L.stack[--L.top];\n  delete L.stack[--L.top];\n};\n\nvar lua_setglobal = function lua_setglobal(L, name) {\n  auxsetstr(L, ltable.luaH_getint(L.l_G.l_registry.value, LUA_RIDX_GLOBALS), name);\n};\n\nvar lua_setmetatable = function lua_setmetatable(L, objindex) {\n  api_checknelems(L, 1);\n  var mt;\n  var obj = index2addr(L, objindex);\n  if (L.stack[L.top - 1].ttisnil()) mt = null;else {\n    api_check(L, L.stack[L.top - 1].ttistable(), "table expected");\n    mt = L.stack[L.top - 1].value;\n  }\n\n  switch (obj.ttnov()) {\n    case LUA_TUSERDATA:\n    case LUA_TTABLE:\n      {\n        obj.value.metatable = mt;\n        break;\n      }\n\n    default:\n      {\n        L.l_G.mt[obj.ttnov()] = mt;\n        break;\n      }\n  }\n\n  delete L.stack[--L.top];\n  return true;\n};\n\nvar lua_settable = function lua_settable(L, idx) {\n  api_checknelems(L, 2);\n  var t = index2addr(L, idx);\n  lvm.settable(L, t, L.stack[L.top - 2], L.stack[L.top - 1]);\n  delete L.stack[--L.top];\n  delete L.stack[--L.top];\n};\n\nvar lua_setfield = function lua_setfield(L, idx, k) {\n  auxsetstr(L, index2addr(L, idx), k);\n};\n\nvar lua_seti = function lua_seti(L, idx, n) {\n  fengari_argcheckinteger(n);\n  api_checknelems(L, 1);\n  var t = index2addr(L, idx);\n  L.stack[L.top] = new TValue(LUA_TNUMINT, n);\n  api_incr_top(L);\n  lvm.settable(L, t, L.stack[L.top - 1], L.stack[L.top - 2]);\n  /* pop value and key */\n\n  delete L.stack[--L.top];\n  delete L.stack[--L.top];\n};\n\nvar lua_rawset = function lua_rawset(L, idx) {\n  api_checknelems(L, 2);\n  var o = index2addr(L, idx);\n  api_check(L, o.ttistable(), "table expected");\n  var k = L.stack[L.top - 2];\n  var v = L.stack[L.top - 1];\n  ltable.luaH_setfrom(L, o.value, k, v);\n  ltable.invalidateTMcache(o.value);\n  delete L.stack[--L.top];\n  delete L.stack[--L.top];\n};\n\nvar lua_rawseti = function lua_rawseti(L, idx, n) {\n  fengari_argcheckinteger(n);\n  api_checknelems(L, 1);\n  var o = index2addr(L, idx);\n  api_check(L, o.ttistable(), "table expected");\n  ltable.luaH_setint(o.value, n, L.stack[L.top - 1]);\n  delete L.stack[--L.top];\n};\n\nvar lua_rawsetp = function lua_rawsetp(L, idx, p) {\n  api_checknelems(L, 1);\n  var o = index2addr(L, idx);\n  api_check(L, o.ttistable(), "table expected");\n  var k = new TValue(LUA_TLIGHTUSERDATA, p);\n  var v = L.stack[L.top - 1];\n  ltable.luaH_setfrom(L, o.value, k, v);\n  delete L.stack[--L.top];\n};\n/*\n** get functions (Lua -> stack)\n*/\n\n\nvar auxgetstr = function auxgetstr(L, t, k) {\n  var str = luaS_new(L, from_userstring(k));\n  lobject.pushsvalue2s(L, str);\n  api_check(L, L.top <= L.ci.top, "stack overflow");\n  lvm.luaV_gettable(L, t, L.stack[L.top - 1], L.top - 1);\n  return L.stack[L.top - 1].ttnov();\n};\n\nvar lua_rawgeti = function lua_rawgeti(L, idx, n) {\n  var t = index2addr(L, idx);\n  fengari_argcheckinteger(n);\n  api_check(L, t.ttistable(), "table expected");\n  lobject.pushobj2s(L, ltable.luaH_getint(t.value, n));\n  api_check(L, L.top <= L.ci.top, "stack overflow");\n  return L.stack[L.top - 1].ttnov();\n};\n\nvar lua_rawgetp = function lua_rawgetp(L, idx, p) {\n  var t = index2addr(L, idx);\n  api_check(L, t.ttistable(), "table expected");\n  var k = new TValue(LUA_TLIGHTUSERDATA, p);\n  lobject.pushobj2s(L, ltable.luaH_get(L, t.value, k));\n  api_check(L, L.top <= L.ci.top, "stack overflow");\n  return L.stack[L.top - 1].ttnov();\n};\n\nvar lua_rawget = function lua_rawget(L, idx) {\n  var t = index2addr(L, idx);\n  api_check(L, t.ttistable(t), "table expected");\n  lobject.setobj2s(L, L.top - 1, ltable.luaH_get(L, t.value, L.stack[L.top - 1]));\n  return L.stack[L.top - 1].ttnov();\n}; // narray and nrec are mostly useless for this implementation\n\n\nvar lua_createtable = function lua_createtable(L, narray, nrec) {\n  var t = new lobject.TValue(LUA_TTABLE, ltable.luaH_new(L));\n  L.stack[L.top] = t;\n  api_incr_top(L);\n};\n\nvar luaS_newudata = function luaS_newudata(L, size) {\n  return new lobject.Udata(L, size);\n};\n\nvar lua_newuserdata = function lua_newuserdata(L, size) {\n  var u = luaS_newudata(L, size);\n  L.stack[L.top] = new lobject.TValue(LUA_TUSERDATA, u);\n  api_incr_top(L);\n  return u.data;\n};\n\nvar aux_upvalue = function aux_upvalue(L, fi, n) {\n  fengari_argcheckinteger(n);\n\n  switch (fi.ttype()) {\n    case LUA_TCCL:\n      {\n        /* C closure */\n        var f = fi.value;\n        if (!(1 <= n && n <= f.nupvalues)) return null;\n        return {\n          name: to_luastring("", true),\n          val: f.upvalue[n - 1]\n        };\n      }\n\n    case LUA_TLCL:\n      {\n        /* Lua closure */\n        var _f = fi.value;\n        var p = _f.p;\n        if (!(1 <= n && n <= p.upvalues.length)) return null;\n        var name = p.upvalues[n - 1].name;\n        return {\n          name: name ? name.getstr() : to_luastring("(*no name)", true),\n          val: _f.upvals[n - 1]\n        };\n      }\n\n    default:\n      return null;\n\n    /* not a closure */\n  }\n};\n\nvar lua_getupvalue = function lua_getupvalue(L, funcindex, n) {\n  var up = aux_upvalue(L, index2addr(L, funcindex), n);\n\n  if (up) {\n    var name = up.name;\n    var val = up.val;\n    lobject.pushobj2s(L, val);\n    api_check(L, L.top <= L.ci.top, "stack overflow");\n    return name;\n  }\n\n  return null;\n};\n\nvar lua_setupvalue = function lua_setupvalue(L, funcindex, n) {\n  var fi = index2addr(L, funcindex);\n  api_checknelems(L, 1);\n  var aux = aux_upvalue(L, fi, n);\n\n  if (aux) {\n    var name = aux.name;\n    var val = aux.val;\n    val.setfrom(L.stack[L.top - 1]);\n    delete L.stack[--L.top];\n    return name;\n  }\n\n  return null;\n};\n\nvar lua_newtable = function lua_newtable(L) {\n  lua_createtable(L, 0, 0);\n};\n\nvar lua_register = function lua_register(L, n, f) {\n  lua_pushcfunction(L, f);\n  lua_setglobal(L, n);\n};\n\nvar lua_getmetatable = function lua_getmetatable(L, objindex) {\n  var obj = index2addr(L, objindex);\n  var mt;\n  var res = false;\n\n  switch (obj.ttnov()) {\n    case LUA_TTABLE:\n    case LUA_TUSERDATA:\n      mt = obj.value.metatable;\n      break;\n\n    default:\n      mt = L.l_G.mt[obj.ttnov()];\n      break;\n  }\n\n  if (mt !== null && mt !== undefined) {\n    L.stack[L.top] = new TValue(LUA_TTABLE, mt);\n    api_incr_top(L);\n    res = true;\n  }\n\n  return res;\n};\n\nvar lua_getuservalue = function lua_getuservalue(L, idx) {\n  var o = index2addr(L, idx);\n  api_check(L, o.ttisfulluserdata(), "full userdata expected");\n  var uv = o.value.uservalue;\n  L.stack[L.top] = new TValue(uv.type, uv.value);\n  api_incr_top(L);\n  return L.stack[L.top - 1].ttnov();\n};\n\nvar lua_gettable = function lua_gettable(L, idx) {\n  var t = index2addr(L, idx);\n  lvm.luaV_gettable(L, t, L.stack[L.top - 1], L.top - 1);\n  return L.stack[L.top - 1].ttnov();\n};\n\nvar lua_getfield = function lua_getfield(L, idx, k) {\n  return auxgetstr(L, index2addr(L, idx), k);\n};\n\nvar lua_geti = function lua_geti(L, idx, n) {\n  var t = index2addr(L, idx);\n  fengari_argcheckinteger(n);\n  L.stack[L.top] = new TValue(LUA_TNUMINT, n);\n  api_incr_top(L);\n  lvm.luaV_gettable(L, t, L.stack[L.top - 1], L.top - 1);\n  return L.stack[L.top - 1].ttnov();\n};\n\nvar lua_getglobal = function lua_getglobal(L, name) {\n  return auxgetstr(L, ltable.luaH_getint(L.l_G.l_registry.value, LUA_RIDX_GLOBALS), name);\n};\n/*\n** access functions (stack -> JS)\n*/\n\n\nvar lua_toboolean = function lua_toboolean(L, idx) {\n  var o = index2addr(L, idx);\n  return !o.l_isfalse();\n};\n\nvar lua_tolstring = function lua_tolstring(L, idx) {\n  var o = index2addr(L, idx);\n\n  if (!o.ttisstring()) {\n    if (!lvm.cvt2str(o)) {\n      /* not convertible? */\n      return null;\n    }\n\n    lobject.luaO_tostring(L, o);\n  }\n\n  return o.svalue();\n};\n\nvar lua_tostring = lua_tolstring;\n\nvar lua_tojsstring = function lua_tojsstring(L, idx) {\n  var o = index2addr(L, idx);\n\n  if (!o.ttisstring()) {\n    if (!lvm.cvt2str(o)) {\n      /* not convertible? */\n      return null;\n    }\n\n    lobject.luaO_tostring(L, o);\n  }\n\n  return o.jsstring();\n};\n\nvar lua_todataview = function lua_todataview(L, idx) {\n  var u8 = lua_tolstring(L, idx);\n  return new DataView(u8.buffer, u8.byteOffset, u8.byteLength);\n};\n\nvar lua_rawlen = function lua_rawlen(L, idx) {\n  var o = index2addr(L, idx);\n\n  switch (o.ttype()) {\n    case LUA_TSHRSTR:\n    case LUA_TLNGSTR:\n      return o.vslen();\n\n    case LUA_TUSERDATA:\n      return o.value.len;\n\n    case LUA_TTABLE:\n      return ltable.luaH_getn(o.value);\n\n    default:\n      return 0;\n  }\n};\n\nvar lua_tocfunction = function lua_tocfunction(L, idx) {\n  var o = index2addr(L, idx);\n  if (o.ttislcf() || o.ttisCclosure()) return o.value;else return null;\n  /* not a C function */\n};\n\nvar lua_tointeger = function lua_tointeger(L, idx) {\n  var n = lua_tointegerx(L, idx);\n  return n === false ? 0 : n;\n};\n\nvar lua_tointegerx = function lua_tointegerx(L, idx) {\n  return lvm.tointeger(index2addr(L, idx));\n};\n\nvar lua_tonumber = function lua_tonumber(L, idx) {\n  var n = lua_tonumberx(L, idx);\n  return n === false ? 0 : n;\n};\n\nvar lua_tonumberx = function lua_tonumberx(L, idx) {\n  return lvm.tonumber(index2addr(L, idx));\n};\n\nvar lua_touserdata = function lua_touserdata(L, idx) {\n  var o = index2addr(L, idx);\n\n  switch (o.ttnov()) {\n    case LUA_TUSERDATA:\n      return o.value.data;\n\n    case LUA_TLIGHTUSERDATA:\n      return o.value;\n\n    default:\n      return null;\n  }\n};\n\nvar lua_tothread = function lua_tothread(L, idx) {\n  var o = index2addr(L, idx);\n  return o.ttisthread() ? o.value : null;\n};\n\nvar lua_topointer = function lua_topointer(L, idx) {\n  var o = index2addr(L, idx);\n\n  switch (o.ttype()) {\n    case LUA_TTABLE:\n    case LUA_TLCL:\n    case LUA_TCCL:\n    case LUA_TLCF:\n    case LUA_TTHREAD:\n    case LUA_TUSERDATA:\n    /* note: this differs in behaviour to reference lua implementation */\n\n    case LUA_TLIGHTUSERDATA:\n      return o.value;\n\n    default:\n      return null;\n  }\n};\n/* A proxy is a function that the same lua value to the given lua state. */\n\n/* Having a weakmap of created proxies was only way I could think of to provide an \'isproxy\' function */\n\n\nvar seen = new WeakMap();\n/* is the passed object a proxy? is it from the given state? (if passed) */\n\nvar lua_isproxy = function lua_isproxy(p, L) {\n  var G = seen.get(p);\n  if (!G) return false;\n  return L === null || L.l_G === G;\n};\n/* Use \'create_proxy\' helper function so that \'L\' is not in scope */\n\n\nvar create_proxy = function create_proxy(G, type, value) {\n  var proxy = function proxy(L) {\n    api_check(L, L instanceof lstate.lua_State && G === L.l_G, "must be from same global state");\n    L.stack[L.top] = new TValue(type, value);\n    api_incr_top(L);\n  };\n\n  seen.set(proxy, G);\n  return proxy;\n};\n\nvar lua_toproxy = function lua_toproxy(L, idx) {\n  var tv = index2addr(L, idx);\n  /* pass broken down tv incase it is an upvalue index */\n\n  return create_proxy(L.l_G, tv.type, tv.value);\n};\n\nvar lua_compare = function lua_compare(L, index1, index2, op) {\n  var o1 = index2addr(L, index1);\n  var o2 = index2addr(L, index2);\n  var i = 0;\n\n  if (isvalid(o1) && isvalid(o2)) {\n    switch (op) {\n      case LUA_OPEQ:\n        i = lvm.luaV_equalobj(L, o1, o2);\n        break;\n\n      case LUA_OPLT:\n        i = lvm.luaV_lessthan(L, o1, o2);\n        break;\n\n      case LUA_OPLE:\n        i = lvm.luaV_lessequal(L, o1, o2);\n        break;\n\n      default:\n        api_check(L, false, "invalid option");\n    }\n  }\n\n  return i;\n};\n\nvar lua_stringtonumber = function lua_stringtonumber(L, s) {\n  var tv = new TValue();\n  var sz = lobject.luaO_str2num(s, tv);\n\n  if (sz !== 0) {\n    L.stack[L.top] = tv;\n    api_incr_top(L);\n  }\n\n  return sz;\n};\n\nvar f_call = function f_call(L, ud) {\n  ldo.luaD_callnoyield(L, ud.funcOff, ud.nresults);\n};\n\nvar lua_type = function lua_type(L, idx) {\n  var o = index2addr(L, idx);\n  return isvalid(o) ? o.ttnov() : LUA_TNONE;\n};\n\nvar lua_typename = function lua_typename(L, t) {\n  api_check(L, LUA_TNONE <= t && t < LUA_NUMTAGS, "invalid tag");\n  return ltm.ttypename(t);\n};\n\nvar lua_iscfunction = function lua_iscfunction(L, idx) {\n  var o = index2addr(L, idx);\n  return o.ttislcf(o) || o.ttisCclosure();\n};\n\nvar lua_isnil = function lua_isnil(L, n) {\n  return lua_type(L, n) === LUA_TNIL;\n};\n\nvar lua_isboolean = function lua_isboolean(L, n) {\n  return lua_type(L, n) === LUA_TBOOLEAN;\n};\n\nvar lua_isnone = function lua_isnone(L, n) {\n  return lua_type(L, n) === LUA_TNONE;\n};\n\nvar lua_isnoneornil = function lua_isnoneornil(L, n) {\n  return lua_type(L, n) <= 0;\n};\n\nvar lua_istable = function lua_istable(L, idx) {\n  return index2addr(L, idx).ttistable();\n};\n\nvar lua_isinteger = function lua_isinteger(L, idx) {\n  return index2addr(L, idx).ttisinteger();\n};\n\nvar lua_isnumber = function lua_isnumber(L, idx) {\n  return lvm.tonumber(index2addr(L, idx)) !== false;\n};\n\nvar lua_isstring = function lua_isstring(L, idx) {\n  var o = index2addr(L, idx);\n  return o.ttisstring() || lvm.cvt2str(o);\n};\n\nvar lua_isuserdata = function lua_isuserdata(L, idx) {\n  var o = index2addr(L, idx);\n  return o.ttisfulluserdata(o) || o.ttislightuserdata();\n};\n\nvar lua_isthread = function lua_isthread(L, idx) {\n  return lua_type(L, idx) === LUA_TTHREAD;\n};\n\nvar lua_isfunction = function lua_isfunction(L, idx) {\n  return lua_type(L, idx) === LUA_TFUNCTION;\n};\n\nvar lua_islightuserdata = function lua_islightuserdata(L, idx) {\n  return lua_type(L, idx) === LUA_TLIGHTUSERDATA;\n};\n\nvar lua_rawequal = function lua_rawequal(L, index1, index2) {\n  var o1 = index2addr(L, index1);\n  var o2 = index2addr(L, index2);\n  return isvalid(o1) && isvalid(o2) ? lvm.luaV_equalobj(null, o1, o2) : 0;\n};\n\nvar lua_arith = function lua_arith(L, op) {\n  if (op !== LUA_OPUNM && op !== LUA_OPBNOT) api_checknelems(L, 2);\n  /* all other operations expect two operands */\n  else {\n      /* for unary operations, add fake 2nd operand */\n      api_checknelems(L, 1);\n      lobject.pushobj2s(L, L.stack[L.top - 1]);\n      api_check(L, L.top <= L.ci.top, "stack overflow");\n    }\n  /* first operand at top - 2, second at top - 1; result go to top - 2 */\n\n  lobject.luaO_arith(L, op, L.stack[L.top - 2], L.stack[L.top - 1], L.stack[L.top - 2]);\n  delete L.stack[--L.top];\n  /* remove second operand */\n};\n/*\n** \'load\' and \'call\' functions (run Lua code)\n*/\n\n\nvar default_chunkname = to_luastring("?");\n\nvar lua_load = function lua_load(L, reader, data, chunkname, mode) {\n  if (!chunkname) chunkname = default_chunkname;else chunkname = from_userstring(chunkname);\n  if (mode !== null) mode = from_userstring(mode);\n  var z = new ZIO(L, reader, data);\n  var status = ldo.luaD_protectedparser(L, z, chunkname, mode);\n\n  if (status === LUA_OK) {\n    /* no errors? */\n    var f = L.stack[L.top - 1].value;\n    /* get newly created function */\n\n    if (f.nupvalues >= 1) {\n      /* does it have an upvalue? */\n\n      /* get global table from registry */\n      var gt = ltable.luaH_getint(L.l_G.l_registry.value, LUA_RIDX_GLOBALS);\n      /* set global table as 1st upvalue of \'f\' (may be LUA_ENV) */\n\n      f.upvals[0].setfrom(gt);\n    }\n  }\n\n  return status;\n};\n\nvar lua_dump = function lua_dump(L, writer, data, strip) {\n  api_checknelems(L, 1);\n  var o = L.stack[L.top - 1];\n  if (o.ttisLclosure()) return luaU_dump(L, o.value.p, writer, data, strip);\n  return 1;\n};\n\nvar lua_status = function lua_status(L) {\n  return L.status;\n};\n\nvar lua_setuservalue = function lua_setuservalue(L, idx) {\n  api_checknelems(L, 1);\n  var o = index2addr(L, idx);\n  api_check(L, o.ttisfulluserdata(), "full userdata expected");\n  o.value.uservalue.setfrom(L.stack[L.top - 1]);\n  delete L.stack[--L.top];\n};\n\nvar checkresults = function checkresults(L, na, nr) {\n  api_check(L, nr === LUA_MULTRET || L.ci.top - L.top >= nr - na, "results from function overflow current stack size");\n};\n\nvar lua_callk = function lua_callk(L, nargs, nresults, ctx, k) {\n  api_check(L, k === null || !(L.ci.callstatus & lstate.CIST_LUA), "cannot use continuations inside hooks");\n  api_checknelems(L, nargs + 1);\n  api_check(L, L.status === LUA_OK, "cannot do calls on non-normal thread");\n  checkresults(L, nargs, nresults);\n  var func = L.top - (nargs + 1);\n\n  if (k !== null && L.nny === 0) {\n    /* need to prepare continuation? */\n    L.ci.c_k = k;\n    L.ci.c_ctx = ctx;\n    ldo.luaD_call(L, func, nresults);\n  } else {\n    /* no continuation or no yieldable */\n    ldo.luaD_callnoyield(L, func, nresults);\n  }\n\n  if (nresults === LUA_MULTRET && L.ci.top < L.top) L.ci.top = L.top;\n};\n\nvar lua_call = function lua_call(L, n, r) {\n  lua_callk(L, n, r, 0, null);\n};\n\nvar lua_pcallk = function lua_pcallk(L, nargs, nresults, errfunc, ctx, k) {\n  api_check(L, k === null || !(L.ci.callstatus & lstate.CIST_LUA), "cannot use continuations inside hooks");\n  api_checknelems(L, nargs + 1);\n  api_check(L, L.status === LUA_OK, "cannot do calls on non-normal thread");\n  checkresults(L, nargs, nresults);\n  var status;\n  var func;\n  if (errfunc === 0) func = 0;else {\n    func = index2addr_(L, errfunc);\n  }\n  var funcOff = L.top - (nargs + 1);\n  /* function to be called */\n\n  if (k === null || L.nny > 0) {\n    /* no continuation or no yieldable? */\n    var c = {\n      funcOff: funcOff,\n      nresults: nresults\n      /* do a \'conventional\' protected call */\n\n    };\n    status = ldo.luaD_pcall(L, f_call, c, funcOff, func);\n  } else {\n    /* prepare continuation (call is already protected by \'resume\') */\n    var ci = L.ci;\n    ci.c_k = k;\n    /* prepare continuation (call is already protected by \'resume\') */\n\n    ci.c_ctx = ctx;\n    /* prepare continuation (call is already protected by \'resume\') */\n\n    /* save information for error recovery */\n\n    ci.extra = funcOff;\n    ci.c_old_errfunc = L.errfunc;\n    L.errfunc = func;\n    ci.callstatus &= ~lstate.CIST_OAH | L.allowhook;\n    ci.callstatus |= lstate.CIST_YPCALL;\n    /* function can do error recovery */\n\n    ldo.luaD_call(L, funcOff, nresults);\n    /* do the call */\n\n    ci.callstatus &= ~lstate.CIST_YPCALL;\n    L.errfunc = ci.c_old_errfunc;\n    status = LUA_OK;\n  }\n\n  if (nresults === LUA_MULTRET && L.ci.top < L.top) L.ci.top = L.top;\n  return status;\n};\n\nvar lua_pcall = function lua_pcall(L, n, r, f) {\n  return lua_pcallk(L, n, r, f, 0, null);\n};\n/*\n** miscellaneous functions\n*/\n\n\nvar lua_error = function lua_error(L) {\n  api_checknelems(L, 1);\n  ldebug.luaG_errormsg(L);\n};\n\nvar lua_next = function lua_next(L, idx) {\n  var t = index2addr(L, idx);\n  api_check(L, t.ttistable(), "table expected");\n  L.stack[L.top] = new TValue();\n  var more = ltable.luaH_next(L, t.value, L.top - 1);\n\n  if (more) {\n    api_incr_top(L);\n    return 1;\n  } else {\n    delete L.stack[L.top];\n    delete L.stack[--L.top];\n    return 0;\n  }\n};\n\nvar lua_concat = function lua_concat(L, n) {\n  api_checknelems(L, n);\n  if (n >= 2) lvm.luaV_concat(L, n);else if (n === 0) {\n    lobject.pushsvalue2s(L, luaS_bless(L, to_luastring("", true)));\n    api_check(L, L.top <= L.ci.top, "stack overflow");\n  }\n};\n\nvar lua_len = function lua_len(L, idx) {\n  var t = index2addr(L, idx);\n  var tv = new TValue();\n  lvm.luaV_objlen(L, tv, t);\n  L.stack[L.top] = tv;\n  api_incr_top(L);\n};\n\nvar getupvalref = function getupvalref(L, fidx, n) {\n  var fi = index2addr(L, fidx);\n  api_check(L, fi.ttisLclosure(), "Lua function expected");\n  var f = fi.value;\n  fengari_argcheckinteger(n);\n  api_check(L, 1 <= n && n <= f.p.upvalues.length, "invalid upvalue index");\n  return {\n    f: f,\n    i: n - 1\n  };\n};\n\nvar lua_upvalueid = function lua_upvalueid(L, fidx, n) {\n  var fi = index2addr(L, fidx);\n\n  switch (fi.ttype()) {\n    case LUA_TLCL:\n      {\n        /* lua closure */\n        var ref = getupvalref(L, fidx, n);\n        return ref.f.upvals[ref.i];\n      }\n\n    case LUA_TCCL:\n      {\n        /* C closure */\n        var f = fi.value;\n        api_check(L, (n | 0) === n && n > 0 && n <= f.nupvalues, "invalid upvalue index");\n        return f.upvalue[n - 1];\n      }\n\n    default:\n      {\n        api_check(L, false, "closure expected");\n        return null;\n      }\n  }\n};\n\nvar lua_upvaluejoin = function lua_upvaluejoin(L, fidx1, n1, fidx2, n2) {\n  var ref1 = getupvalref(L, fidx1, n1);\n  var ref2 = getupvalref(L, fidx2, n2);\n  var up2 = ref2.f.upvals[ref2.i];\n  ref1.f.upvals[ref1.i] = up2;\n}; // This functions are only there for compatibility purposes\n\n\nvar lua_gc = function lua_gc() {};\n\nvar lua_getallocf = function lua_getallocf() {\n  console.warn("lua_getallocf is not available");\n  return 0;\n};\n\nvar lua_setallocf = function lua_setallocf() {\n  console.warn("lua_setallocf is not available");\n  return 0;\n};\n\nvar lua_getextraspace = function lua_getextraspace() {\n  console.warn("lua_getextraspace is not available");\n  return 0;\n};\n\nmodule.exports.api_incr_top = api_incr_top;\nmodule.exports.api_checknelems = api_checknelems;\nmodule.exports.lua_absindex = lua_absindex;\nmodule.exports.lua_arith = lua_arith;\nmodule.exports.lua_atpanic = lua_atpanic;\nmodule.exports.lua_atnativeerror = lua_atnativeerror;\nmodule.exports.lua_call = lua_call;\nmodule.exports.lua_callk = lua_callk;\nmodule.exports.lua_checkstack = lua_checkstack;\nmodule.exports.lua_compare = lua_compare;\nmodule.exports.lua_concat = lua_concat;\nmodule.exports.lua_copy = lua_copy;\nmodule.exports.lua_createtable = lua_createtable;\nmodule.exports.lua_dump = lua_dump;\nmodule.exports.lua_error = lua_error;\nmodule.exports.lua_gc = lua_gc;\nmodule.exports.lua_getallocf = lua_getallocf;\nmodule.exports.lua_getextraspace = lua_getextraspace;\nmodule.exports.lua_getfield = lua_getfield;\nmodule.exports.lua_getglobal = lua_getglobal;\nmodule.exports.lua_geti = lua_geti;\nmodule.exports.lua_getmetatable = lua_getmetatable;\nmodule.exports.lua_gettable = lua_gettable;\nmodule.exports.lua_gettop = lua_gettop;\nmodule.exports.lua_getupvalue = lua_getupvalue;\nmodule.exports.lua_getuservalue = lua_getuservalue;\nmodule.exports.lua_insert = lua_insert;\nmodule.exports.lua_isboolean = lua_isboolean;\nmodule.exports.lua_iscfunction = lua_iscfunction;\nmodule.exports.lua_isfunction = lua_isfunction;\nmodule.exports.lua_isinteger = lua_isinteger;\nmodule.exports.lua_islightuserdata = lua_islightuserdata;\nmodule.exports.lua_isnil = lua_isnil;\nmodule.exports.lua_isnone = lua_isnone;\nmodule.exports.lua_isnoneornil = lua_isnoneornil;\nmodule.exports.lua_isnumber = lua_isnumber;\nmodule.exports.lua_isproxy = lua_isproxy;\nmodule.exports.lua_isstring = lua_isstring;\nmodule.exports.lua_istable = lua_istable;\nmodule.exports.lua_isthread = lua_isthread;\nmodule.exports.lua_isuserdata = lua_isuserdata;\nmodule.exports.lua_len = lua_len;\nmodule.exports.lua_load = lua_load;\nmodule.exports.lua_newtable = lua_newtable;\nmodule.exports.lua_newuserdata = lua_newuserdata;\nmodule.exports.lua_next = lua_next;\nmodule.exports.lua_pcall = lua_pcall;\nmodule.exports.lua_pcallk = lua_pcallk;\nmodule.exports.lua_pop = lua_pop;\nmodule.exports.lua_pushboolean = lua_pushboolean;\nmodule.exports.lua_pushcclosure = lua_pushcclosure;\nmodule.exports.lua_pushcfunction = lua_pushcfunction;\nmodule.exports.lua_pushfstring = lua_pushfstring;\nmodule.exports.lua_pushglobaltable = lua_pushglobaltable;\nmodule.exports.lua_pushinteger = lua_pushinteger;\nmodule.exports.lua_pushjsclosure = lua_pushjsclosure;\nmodule.exports.lua_pushjsfunction = lua_pushjsfunction;\nmodule.exports.lua_pushlightuserdata = lua_pushlightuserdata;\nmodule.exports.lua_pushliteral = lua_pushliteral;\nmodule.exports.lua_pushlstring = lua_pushlstring;\nmodule.exports.lua_pushnil = lua_pushnil;\nmodule.exports.lua_pushnumber = lua_pushnumber;\nmodule.exports.lua_pushstring = lua_pushstring;\nmodule.exports.lua_pushthread = lua_pushthread;\nmodule.exports.lua_pushvalue = lua_pushvalue;\nmodule.exports.lua_pushvfstring = lua_pushvfstring;\nmodule.exports.lua_rawequal = lua_rawequal;\nmodule.exports.lua_rawget = lua_rawget;\nmodule.exports.lua_rawgeti = lua_rawgeti;\nmodule.exports.lua_rawgetp = lua_rawgetp;\nmodule.exports.lua_rawlen = lua_rawlen;\nmodule.exports.lua_rawset = lua_rawset;\nmodule.exports.lua_rawseti = lua_rawseti;\nmodule.exports.lua_rawsetp = lua_rawsetp;\nmodule.exports.lua_register = lua_register;\nmodule.exports.lua_remove = lua_remove;\nmodule.exports.lua_replace = lua_replace;\nmodule.exports.lua_rotate = lua_rotate;\nmodule.exports.lua_setallocf = lua_setallocf;\nmodule.exports.lua_setfield = lua_setfield;\nmodule.exports.lua_setglobal = lua_setglobal;\nmodule.exports.lua_seti = lua_seti;\nmodule.exports.lua_setmetatable = lua_setmetatable;\nmodule.exports.lua_settable = lua_settable;\nmodule.exports.lua_settop = lua_settop;\nmodule.exports.lua_setupvalue = lua_setupvalue;\nmodule.exports.lua_setuservalue = lua_setuservalue;\nmodule.exports.lua_status = lua_status;\nmodule.exports.lua_stringtonumber = lua_stringtonumber;\nmodule.exports.lua_toboolean = lua_toboolean;\nmodule.exports.lua_tocfunction = lua_tocfunction;\nmodule.exports.lua_todataview = lua_todataview;\nmodule.exports.lua_tointeger = lua_tointeger;\nmodule.exports.lua_tointegerx = lua_tointegerx;\nmodule.exports.lua_tojsstring = lua_tojsstring;\nmodule.exports.lua_tolstring = lua_tolstring;\nmodule.exports.lua_tonumber = lua_tonumber;\nmodule.exports.lua_tonumberx = lua_tonumberx;\nmodule.exports.lua_topointer = lua_topointer;\nmodule.exports.lua_toproxy = lua_toproxy;\nmodule.exports.lua_tostring = lua_tostring;\nmodule.exports.lua_tothread = lua_tothread;\nmodule.exports.lua_touserdata = lua_touserdata;\nmodule.exports.lua_type = lua_type;\nmodule.exports.lua_typename = lua_typename;\nmodule.exports.lua_upvalueid = lua_upvalueid;\nmodule.exports.lua_upvaluejoin = lua_upvaluejoin;\nmodule.exports.lua_version = lua_version;\nmodule.exports.lua_xmove = lua_xmove;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///19\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nvar _require = __webpack_require__(4),\n    lua_assert = _require.lua_assert;\n\nvar MBuffer = function MBuffer() {\n  _classCallCheck(this, MBuffer);\n\n  this.buffer = null;\n  this.n = 0;\n};\n\nvar luaZ_buffer = function luaZ_buffer(buff) {\n  return buff.buffer.subarray(0, buff.n);\n};\n\nvar luaZ_buffremove = function luaZ_buffremove(buff, i) {\n  buff.n -= i;\n};\n\nvar luaZ_resetbuffer = function luaZ_resetbuffer(buff) {\n  buff.n = 0;\n};\n\nvar luaZ_resizebuffer = function luaZ_resizebuffer(L, buff, size) {\n  var newbuff = new Uint8Array(size);\n  if (buff.buffer) newbuff.set(buff.buffer);\n  buff.buffer = newbuff;\n};\n\nvar ZIO =\n/*#__PURE__*/\nfunction () {\n  function ZIO(L, reader, data) {\n    _classCallCheck(this, ZIO);\n\n    this.L = L;\n    /* Lua state (for reader) */\n\n    lua_assert(typeof reader == "function", "ZIO requires a reader");\n    this.reader = reader;\n    /* reader function */\n\n    this.data = data;\n    /* additional data */\n\n    this.n = 0;\n    /* bytes still unread */\n\n    this.buffer = null;\n    this.off = 0;\n    /* current position in buffer */\n  }\n\n  _createClass(ZIO, [{\n    key: "zgetc",\n    value: function zgetc() {\n      return this.n-- > 0 ? this.buffer[this.off++] : luaZ_fill(this);\n    }\n  }]);\n\n  return ZIO;\n}();\n\nvar EOZ = -1;\n\nvar luaZ_fill = function luaZ_fill(z) {\n  var buff = z.reader(z.L, z.data);\n  if (buff === null) return EOZ;\n  lua_assert(buff instanceof Uint8Array, "Should only load binary of array of bytes");\n  var size = buff.length;\n  if (size === 0) return EOZ;\n  z.buffer = buff;\n  z.off = 0;\n  z.n = size - 1;\n  return z.buffer[z.off++];\n};\n/* b should be an array-like that will be set to bytes\n * b_offset is the offset at which to start filling */\n\n\nvar luaZ_read = function luaZ_read(z, b, b_offset, n) {\n  while (n) {\n    if (z.n === 0) {\n      /* no bytes in buffer? */\n      if (luaZ_fill(z) === EOZ) return n;\n      /* no more input; return number of missing bytes */\n      else {\n          z.n++;\n          /* luaZ_fill consumed first byte; put it back */\n\n          z.off--;\n        }\n    }\n\n    var m = n <= z.n ? n : z.n;\n    /* min. between n and z->n */\n\n    for (var i = 0; i < m; i++) {\n      b[b_offset++] = z.buffer[z.off++];\n    }\n\n    z.n -= m;\n    if (z.n === 0) // remove reference to input so it can get freed\n      z.buffer = null;\n    n -= m;\n  }\n\n  return 0;\n};\n\nmodule.exports.EOZ = EOZ;\nmodule.exports.luaZ_buffer = luaZ_buffer;\nmodule.exports.luaZ_buffremove = luaZ_buffremove;\nmodule.exports.luaZ_fill = luaZ_fill;\nmodule.exports.luaZ_read = luaZ_read;\nmodule.exports.luaZ_resetbuffer = luaZ_resetbuffer;\nmodule.exports.luaZ_resizebuffer = luaZ_resizebuffer;\nmodule.exports.MBuffer = MBuffer;\nmodule.exports.ZIO = ZIO;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///20\n')},function(module,exports,__webpack_require__){"use strict";eval("\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar _require = __webpack_require__(1),\n    _require$constant_typ = _require.constant_types,\n    LUA_TBOOLEAN = _require$constant_typ.LUA_TBOOLEAN,\n    LUA_TLNGSTR = _require$constant_typ.LUA_TLNGSTR,\n    LUA_ERRSYNTAX = _require.thread_status.LUA_ERRSYNTAX,\n    to_luastring = _require.to_luastring;\n\nvar _require2 = __webpack_require__(4),\n    LUA_MINBUFFER = _require2.LUA_MINBUFFER,\n    MAX_INT = _require2.MAX_INT,\n    lua_assert = _require2.lua_assert;\n\nvar ldebug = __webpack_require__(11);\n\nvar ldo = __webpack_require__(8);\n\nvar _require3 = __webpack_require__(22),\n    lisdigit = _require3.lisdigit,\n    lislalnum = _require3.lislalnum,\n    lislalpha = _require3.lislalpha,\n    lisspace = _require3.lisspace,\n    lisxdigit = _require3.lisxdigit;\n\nvar lobject = __webpack_require__(6);\n\nvar _require4 = __webpack_require__(10),\n    luaS_bless = _require4.luaS_bless,\n    luaS_hash = _require4.luaS_hash,\n    luaS_hashlongstr = _require4.luaS_hashlongstr,\n    luaS_new = _require4.luaS_new;\n\nvar ltable = __webpack_require__(9);\n\nvar _require5 = __webpack_require__(20),\n    EOZ = _require5.EOZ,\n    luaZ_buffer = _require5.luaZ_buffer,\n    luaZ_buffremove = _require5.luaZ_buffremove,\n    luaZ_resetbuffer = _require5.luaZ_resetbuffer,\n    luaZ_resizebuffer = _require5.luaZ_resizebuffer;\n\nvar FIRST_RESERVED = 257;\nvar LUA_ENV = to_luastring(\"_ENV\", true);\n/* terminal symbols denoted by reserved words */\n\nvar TK_AND = FIRST_RESERVED;\nvar TK_BREAK = FIRST_RESERVED + 1;\nvar TK_DO = FIRST_RESERVED + 2;\nvar TK_ELSE = FIRST_RESERVED + 3;\nvar TK_ELSEIF = FIRST_RESERVED + 4;\nvar TK_END = FIRST_RESERVED + 5;\nvar TK_FALSE = FIRST_RESERVED + 6;\nvar TK_FOR = FIRST_RESERVED + 7;\nvar TK_FUNCTION = FIRST_RESERVED + 8;\nvar TK_GOTO = FIRST_RESERVED + 9;\nvar TK_IF = FIRST_RESERVED + 10;\nvar TK_IN = FIRST_RESERVED + 11;\nvar TK_LOCAL = FIRST_RESERVED + 12;\nvar TK_NIL = FIRST_RESERVED + 13;\nvar TK_NOT = FIRST_RESERVED + 14;\nvar TK_OR = FIRST_RESERVED + 15;\nvar TK_REPEAT = FIRST_RESERVED + 16;\nvar TK_RETURN = FIRST_RESERVED + 17;\nvar TK_THEN = FIRST_RESERVED + 18;\nvar TK_TRUE = FIRST_RESERVED + 19;\nvar TK_UNTIL = FIRST_RESERVED + 20;\nvar TK_WHILE = FIRST_RESERVED + 21;\n/* other terminal symbols */\n\nvar TK_IDIV = FIRST_RESERVED + 22;\nvar TK_CONCAT = FIRST_RESERVED + 23;\nvar TK_DOTS = FIRST_RESERVED + 24;\nvar TK_EQ = FIRST_RESERVED + 25;\nvar TK_GE = FIRST_RESERVED + 26;\nvar TK_LE = FIRST_RESERVED + 27;\nvar TK_NE = FIRST_RESERVED + 28;\nvar TK_SHL = FIRST_RESERVED + 29;\nvar TK_SHR = FIRST_RESERVED + 30;\nvar TK_DBCOLON = FIRST_RESERVED + 31;\nvar TK_EOS = FIRST_RESERVED + 32;\nvar TK_FLT = FIRST_RESERVED + 33;\nvar TK_INT = FIRST_RESERVED + 34;\nvar TK_NAME = FIRST_RESERVED + 35;\nvar TK_STRING = FIRST_RESERVED + 36;\nvar RESERVED = {\n  \"TK_AND\": TK_AND,\n  \"TK_BREAK\": TK_BREAK,\n  \"TK_DO\": TK_DO,\n  \"TK_ELSE\": TK_ELSE,\n  \"TK_ELSEIF\": TK_ELSEIF,\n  \"TK_END\": TK_END,\n  \"TK_FALSE\": TK_FALSE,\n  \"TK_FOR\": TK_FOR,\n  \"TK_FUNCTION\": TK_FUNCTION,\n  \"TK_GOTO\": TK_GOTO,\n  \"TK_IF\": TK_IF,\n  \"TK_IN\": TK_IN,\n  \"TK_LOCAL\": TK_LOCAL,\n  \"TK_NIL\": TK_NIL,\n  \"TK_NOT\": TK_NOT,\n  \"TK_OR\": TK_OR,\n  \"TK_REPEAT\": TK_REPEAT,\n  \"TK_RETURN\": TK_RETURN,\n  \"TK_THEN\": TK_THEN,\n  \"TK_TRUE\": TK_TRUE,\n  \"TK_UNTIL\": TK_UNTIL,\n  \"TK_WHILE\": TK_WHILE,\n  \"TK_IDIV\": TK_IDIV,\n  \"TK_CONCAT\": TK_CONCAT,\n  \"TK_DOTS\": TK_DOTS,\n  \"TK_EQ\": TK_EQ,\n  \"TK_GE\": TK_GE,\n  \"TK_LE\": TK_LE,\n  \"TK_NE\": TK_NE,\n  \"TK_SHL\": TK_SHL,\n  \"TK_SHR\": TK_SHR,\n  \"TK_DBCOLON\": TK_DBCOLON,\n  \"TK_EOS\": TK_EOS,\n  \"TK_FLT\": TK_FLT,\n  \"TK_INT\": TK_INT,\n  \"TK_NAME\": TK_NAME,\n  \"TK_STRING\": TK_STRING\n};\nvar luaX_tokens = [\"and\", \"break\", \"do\", \"else\", \"elseif\", \"end\", \"false\", \"for\", \"function\", \"goto\", \"if\", \"in\", \"local\", \"nil\", \"not\", \"or\", \"repeat\", \"return\", \"then\", \"true\", \"until\", \"while\", \"//\", \"..\", \"...\", \"==\", \">=\", \"<=\", \"~=\", \"<<\", \">>\", \"::\", \"<eof>\", \"<number>\", \"<integer>\", \"<name>\", \"<string>\"].map(function (e, i) {\n  return to_luastring(e);\n});\n\nvar SemInfo = function SemInfo() {\n  _classCallCheck(this, SemInfo);\n\n  this.r = NaN;\n  this.i = NaN;\n  this.ts = null;\n};\n\nvar Token = function Token() {\n  _classCallCheck(this, Token);\n\n  this.token = NaN;\n  this.seminfo = new SemInfo();\n};\n/* state of the lexer plus state of the parser when shared by all\n   functions */\n\n\nvar LexState = function LexState() {\n  _classCallCheck(this, LexState);\n\n  this.current = NaN;\n  /* current character (charint) */\n\n  this.linenumber = NaN;\n  /* input line counter */\n\n  this.lastline = NaN;\n  /* line of last token 'consumed' */\n\n  this.t = new Token();\n  /* current token */\n\n  this.lookahead = new Token();\n  /* look ahead token */\n\n  this.fs = null;\n  /* current function (parser) */\n\n  this.L = null;\n  this.z = null;\n  /* input stream */\n\n  this.buff = null;\n  /* buffer for tokens */\n\n  this.h = null;\n  /* to reuse strings */\n\n  this.dyd = null;\n  /* dynamic structures used by the parser */\n\n  this.source = null;\n  /* current source name */\n\n  this.envn = null;\n  /* environment variable name */\n};\n\nvar save = function save(ls, c) {\n  var b = ls.buff;\n\n  if (b.n + 1 > b.buffer.length) {\n    if (b.buffer.length >= MAX_INT / 2) lexerror(ls, to_luastring(\"lexical element too long\", true), 0);\n    var newsize = b.buffer.length * 2;\n    luaZ_resizebuffer(ls.L, b, newsize);\n  }\n\n  b.buffer[b.n++] = c < 0 ? 255 + c + 1 : c;\n};\n\nvar luaX_token2str = function luaX_token2str(ls, token) {\n  if (token < FIRST_RESERVED) {\n    /* single-byte symbols? */\n    return lobject.luaO_pushfstring(ls.L, to_luastring(\"'%c'\", true), token);\n  } else {\n    var s = luaX_tokens[token - FIRST_RESERVED];\n    if (token < TK_EOS)\n      /* fixed format (symbols and reserved words)? */\n      return lobject.luaO_pushfstring(ls.L, to_luastring(\"'%s'\", true), s);else\n      /* names, strings, and numerals */\n      return s;\n  }\n};\n\nvar currIsNewline = function currIsNewline(ls) {\n  return ls.current === 10\n  /* ('\\n').charCodeAt(0) */\n  || ls.current === 13\n  /* ('\\r').charCodeAt(0) */\n  ;\n};\n\nvar next = function next(ls) {\n  ls.current = ls.z.zgetc();\n};\n\nvar save_and_next = function save_and_next(ls) {\n  save(ls, ls.current);\n  next(ls);\n};\n/*\n** creates a new string and anchors it in scanner's table so that\n** it will not be collected until the end of the compilation\n** (by that time it should be anchored somewhere)\n*/\n\n\nvar TVtrue = new lobject.TValue(LUA_TBOOLEAN, true);\n\nvar luaX_newstring = function luaX_newstring(ls, str) {\n  var L = ls.L;\n  var ts = luaS_new(L, str);\n  /* HACK: Workaround lack of ltable 'keyfromval' */\n\n  var tpair = ls.h.strong.get(luaS_hashlongstr(ts));\n\n  if (!tpair) {\n    /* not in use yet? */\n    var key = new lobject.TValue(LUA_TLNGSTR, ts);\n    ltable.luaH_setfrom(L, ls.h, key, TVtrue);\n  } else {\n    /* string already present */\n    ts = tpair.key.tsvalue();\n    /* re-use value previously stored */\n  }\n\n  return ts;\n};\n/*\n** increment line number and skips newline sequence (any of\n** \\n, \\r, \\n\\r, or \\r\\n)\n*/\n\n\nvar inclinenumber = function inclinenumber(ls) {\n  var old = ls.current;\n  lua_assert(currIsNewline(ls));\n  next(ls);\n  /* skip '\\n' or '\\r' */\n\n  if (currIsNewline(ls) && ls.current !== old) next(ls);\n  /* skip '\\n\\r' or '\\r\\n' */\n\n  if (++ls.linenumber >= MAX_INT) lexerror(ls, to_luastring(\"chunk has too many lines\", true), 0);\n};\n\nvar luaX_setinput = function luaX_setinput(L, ls, z, source, firstchar) {\n  ls.t = {\n    token: 0,\n    seminfo: new SemInfo()\n  };\n  ls.L = L;\n  ls.current = firstchar;\n  ls.lookahead = {\n    token: TK_EOS,\n    seminfo: new SemInfo()\n  };\n  ls.z = z;\n  ls.fs = null;\n  ls.linenumber = 1;\n  ls.lastline = 1;\n  ls.source = source;\n  ls.envn = luaS_bless(L, LUA_ENV);\n  luaZ_resizebuffer(L, ls.buff, LUA_MINBUFFER);\n  /* initialize buffer */\n};\n\nvar check_next1 = function check_next1(ls, c) {\n  if (ls.current === c) {\n    next(ls);\n    return true;\n  }\n\n  return false;\n};\n/*\n** Check whether current char is in set 'set' (with two chars) and\n** saves it\n*/\n\n\nvar check_next2 = function check_next2(ls, set) {\n  if (ls.current === set[0].charCodeAt(0) || ls.current === set[1].charCodeAt(0)) {\n    save_and_next(ls);\n    return true;\n  }\n\n  return false;\n};\n\nvar read_numeral = function read_numeral(ls, seminfo) {\n  var expo = \"Ee\";\n  var first = ls.current;\n  lua_assert(lisdigit(ls.current));\n  save_and_next(ls);\n  if (first === 48\n  /* ('0').charCodeAt(0) */\n  && check_next2(ls, \"xX\"))\n    /* hexadecimal? */\n    expo = \"Pp\";\n\n  for (;;) {\n    if (check_next2(ls, expo))\n      /* exponent part? */\n      check_next2(ls, \"-+\");\n    /* optional exponent sign */\n\n    if (lisxdigit(ls.current)) save_and_next(ls);else if (ls.current === 46\n    /* ('.').charCodeAt(0) */\n    ) save_and_next(ls);else break;\n  } // save(ls, 0);\n\n\n  var obj = new lobject.TValue();\n  if (lobject.luaO_str2num(luaZ_buffer(ls.buff), obj) === 0)\n    /* format error? */\n    lexerror(ls, to_luastring(\"malformed number\", true), TK_FLT);\n\n  if (obj.ttisinteger()) {\n    seminfo.i = obj.value;\n    return TK_INT;\n  } else {\n    lua_assert(obj.ttisfloat());\n    seminfo.r = obj.value;\n    return TK_FLT;\n  }\n};\n\nvar txtToken = function txtToken(ls, token) {\n  switch (token) {\n    case TK_NAME:\n    case TK_STRING:\n    case TK_FLT:\n    case TK_INT:\n      // save(ls, 0);\n      return lobject.luaO_pushfstring(ls.L, to_luastring(\"'%s'\", true), luaZ_buffer(ls.buff));\n\n    default:\n      return luaX_token2str(ls, token);\n  }\n};\n\nvar lexerror = function lexerror(ls, msg, token) {\n  msg = ldebug.luaG_addinfo(ls.L, msg, ls.source, ls.linenumber);\n  if (token) lobject.luaO_pushfstring(ls.L, to_luastring(\"%s near %s\"), msg, txtToken(ls, token));\n  ldo.luaD_throw(ls.L, LUA_ERRSYNTAX);\n};\n\nvar luaX_syntaxerror = function luaX_syntaxerror(ls, msg) {\n  lexerror(ls, msg, ls.t.token);\n};\n/*\n** skip a sequence '[=*[' or ']=*]'; if sequence is well formed, return\n** its number of '='s; otherwise, return a negative number (-1 iff there\n** are no '='s after initial bracket)\n*/\n\n\nvar skip_sep = function skip_sep(ls) {\n  var count = 0;\n  var s = ls.current;\n  lua_assert(s === 91\n  /* ('[').charCodeAt(0) */\n  || s === 93\n  /* (']').charCodeAt(0) */\n  );\n  save_and_next(ls);\n\n  while (ls.current === 61\n  /* ('=').charCodeAt(0) */\n  ) {\n    save_and_next(ls);\n    count++;\n  }\n\n  return ls.current === s ? count : -count - 1;\n};\n\nvar read_long_string = function read_long_string(ls, seminfo, sep) {\n  var line = ls.linenumber;\n  /* initial line (for error message) */\n\n  save_and_next(ls);\n  /* skip 2nd '[' */\n\n  if (currIsNewline(ls))\n    /* string starts with a newline? */\n    inclinenumber(ls);\n  /* skip it */\n\n  var skip = false;\n\n  for (; !skip;) {\n    switch (ls.current) {\n      case EOZ:\n        {\n          /* error */\n          var what = seminfo ? \"string\" : \"comment\";\n          var msg = \"unfinished long \".concat(what, \" (starting at line \").concat(line, \")\");\n          lexerror(ls, to_luastring(msg), TK_EOS);\n          break;\n        }\n\n      case 93\n      /* (']').charCodeAt(0) */\n      :\n        {\n          if (skip_sep(ls) === sep) {\n            save_and_next(ls);\n            /* skip 2nd ']' */\n\n            skip = true;\n          }\n\n          break;\n        }\n\n      case 10\n      /* ('\\n').charCodeAt(0) */\n      :\n      case 13\n      /* ('\\r').charCodeAt(0) */\n      :\n        {\n          save(ls, 10\n          /* ('\\n').charCodeAt(0) */\n          );\n          inclinenumber(ls);\n          if (!seminfo) luaZ_resetbuffer(ls.buff);\n          break;\n        }\n\n      default:\n        {\n          if (seminfo) save_and_next(ls);else next(ls);\n        }\n    }\n  }\n\n  if (seminfo) seminfo.ts = luaX_newstring(ls, ls.buff.buffer.subarray(2 + sep, ls.buff.n - (2 + sep)));\n};\n\nvar esccheck = function esccheck(ls, c, msg) {\n  if (!c) {\n    if (ls.current !== EOZ) save_and_next(ls);\n    /* add current to buffer for error message */\n\n    lexerror(ls, msg, TK_STRING);\n  }\n};\n\nvar gethexa = function gethexa(ls) {\n  save_and_next(ls);\n  esccheck(ls, lisxdigit(ls.current), to_luastring(\"hexadecimal digit expected\", true));\n  return lobject.luaO_hexavalue(ls.current);\n};\n\nvar readhexaesc = function readhexaesc(ls) {\n  var r = gethexa(ls);\n  r = (r << 4) + gethexa(ls);\n  luaZ_buffremove(ls.buff, 2);\n  /* remove saved chars from buffer */\n\n  return r;\n};\n\nvar readutf8desc = function readutf8desc(ls) {\n  var i = 4;\n  /* chars to be removed: '\\', 'u', '{', and first digit */\n\n  save_and_next(ls);\n  /* skip 'u' */\n\n  esccheck(ls, ls.current === 123\n  /* ('{').charCodeAt(0) */\n  , to_luastring(\"missing '{'\", true));\n  var r = gethexa(ls);\n  /* must have at least one digit */\n\n  save_and_next(ls);\n\n  while (lisxdigit(ls.current)) {\n    i++;\n    r = (r << 4) + lobject.luaO_hexavalue(ls.current);\n    esccheck(ls, r <= 0x10FFFF, to_luastring(\"UTF-8 value too large\", true));\n    save_and_next(ls);\n  }\n\n  esccheck(ls, ls.current === 125\n  /* ('}').charCodeAt(0) */\n  , to_luastring(\"missing '}'\", true));\n  next(ls);\n  /* skip '}' */\n\n  luaZ_buffremove(ls.buff, i);\n  /* remove saved chars from buffer */\n\n  return r;\n};\n\nvar utf8esc = function utf8esc(ls) {\n  var buff = new Uint8Array(lobject.UTF8BUFFSZ);\n  var n = lobject.luaO_utf8esc(buff, readutf8desc(ls));\n\n  for (; n > 0; n--) {\n    /* add 'buff' to string */\n    save(ls, buff[lobject.UTF8BUFFSZ - n]);\n  }\n};\n\nvar readdecesc = function readdecesc(ls) {\n  var r = 0;\n  /* result accumulator */\n\n  var i;\n\n  for (i = 0; i < 3 && lisdigit(ls.current); i++) {\n    /* read up to 3 digits */\n    r = 10 * r + ls.current - 48\n    /* ('0').charCodeAt(0) */\n    ;\n    save_and_next(ls);\n  }\n\n  esccheck(ls, r <= 255, to_luastring(\"decimal escape too large\", true));\n  luaZ_buffremove(ls.buff, i);\n  /* remove read digits from buffer */\n\n  return r;\n};\n\nvar read_string = function read_string(ls, del, seminfo) {\n  save_and_next(ls);\n  /* keep delimiter (for error messages) */\n\n  while (ls.current !== del) {\n    switch (ls.current) {\n      case EOZ:\n        lexerror(ls, to_luastring(\"unfinished string\", true), TK_EOS);\n        break;\n\n      case 10\n      /* ('\\n').charCodeAt(0) */\n      :\n      case 13\n      /* ('\\r').charCodeAt(0) */\n      :\n        lexerror(ls, to_luastring(\"unfinished string\", true), TK_STRING);\n        break;\n\n      case 92\n      /* ('\\\\').charCodeAt(0) */\n      :\n        {\n          /* escape sequences */\n          save_and_next(ls);\n          /* keep '\\\\' for error messages */\n\n          var will = void 0;\n          var c = void 0;\n\n          switch (ls.current) {\n            case 97\n            /* ('a').charCodeAt(0) */\n            :\n              c = 7\n              /* \\a isn't valid JS */\n              ;\n              will = 'read_save';\n              break;\n\n            case 98\n            /* ('b').charCodeAt(0) */\n            :\n              c = 8\n              /* ('\\b').charCodeAt(0) */\n              ;\n              will = 'read_save';\n              break;\n\n            case 102\n            /* ('f').charCodeAt(0) */\n            :\n              c = 12\n              /* ('\\f').charCodeAt(0) */\n              ;\n              will = 'read_save';\n              break;\n\n            case 110\n            /* ('n').charCodeAt(0) */\n            :\n              c = 10\n              /* ('\\n').charCodeAt(0) */\n              ;\n              will = 'read_save';\n              break;\n\n            case 114\n            /* ('r').charCodeAt(0) */\n            :\n              c = 13\n              /* ('\\r').charCodeAt(0) */\n              ;\n              will = 'read_save';\n              break;\n\n            case 116\n            /* ('t').charCodeAt(0) */\n            :\n              c = 9\n              /* ('\\t').charCodeAt(0) */\n              ;\n              will = 'read_save';\n              break;\n\n            case 118\n            /* ('v').charCodeAt(0) */\n            :\n              c = 11\n              /* ('\\v').charCodeAt(0) */\n              ;\n              will = 'read_save';\n              break;\n\n            case 120\n            /* ('x').charCodeAt(0) */\n            :\n              c = readhexaesc(ls);\n              will = 'read_save';\n              break;\n\n            case 117\n            /* ('u').charCodeAt(0) */\n            :\n              utf8esc(ls);\n              will = 'no_save';\n              break;\n\n            case 10\n            /* ('\\n').charCodeAt(0) */\n            :\n            case 13\n            /* ('\\r').charCodeAt(0) */\n            :\n              inclinenumber(ls);\n              c = 10\n              /* ('\\n').charCodeAt(0) */\n              ;\n              will = 'only_save';\n              break;\n\n            case 92\n            /* ('\\\\').charCodeAt(0) */\n            :\n            case 34\n            /* ('\"').charCodeAt(0) */\n            :\n            case 39\n            /* ('\\'').charCodeAt(0) */\n            :\n              c = ls.current;\n              will = 'read_save';\n              break;\n\n            case EOZ:\n              will = 'no_save';\n              break;\n\n            /* will raise an error next loop */\n\n            case 122\n            /* ('z').charCodeAt(0) */\n            :\n              {\n                /* zap following span of spaces */\n                luaZ_buffremove(ls.buff, 1);\n                /* remove '\\\\' */\n\n                next(ls);\n                /* skip the 'z' */\n\n                while (lisspace(ls.current)) {\n                  if (currIsNewline(ls)) inclinenumber(ls);else next(ls);\n                }\n\n                will = 'no_save';\n                break;\n              }\n\n            default:\n              {\n                esccheck(ls, lisdigit(ls.current), to_luastring(\"invalid escape sequence\", true));\n                c = readdecesc(ls);\n                /* digital escape '\\ddd' */\n\n                will = 'only_save';\n                break;\n              }\n          }\n\n          if (will === 'read_save') next(ls);\n\n          if (will === 'read_save' || will === 'only_save') {\n            luaZ_buffremove(ls.buff, 1);\n            /* remove '\\\\' */\n\n            save(ls, c);\n          }\n\n          break;\n        }\n\n      default:\n        save_and_next(ls);\n    }\n  }\n\n  save_and_next(ls);\n  /* skip delimiter */\n\n  seminfo.ts = luaX_newstring(ls, ls.buff.buffer.subarray(1, ls.buff.n - 1));\n};\n\nvar token_to_index = Object.create(null);\n/* don't want to return true for e.g. 'hasOwnProperty' */\n\nluaX_tokens.forEach(function (e, i) {\n  return token_to_index[luaS_hash(e)] = i;\n});\n\nvar isreserved = function isreserved(w) {\n  var kidx = token_to_index[luaS_hashlongstr(w)];\n  return kidx !== void 0 && kidx <= 22;\n};\n\nvar llex = function llex(ls, seminfo) {\n  luaZ_resetbuffer(ls.buff);\n\n  for (;;) {\n    lua_assert(typeof ls.current == \"number\");\n    /* fengari addition */\n\n    switch (ls.current) {\n      case 10\n      /* ('\\n').charCodeAt(0) */\n      :\n      case 13\n      /* ('\\r').charCodeAt(0) */\n      :\n        {\n          /* line breaks */\n          inclinenumber(ls);\n          break;\n        }\n\n      case 32\n      /* (' ').charCodeAt(0) */\n      :\n      case 12\n      /* ('\\f').charCodeAt(0) */\n      :\n      case 9\n      /* ('\\t').charCodeAt(0) */\n      :\n      case 11\n      /* ('\\v').charCodeAt(0) */\n      :\n        {\n          /* spaces */\n          next(ls);\n          break;\n        }\n\n      case 45\n      /* ('-').charCodeAt(0) */\n      :\n        {\n          /* '-' or '--' (comment) */\n          next(ls);\n          if (ls.current !== 45\n          /* ('-').charCodeAt(0) */\n          ) return 45\n            /* ('-').charCodeAt(0) */\n            ;\n          /* else is a comment */\n\n          next(ls);\n\n          if (ls.current === 91\n          /* ('[').charCodeAt(0) */\n          ) {\n              /* long comment? */\n              var sep = skip_sep(ls);\n              luaZ_resetbuffer(ls.buff);\n              /* 'skip_sep' may dirty the buffer */\n\n              if (sep >= 0) {\n                read_long_string(ls, null, sep);\n                /* skip long comment */\n\n                luaZ_resetbuffer(ls.buff);\n                /* previous call may dirty the buff. */\n\n                break;\n              }\n            }\n          /* else short comment */\n\n\n          while (!currIsNewline(ls) && ls.current !== EOZ) {\n            next(ls);\n          }\n          /* skip until end of line (or end of file) */\n\n\n          break;\n        }\n\n      case 91\n      /* ('[').charCodeAt(0) */\n      :\n        {\n          /* long string or simply '[' */\n          var _sep = skip_sep(ls);\n\n          if (_sep >= 0) {\n            read_long_string(ls, seminfo, _sep);\n            return TK_STRING;\n          } else if (_sep !== -1)\n            /* '[=...' missing second bracket */\n            lexerror(ls, to_luastring(\"invalid long string delimiter\", true), TK_STRING);\n\n          return 91\n          /* ('[').charCodeAt(0) */\n          ;\n        }\n\n      case 61\n      /* ('=').charCodeAt(0) */\n      :\n        {\n          next(ls);\n          if (check_next1(ls, 61\n          /* ('=').charCodeAt(0) */\n          )) return TK_EQ;else return 61\n          /* ('=').charCodeAt(0) */\n          ;\n        }\n\n      case 60\n      /* ('<').charCodeAt(0) */\n      :\n        {\n          next(ls);\n          if (check_next1(ls, 61\n          /* ('=').charCodeAt(0) */\n          )) return TK_LE;else if (check_next1(ls, 60\n          /* ('<').charCodeAt(0) */\n          )) return TK_SHL;else return 60\n          /* ('<').charCodeAt(0) */\n          ;\n        }\n\n      case 62\n      /* ('>').charCodeAt(0) */\n      :\n        {\n          next(ls);\n          if (check_next1(ls, 61\n          /* ('=').charCodeAt(0) */\n          )) return TK_GE;else if (check_next1(ls, 62\n          /* ('>').charCodeAt(0) */\n          )) return TK_SHR;else return 62\n          /* ('>').charCodeAt(0) */\n          ;\n        }\n\n      case 47\n      /* ('/').charCodeAt(0) */\n      :\n        {\n          next(ls);\n          if (check_next1(ls, 47\n          /* ('/').charCodeAt(0) */\n          )) return TK_IDIV;else return 47\n          /* ('/').charCodeAt(0) */\n          ;\n        }\n\n      case 126\n      /* ('~').charCodeAt(0) */\n      :\n        {\n          next(ls);\n          if (check_next1(ls, 61\n          /* ('=').charCodeAt(0) */\n          )) return TK_NE;else return 126\n          /* ('~').charCodeAt(0) */\n          ;\n        }\n\n      case 58\n      /* (':').charCodeAt(0) */\n      :\n        {\n          next(ls);\n          if (check_next1(ls, 58\n          /* (':').charCodeAt(0) */\n          )) return TK_DBCOLON;else return 58\n          /* (':').charCodeAt(0) */\n          ;\n        }\n\n      case 34\n      /* ('\"').charCodeAt(0) */\n      :\n      case 39\n      /* ('\\'').charCodeAt(0) */\n      :\n        {\n          /* short literal strings */\n          read_string(ls, ls.current, seminfo);\n          return TK_STRING;\n        }\n\n      case 46\n      /* ('.').charCodeAt(0) */\n      :\n        {\n          /* '.', '..', '...', or number */\n          save_and_next(ls);\n\n          if (check_next1(ls, 46\n          /* ('.').charCodeAt(0) */\n          )) {\n            if (check_next1(ls, 46\n            /* ('.').charCodeAt(0) */\n            )) return TK_DOTS;\n            /* '...' */\n            else return TK_CONCAT;\n            /* '..' */\n          } else if (!lisdigit(ls.current)) return 46\n          /* ('.').charCodeAt(0) */\n          ;else return read_numeral(ls, seminfo);\n        }\n\n      case 48\n      /* ('0').charCodeAt(0) */\n      :\n      case 49\n      /* ('1').charCodeAt(0) */\n      :\n      case 50\n      /* ('2').charCodeAt(0) */\n      :\n      case 51\n      /* ('3').charCodeAt(0) */\n      :\n      case 52\n      /* ('4').charCodeAt(0) */\n      :\n      case 53\n      /* ('5').charCodeAt(0) */\n      :\n      case 54\n      /* ('6').charCodeAt(0) */\n      :\n      case 55\n      /* ('7').charCodeAt(0) */\n      :\n      case 56\n      /* ('8').charCodeAt(0) */\n      :\n      case 57\n      /* ('9').charCodeAt(0) */\n      :\n        {\n          return read_numeral(ls, seminfo);\n        }\n\n      case EOZ:\n        {\n          return TK_EOS;\n        }\n\n      default:\n        {\n          if (lislalpha(ls.current)) {\n            /* identifier or reserved word? */\n            do {\n              save_and_next(ls);\n            } while (lislalnum(ls.current));\n\n            var ts = luaX_newstring(ls, luaZ_buffer(ls.buff));\n            seminfo.ts = ts;\n            var kidx = token_to_index[luaS_hashlongstr(ts)];\n            if (kidx !== void 0 && kidx <= 22)\n              /* reserved word? */\n              return kidx + FIRST_RESERVED;else return TK_NAME;\n          } else {\n            /* single-char tokens (+ - / ...) */\n            var c = ls.current;\n            next(ls);\n            return c;\n          }\n        }\n    }\n  }\n};\n\nvar luaX_next = function luaX_next(ls) {\n  ls.lastline = ls.linenumber;\n\n  if (ls.lookahead.token !== TK_EOS) {\n    /* is there a look-ahead token? */\n    ls.t.token = ls.lookahead.token;\n    /* use this one */\n\n    ls.t.seminfo.i = ls.lookahead.seminfo.i;\n    ls.t.seminfo.r = ls.lookahead.seminfo.r;\n    ls.t.seminfo.ts = ls.lookahead.seminfo.ts;\n    ls.lookahead.token = TK_EOS;\n    /* and discharge it */\n  } else ls.t.token = llex(ls, ls.t.seminfo);\n  /* read next token */\n\n};\n\nvar luaX_lookahead = function luaX_lookahead(ls) {\n  lua_assert(ls.lookahead.token === TK_EOS);\n  ls.lookahead.token = llex(ls, ls.lookahead.seminfo);\n  return ls.lookahead.token;\n};\n\nmodule.exports.FIRST_RESERVED = FIRST_RESERVED;\nmodule.exports.LUA_ENV = LUA_ENV;\nmodule.exports.LexState = LexState;\nmodule.exports.RESERVED = RESERVED;\nmodule.exports.isreserved = isreserved;\nmodule.exports.luaX_lookahead = luaX_lookahead;\nmodule.exports.luaX_newstring = luaX_newstring;\nmodule.exports.luaX_next = luaX_next;\nmodule.exports.luaX_setinput = luaX_setinput;\nmodule.exports.luaX_syntaxerror = luaX_syntaxerror;\nmodule.exports.luaX_token2str = luaX_token2str;\nmodule.exports.luaX_tokens = luaX_tokens;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///21\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _require = __webpack_require__(1),\n    luastring_of = _require.luastring_of;\n\nvar luai_ctype_ = luastring_of(0x00,\n/* EOZ */\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n/* 0. */\n0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n/* 1. */\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,\n/* 2. */\n0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16,\n/* 3. */\n0x16, 0x16, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x05,\n/* 4. */\n0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05,\n/* 5. */\n0x05, 0x05, 0x05, 0x04, 0x04, 0x04, 0x04, 0x05, 0x04, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x05,\n/* 6. */\n0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05,\n/* 7. */\n0x05, 0x05, 0x05, 0x04, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n/* 8. */\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n/* 9. */\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n/* a. */\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n/* b. */\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n/* c. */\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n/* d. */\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n/* e. */\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n/* f. */\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);\nvar ALPHABIT = 0;\nvar DIGITBIT = 1;\nvar PRINTBIT = 2;\nvar SPACEBIT = 3;\nvar XDIGITBIT = 4;\n\nvar lisdigit = function lisdigit(c) {\n  return (luai_ctype_[c + 1] & 1 << DIGITBIT) !== 0;\n};\n\nvar lisxdigit = function lisxdigit(c) {\n  return (luai_ctype_[c + 1] & 1 << XDIGITBIT) !== 0;\n};\n\nvar lisprint = function lisprint(c) {\n  return (luai_ctype_[c + 1] & 1 << PRINTBIT) !== 0;\n};\n\nvar lisspace = function lisspace(c) {\n  return (luai_ctype_[c + 1] & 1 << SPACEBIT) !== 0;\n};\n\nvar lislalpha = function lislalpha(c) {\n  return (luai_ctype_[c + 1] & 1 << ALPHABIT) !== 0;\n};\n\nvar lislalnum = function lislalnum(c) {\n  return (luai_ctype_[c + 1] & (1 << ALPHABIT | 1 << DIGITBIT)) !== 0;\n};\n\nmodule.exports.lisdigit = lisdigit;\nmodule.exports.lislalnum = lislalnum;\nmodule.exports.lislalpha = lislalpha;\nmodule.exports.lisprint = lisprint;\nmodule.exports.lisspace = lisspace;\nmodule.exports.lisxdigit = lisxdigit;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///22\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar _require = __webpack_require__(1),\n    LUA_MULTRET = _require.LUA_MULTRET,\n    to_luastring = _require.to_luastring;\n\nvar _require2 = __webpack_require__(35),\n    _require2$BinOpr = _require2.BinOpr,\n    OPR_ADD = _require2$BinOpr.OPR_ADD,\n    OPR_AND = _require2$BinOpr.OPR_AND,\n    OPR_BAND = _require2$BinOpr.OPR_BAND,\n    OPR_BOR = _require2$BinOpr.OPR_BOR,\n    OPR_BXOR = _require2$BinOpr.OPR_BXOR,\n    OPR_CONCAT = _require2$BinOpr.OPR_CONCAT,\n    OPR_DIV = _require2$BinOpr.OPR_DIV,\n    OPR_EQ = _require2$BinOpr.OPR_EQ,\n    OPR_GE = _require2$BinOpr.OPR_GE,\n    OPR_GT = _require2$BinOpr.OPR_GT,\n    OPR_IDIV = _require2$BinOpr.OPR_IDIV,\n    OPR_LE = _require2$BinOpr.OPR_LE,\n    OPR_LT = _require2$BinOpr.OPR_LT,\n    OPR_MOD = _require2$BinOpr.OPR_MOD,\n    OPR_MUL = _require2$BinOpr.OPR_MUL,\n    OPR_NE = _require2$BinOpr.OPR_NE,\n    OPR_NOBINOPR = _require2$BinOpr.OPR_NOBINOPR,\n    OPR_OR = _require2$BinOpr.OPR_OR,\n    OPR_POW = _require2$BinOpr.OPR_POW,\n    OPR_SHL = _require2$BinOpr.OPR_SHL,\n    OPR_SHR = _require2$BinOpr.OPR_SHR,\n    OPR_SUB = _require2$BinOpr.OPR_SUB,\n    _require2$UnOpr = _require2.UnOpr,\n    OPR_BNOT = _require2$UnOpr.OPR_BNOT,\n    OPR_LEN = _require2$UnOpr.OPR_LEN,\n    OPR_MINUS = _require2$UnOpr.OPR_MINUS,\n    OPR_NOT = _require2$UnOpr.OPR_NOT,\n    OPR_NOUNOPR = _require2$UnOpr.OPR_NOUNOPR,\n    NO_JUMP = _require2.NO_JUMP,\n    getinstruction = _require2.getinstruction,\n    luaK_checkstack = _require2.luaK_checkstack,\n    luaK_codeABC = _require2.luaK_codeABC,\n    luaK_codeABx = _require2.luaK_codeABx,\n    luaK_codeAsBx = _require2.luaK_codeAsBx,\n    luaK_codek = _require2.luaK_codek,\n    luaK_concat = _require2.luaK_concat,\n    luaK_dischargevars = _require2.luaK_dischargevars,\n    luaK_exp2RK = _require2.luaK_exp2RK,\n    luaK_exp2anyreg = _require2.luaK_exp2anyreg,\n    luaK_exp2anyregup = _require2.luaK_exp2anyregup,\n    luaK_exp2nextreg = _require2.luaK_exp2nextreg,\n    luaK_exp2val = _require2.luaK_exp2val,\n    luaK_fixline = _require2.luaK_fixline,\n    luaK_getlabel = _require2.luaK_getlabel,\n    luaK_goiffalse = _require2.luaK_goiffalse,\n    luaK_goiftrue = _require2.luaK_goiftrue,\n    luaK_indexed = _require2.luaK_indexed,\n    luaK_infix = _require2.luaK_infix,\n    luaK_intK = _require2.luaK_intK,\n    luaK_jump = _require2.luaK_jump,\n    luaK_jumpto = _require2.luaK_jumpto,\n    luaK_nil = _require2.luaK_nil,\n    luaK_patchclose = _require2.luaK_patchclose,\n    luaK_patchlist = _require2.luaK_patchlist,\n    luaK_patchtohere = _require2.luaK_patchtohere,\n    luaK_posfix = _require2.luaK_posfix,\n    luaK_prefix = _require2.luaK_prefix,\n    luaK_reserveregs = _require2.luaK_reserveregs,\n    luaK_ret = _require2.luaK_ret,\n    luaK_self = _require2.luaK_self,\n    luaK_setlist = _require2.luaK_setlist,\n    luaK_setmultret = _require2.luaK_setmultret,\n    luaK_setoneret = _require2.luaK_setoneret,\n    luaK_setreturns = _require2.luaK_setreturns,\n    luaK_storevar = _require2.luaK_storevar,\n    luaK_stringK = _require2.luaK_stringK;\n\nvar ldo = __webpack_require__(8);\n\nvar lfunc = __webpack_require__(13);\n\nvar llex = __webpack_require__(21);\n\nvar _require3 = __webpack_require__(4),\n    LUAI_MAXCCALLS = _require3.LUAI_MAXCCALLS,\n    MAX_INT = _require3.MAX_INT,\n    lua_assert = _require3.lua_assert;\n\nvar lobject = __webpack_require__(6);\n\nvar _require4 = __webpack_require__(16),\n    _require4$OpCodesI = _require4.OpCodesI,\n    OP_CALL = _require4$OpCodesI.OP_CALL,\n    OP_CLOSURE = _require4$OpCodesI.OP_CLOSURE,\n    OP_FORLOOP = _require4$OpCodesI.OP_FORLOOP,\n    OP_FORPREP = _require4$OpCodesI.OP_FORPREP,\n    OP_GETUPVAL = _require4$OpCodesI.OP_GETUPVAL,\n    OP_MOVE = _require4$OpCodesI.OP_MOVE,\n    OP_NEWTABLE = _require4$OpCodesI.OP_NEWTABLE,\n    OP_SETTABLE = _require4$OpCodesI.OP_SETTABLE,\n    OP_TAILCALL = _require4$OpCodesI.OP_TAILCALL,\n    OP_TFORCALL = _require4$OpCodesI.OP_TFORCALL,\n    OP_TFORLOOP = _require4$OpCodesI.OP_TFORLOOP,\n    OP_VARARG = _require4$OpCodesI.OP_VARARG,\n    LFIELDS_PER_FLUSH = _require4.LFIELDS_PER_FLUSH,\n    SETARG_B = _require4.SETARG_B,\n    SETARG_C = _require4.SETARG_C,\n    SET_OPCODE = _require4.SET_OPCODE;\n\nvar _require5 = __webpack_require__(10),\n    luaS_eqlngstr = _require5.luaS_eqlngstr,\n    luaS_new = _require5.luaS_new,\n    luaS_newliteral = _require5.luaS_newliteral;\n\nvar ltable = __webpack_require__(9);\n\nvar Proto = lfunc.Proto;\nvar R = llex.RESERVED;\nvar MAXVARS = 200;\n\nvar hasmultret = function hasmultret(k) {\n  return k === expkind.VCALL || k === expkind.VVARARG;\n};\n\nvar eqstr = function eqstr(a, b) {\n  /* TODO: use plain equality as strings are cached */\n  return luaS_eqlngstr(a, b);\n};\n\nvar BlockCnt = function BlockCnt() {\n  _classCallCheck(this, BlockCnt);\n\n  this.previous = null;\n  /* chain */\n\n  this.firstlabel = NaN;\n  /* index of first label in this block */\n\n  this.firstgoto = NaN;\n  /* index of first pending goto in this block */\n\n  this.nactvar = NaN;\n  /* # active locals outside the block */\n\n  this.upval = NaN;\n  /* true if some variable in the block is an upvalue */\n\n  this.isloop = NaN;\n  /* true if 'block' is a loop */\n};\n\nvar expkind = {\n  VVOID: 0,\n\n  /* when 'expdesc' describes the last expression a list,\n     this kind means an empty list (so, no expression) */\n  VNIL: 1,\n\n  /* constant nil */\n  VTRUE: 2,\n\n  /* constant true */\n  VFALSE: 3,\n\n  /* constant false */\n  VK: 4,\n\n  /* constant in 'k'; info = index of constant in 'k' */\n  VKFLT: 5,\n\n  /* floating constant; nval = numerical float value */\n  VKINT: 6,\n\n  /* integer constant; nval = numerical integer value */\n  VNONRELOC: 7,\n\n  /* expression has its value in a fixed register;\n     info = result register */\n  VLOCAL: 8,\n\n  /* local variable; info = local register */\n  VUPVAL: 9,\n\n  /* upvalue variable; info = index of upvalue in 'upvalues' */\n  VINDEXED: 10,\n\n  /* indexed variable;\n     ind.vt = whether 't' is register or upvalue;\n     ind.t = table register or upvalue;\n     ind.idx = key's R/K index */\n  VJMP: 11,\n\n  /* expression is a test/comparison;\n     info = pc of corresponding jump instruction */\n  VRELOCABLE: 12,\n\n  /* expression can put result in any register;\n     info = instruction pc */\n  VCALL: 13,\n\n  /* expression is a function call; info = instruction pc */\n  VVARARG: 14\n  /* vararg expression; info = instruction pc */\n\n};\n\nvar vkisvar = function vkisvar(k) {\n  return expkind.VLOCAL <= k && k <= expkind.VINDEXED;\n};\n\nvar vkisinreg = function vkisinreg(k) {\n  return k === expkind.VNONRELOC || k === expkind.VLOCAL;\n};\n\nvar expdesc =\n/*#__PURE__*/\nfunction () {\n  function expdesc() {\n    _classCallCheck(this, expdesc);\n\n    this.k = NaN;\n    this.u = {\n      ival: NaN,\n\n      /* for VKINT */\n      nval: NaN,\n\n      /* for VKFLT */\n      info: NaN,\n\n      /* for generic use */\n      ind: {\n        /* for indexed variables (VINDEXED) */\n        idx: NaN,\n\n        /* index (R/K) */\n        t: NaN,\n\n        /* table (register or upvalue) */\n        vt: NaN\n        /* whether 't' is register (VLOCAL) or upvalue (VUPVAL) */\n\n      }\n    };\n    this.t = NaN;\n    /* patch list of 'exit when true' */\n\n    this.f = NaN;\n    /* patch list of 'exit when false' */\n  }\n\n  _createClass(expdesc, [{\n    key: \"to\",\n    value: function to(e) {\n      // Copy e content to this, cf. luaK_posfix\n      this.k = e.k;\n      this.u = e.u;\n      this.t = e.t;\n      this.f = e.f;\n    }\n  }]);\n\n  return expdesc;\n}();\n\nvar FuncState = function FuncState() {\n  _classCallCheck(this, FuncState);\n\n  this.f = null;\n  /* current function header */\n\n  this.prev = null;\n  /* enclosing function */\n\n  this.ls = null;\n  /* lexical state */\n\n  this.bl = null;\n  /* chain of current blocks */\n\n  this.pc = NaN;\n  /* next position to code (equivalent to 'ncode') */\n\n  this.lasttarget = NaN;\n  /* 'label' of last 'jump label' */\n\n  this.jpc = NaN;\n  /* list of pending jumps to 'pc' */\n\n  this.nk = NaN;\n  /* number of elements in 'k' */\n\n  this.np = NaN;\n  /* number of elements in 'p' */\n\n  this.firstlocal = NaN;\n  /* index of first local var (in Dyndata array) */\n\n  this.nlocvars = NaN;\n  /* number of elements in 'f->locvars' */\n\n  this.nactvar = NaN;\n  /* number of active local variables */\n\n  this.nups = NaN;\n  /* number of upvalues */\n\n  this.freereg = NaN;\n  /* first free register */\n};\n/* description of active local variable */\n\n\nvar Vardesc = function Vardesc() {\n  _classCallCheck(this, Vardesc);\n\n  this.idx = NaN;\n  /* variable index in stack */\n};\n/* description of pending goto statements and label statements */\n\n\nvar Labeldesc = function Labeldesc() {\n  _classCallCheck(this, Labeldesc);\n\n  this.name = null;\n  /* label identifier */\n\n  this.pc = NaN;\n  /* position in code */\n\n  this.line = NaN;\n  /* line where it appeared */\n\n  this.nactvar = NaN;\n  /* local level where it appears in current block */\n};\n/* list of labels or gotos */\n\n\nvar Labellist = function Labellist() {\n  _classCallCheck(this, Labellist);\n\n  this.arr = [];\n  /* array */\n\n  this.n = NaN;\n  /* number of entries in use */\n\n  this.size = NaN;\n  /* array size */\n};\n/* dynamic structures used by the parser */\n\n\nvar Dyndata = function Dyndata() {\n  _classCallCheck(this, Dyndata);\n\n  this.actvar = {\n    /* list of active local variables */\n    arr: [],\n    n: NaN,\n    size: NaN\n  };\n  this.gt = new Labellist();\n  this.label = new Labellist();\n};\n\nvar semerror = function semerror(ls, msg) {\n  ls.t.token = 0;\n  /* remove \"near <token>\" from final message */\n\n  llex.luaX_syntaxerror(ls, msg);\n};\n\nvar error_expected = function error_expected(ls, token) {\n  llex.luaX_syntaxerror(ls, lobject.luaO_pushfstring(ls.L, to_luastring(\"%s expected\", true), llex.luaX_token2str(ls, token)));\n};\n\nvar errorlimit = function errorlimit(fs, limit, what) {\n  var L = fs.ls.L;\n  var line = fs.f.linedefined;\n  var where = line === 0 ? to_luastring(\"main function\", true) : lobject.luaO_pushfstring(L, to_luastring(\"function at line %d\", true), line);\n  var msg = lobject.luaO_pushfstring(L, to_luastring(\"too many %s (limit is %d) in %s\", true), what, limit, where);\n  llex.luaX_syntaxerror(fs.ls, msg);\n};\n\nvar checklimit = function checklimit(fs, v, l, what) {\n  if (v > l) errorlimit(fs, l, what);\n};\n\nvar testnext = function testnext(ls, c) {\n  if (ls.t.token === c) {\n    llex.luaX_next(ls);\n    return true;\n  }\n\n  return false;\n};\n\nvar check = function check(ls, c) {\n  if (ls.t.token !== c) error_expected(ls, c);\n};\n\nvar checknext = function checknext(ls, c) {\n  check(ls, c);\n  llex.luaX_next(ls);\n};\n\nvar check_condition = function check_condition(ls, c, msg) {\n  if (!c) llex.luaX_syntaxerror(ls, msg);\n};\n\nvar check_match = function check_match(ls, what, who, where) {\n  if (!testnext(ls, what)) {\n    if (where === ls.linenumber) error_expected(ls, what);else llex.luaX_syntaxerror(ls, lobject.luaO_pushfstring(ls.L, to_luastring(\"%s expected (to close %s at line %d)\"), llex.luaX_token2str(ls, what), llex.luaX_token2str(ls, who), where));\n  }\n};\n\nvar str_checkname = function str_checkname(ls) {\n  check(ls, R.TK_NAME);\n  var ts = ls.t.seminfo.ts;\n  llex.luaX_next(ls);\n  return ts;\n};\n\nvar init_exp = function init_exp(e, k, i) {\n  e.f = e.t = NO_JUMP;\n  e.k = k;\n  e.u.info = i;\n};\n\nvar codestring = function codestring(ls, e, s) {\n  init_exp(e, expkind.VK, luaK_stringK(ls.fs, s));\n};\n\nvar checkname = function checkname(ls, e) {\n  codestring(ls, e, str_checkname(ls));\n};\n\nvar registerlocalvar = function registerlocalvar(ls, varname) {\n  var fs = ls.fs;\n  var f = fs.f;\n  f.locvars[fs.nlocvars] = new lobject.LocVar();\n  f.locvars[fs.nlocvars].varname = varname;\n  return fs.nlocvars++;\n};\n\nvar new_localvar = function new_localvar(ls, name) {\n  var fs = ls.fs;\n  var dyd = ls.dyd;\n  var reg = registerlocalvar(ls, name);\n  checklimit(fs, dyd.actvar.n + 1 - fs.firstlocal, MAXVARS, to_luastring(\"local variables\", true));\n  dyd.actvar.arr[dyd.actvar.n] = new Vardesc();\n  dyd.actvar.arr[dyd.actvar.n].idx = reg;\n  dyd.actvar.n++;\n};\n\nvar new_localvarliteral = function new_localvarliteral(ls, name) {\n  new_localvar(ls, llex.luaX_newstring(ls, to_luastring(name, true)));\n};\n\nvar getlocvar = function getlocvar(fs, i) {\n  var idx = fs.ls.dyd.actvar.arr[fs.firstlocal + i].idx;\n  lua_assert(idx < fs.nlocvars);\n  return fs.f.locvars[idx];\n};\n\nvar adjustlocalvars = function adjustlocalvars(ls, nvars) {\n  var fs = ls.fs;\n  fs.nactvar = fs.nactvar + nvars;\n\n  for (; nvars; nvars--) {\n    getlocvar(fs, fs.nactvar - nvars).startpc = fs.pc;\n  }\n};\n\nvar removevars = function removevars(fs, tolevel) {\n  fs.ls.dyd.actvar.n -= fs.nactvar - tolevel;\n\n  while (fs.nactvar > tolevel) {\n    getlocvar(fs, --fs.nactvar).endpc = fs.pc;\n  }\n};\n\nvar searchupvalue = function searchupvalue(fs, name) {\n  var up = fs.f.upvalues;\n\n  for (var i = 0; i < fs.nups; i++) {\n    if (eqstr(up[i].name, name)) return i;\n  }\n\n  return -1;\n  /* not found */\n};\n\nvar newupvalue = function newupvalue(fs, name, v) {\n  var f = fs.f;\n  checklimit(fs, fs.nups + 1, lfunc.MAXUPVAL, to_luastring(\"upvalues\", true));\n  f.upvalues[fs.nups] = {\n    instack: v.k === expkind.VLOCAL,\n    idx: v.u.info,\n    name: name\n  };\n  return fs.nups++;\n};\n\nvar searchvar = function searchvar(fs, n) {\n  for (var i = fs.nactvar - 1; i >= 0; i--) {\n    if (eqstr(n, getlocvar(fs, i).varname)) return i;\n  }\n\n  return -1;\n};\n/*\n** Mark block where variable at given level was defined\n** (to emit close instructions later).\n*/\n\n\nvar markupval = function markupval(fs, level) {\n  var bl = fs.bl;\n\n  while (bl.nactvar > level) {\n    bl = bl.previous;\n  }\n\n  bl.upval = 1;\n};\n/*\n** Find variable with given name 'n'. If it is an upvalue, add this\n** upvalue into all intermediate functions.\n*/\n\n\nvar singlevaraux = function singlevaraux(fs, n, vr, base) {\n  if (fs === null)\n    /* no more levels? */\n    init_exp(vr, expkind.VVOID, 0);\n    /* default is global */\n  else {\n      var v = searchvar(fs, n);\n      /* look up locals at current level */\n\n      if (v >= 0) {\n        /* found? */\n        init_exp(vr, expkind.VLOCAL, v);\n        /* variable is local */\n\n        if (!base) markupval(fs, v);\n        /* local will be used as an upval */\n      } else {\n        /* not found as local at current level; try upvalues */\n        var idx = searchupvalue(fs, n);\n        /* try existing upvalues */\n\n        if (idx < 0) {\n          /* not found? */\n          singlevaraux(fs.prev, n, vr, 0);\n          /* try upper levels */\n\n          if (vr.k === expkind.VVOID)\n            /* not found? */\n            return;\n          /* it is a global */\n\n          /* else was LOCAL or UPVAL */\n\n          idx = newupvalue(fs, n, vr);\n          /* will be a new upvalue */\n        }\n\n        init_exp(vr, expkind.VUPVAL, idx);\n        /* new or old upvalue */\n      }\n    }\n};\n\nvar singlevar = function singlevar(ls, vr) {\n  var varname = str_checkname(ls);\n  var fs = ls.fs;\n  singlevaraux(fs, varname, vr, 1);\n\n  if (vr.k === expkind.VVOID) {\n    /* is global name? */\n    var key = new expdesc();\n    singlevaraux(fs, ls.envn, vr, 1);\n    /* get environment variable */\n\n    lua_assert(vr.k !== expkind.VVOID);\n    /* this one must exist */\n\n    codestring(ls, key, varname);\n    /* key is variable name */\n\n    luaK_indexed(fs, vr, key);\n    /* env[varname] */\n  }\n};\n\nvar adjust_assign = function adjust_assign(ls, nvars, nexps, e) {\n  var fs = ls.fs;\n  var extra = nvars - nexps;\n\n  if (hasmultret(e.k)) {\n    extra++;\n    /* includes call itself */\n\n    if (extra < 0) extra = 0;\n    luaK_setreturns(fs, e, extra);\n    /* last exp. provides the difference */\n\n    if (extra > 1) luaK_reserveregs(fs, extra - 1);\n  } else {\n    if (e.k !== expkind.VVOID) luaK_exp2nextreg(fs, e);\n    /* close last expression */\n\n    if (extra > 0) {\n      var reg = fs.freereg;\n      luaK_reserveregs(fs, extra);\n      luaK_nil(fs, reg, extra);\n    }\n  }\n\n  if (nexps > nvars) ls.fs.freereg -= nexps - nvars;\n  /* remove extra values */\n};\n\nvar enterlevel = function enterlevel(ls) {\n  var L = ls.L;\n  ++L.nCcalls;\n  checklimit(ls.fs, L.nCcalls, LUAI_MAXCCALLS, to_luastring(\"JS levels\", true));\n};\n\nvar leavelevel = function leavelevel(ls) {\n  return ls.L.nCcalls--;\n};\n\nvar closegoto = function closegoto(ls, g, label) {\n  var fs = ls.fs;\n  var gl = ls.dyd.gt;\n  var gt = gl.arr[g];\n  lua_assert(eqstr(gt.name, label.name));\n\n  if (gt.nactvar < label.nactvar) {\n    var vname = getlocvar(fs, gt.nactvar).varname;\n    var msg = lobject.luaO_pushfstring(ls.L, to_luastring(\"<goto %s> at line %d jumps into the scope of local '%s'\"), gt.name.getstr(), gt.line, vname.getstr());\n    semerror(ls, msg);\n  }\n\n  luaK_patchlist(fs, gt.pc, label.pc);\n  /* remove goto from pending list */\n\n  for (var i = g; i < gl.n - 1; i++) {\n    gl.arr[i] = gl.arr[i + 1];\n  }\n\n  gl.n--;\n};\n/*\n** try to close a goto with existing labels; this solves backward jumps\n*/\n\n\nvar findlabel = function findlabel(ls, g) {\n  var bl = ls.fs.bl;\n  var dyd = ls.dyd;\n  var gt = dyd.gt.arr[g];\n  /* check labels in current block for a match */\n\n  for (var i = bl.firstlabel; i < dyd.label.n; i++) {\n    var lb = dyd.label.arr[i];\n\n    if (eqstr(lb.name, gt.name)) {\n      /* correct label? */\n      if (gt.nactvar > lb.nactvar && (bl.upval || dyd.label.n > bl.firstlabel)) luaK_patchclose(ls.fs, gt.pc, lb.nactvar);\n      closegoto(ls, g, lb);\n      /* close it */\n\n      return true;\n    }\n  }\n\n  return false;\n  /* label not found; cannot close goto */\n};\n\nvar newlabelentry = function newlabelentry(ls, l, name, line, pc) {\n  var n = l.n;\n  l.arr[n] = new Labeldesc();\n  l.arr[n].name = name;\n  l.arr[n].line = line;\n  l.arr[n].nactvar = ls.fs.nactvar;\n  l.arr[n].pc = pc;\n  l.n = n + 1;\n  return n;\n};\n/*\n** check whether new label 'lb' matches any pending gotos in current\n** block; solves forward jumps\n*/\n\n\nvar findgotos = function findgotos(ls, lb) {\n  var gl = ls.dyd.gt;\n  var i = ls.fs.bl.firstgoto;\n\n  while (i < gl.n) {\n    if (eqstr(gl.arr[i].name, lb.name)) closegoto(ls, i, lb);else i++;\n  }\n};\n/*\n** export pending gotos to outer level, to check them against\n** outer labels; if the block being exited has upvalues, and\n** the goto exits the scope of any variable (which can be the\n** upvalue), close those variables being exited.\n*/\n\n\nvar movegotosout = function movegotosout(fs, bl) {\n  var i = bl.firstgoto;\n  var gl = fs.ls.dyd.gt;\n  /* correct pending gotos to current block and try to close it\n     with visible labels */\n\n  while (i < gl.n) {\n    var gt = gl.arr[i];\n\n    if (gt.nactvar > bl.nactvar) {\n      if (bl.upval) luaK_patchclose(fs, gt.pc, bl.nactvar);\n      gt.nactvar = bl.nactvar;\n    }\n\n    if (!findlabel(fs.ls, i)) i++;\n    /* move to next one */\n  }\n};\n\nvar enterblock = function enterblock(fs, bl, isloop) {\n  bl.isloop = isloop;\n  bl.nactvar = fs.nactvar;\n  bl.firstlabel = fs.ls.dyd.label.n;\n  bl.firstgoto = fs.ls.dyd.gt.n;\n  bl.upval = 0;\n  bl.previous = fs.bl;\n  fs.bl = bl;\n  lua_assert(fs.freereg === fs.nactvar);\n};\n/*\n** create a label named 'break' to resolve break statements\n*/\n\n\nvar breaklabel = function breaklabel(ls) {\n  var n = luaS_newliteral(ls.L, \"break\");\n  var l = newlabelentry(ls, ls.dyd.label, n, 0, ls.fs.pc);\n  findgotos(ls, ls.dyd.label.arr[l]);\n};\n/*\n** generates an error for an undefined 'goto'; choose appropriate\n** message when label name is a reserved word (which can only be 'break')\n*/\n\n\nvar undefgoto = function undefgoto(ls, gt) {\n  var msg = llex.isreserved(gt.name) ? \"<%s> at line %d not inside a loop\" : \"no visible label '%s' for <goto> at line %d\";\n  msg = lobject.luaO_pushfstring(ls.L, to_luastring(msg), gt.name.getstr(), gt.line);\n  semerror(ls, msg);\n};\n/*\n** adds a new prototype into list of prototypes\n*/\n\n\nvar addprototype = function addprototype(ls) {\n  var L = ls.L;\n  var clp = new Proto(L);\n  var fs = ls.fs;\n  var f = fs.f;\n  /* prototype of current function */\n\n  f.p[fs.np++] = clp;\n  return clp;\n};\n/*\n** codes instruction to create new closure in parent function.\n*/\n\n\nvar codeclosure = function codeclosure(ls, v) {\n  var fs = ls.fs.prev;\n  init_exp(v, expkind.VRELOCABLE, luaK_codeABx(fs, OP_CLOSURE, 0, fs.np - 1));\n  luaK_exp2nextreg(fs, v);\n  /* fix it at the last register */\n};\n\nvar open_func = function open_func(ls, fs, bl) {\n  fs.prev = ls.fs;\n  /* linked list of funcstates */\n\n  fs.ls = ls;\n  ls.fs = fs;\n  fs.pc = 0;\n  fs.lasttarget = 0;\n  fs.jpc = NO_JUMP;\n  fs.freereg = 0;\n  fs.nk = 0;\n  fs.np = 0;\n  fs.nups = 0;\n  fs.nlocvars = 0;\n  fs.nactvar = 0;\n  fs.firstlocal = ls.dyd.actvar.n;\n  fs.bl = null;\n  var f = fs.f;\n  f.source = ls.source;\n  f.maxstacksize = 2;\n  /* registers 0/1 are always valid */\n\n  enterblock(fs, bl, false);\n};\n\nvar leaveblock = function leaveblock(fs) {\n  var bl = fs.bl;\n  var ls = fs.ls;\n\n  if (bl.previous && bl.upval) {\n    /* create a 'jump to here' to close upvalues */\n    var j = luaK_jump(fs);\n    luaK_patchclose(fs, j, bl.nactvar);\n    luaK_patchtohere(fs, j);\n  }\n\n  if (bl.isloop) breaklabel(ls);\n  /* close pending breaks */\n\n  fs.bl = bl.previous;\n  removevars(fs, bl.nactvar);\n  lua_assert(bl.nactvar === fs.nactvar);\n  fs.freereg = fs.nactvar;\n  /* free registers */\n\n  ls.dyd.label.n = bl.firstlabel;\n  /* remove local labels */\n\n  if (bl.previous)\n    /* inner block? */\n    movegotosout(fs, bl);\n    /* update pending gotos to outer block */\n  else if (bl.firstgoto < ls.dyd.gt.n)\n      /* pending gotos in outer block? */\n      undefgoto(ls, ls.dyd.gt.arr[bl.firstgoto]);\n  /* error */\n};\n\nvar close_func = function close_func(ls) {\n  var fs = ls.fs;\n  luaK_ret(fs, 0, 0);\n  /* final return */\n\n  leaveblock(fs);\n  lua_assert(fs.bl === null);\n  ls.fs = fs.prev;\n};\n/*============================================================*/\n\n/* GRAMMAR RULES */\n\n/*============================================================*/\n\n\nvar block_follow = function block_follow(ls, withuntil) {\n  switch (ls.t.token) {\n    case R.TK_ELSE:\n    case R.TK_ELSEIF:\n    case R.TK_END:\n    case R.TK_EOS:\n      return true;\n\n    case R.TK_UNTIL:\n      return withuntil;\n\n    default:\n      return false;\n  }\n};\n\nvar statlist = function statlist(ls) {\n  /* statlist -> { stat [';'] } */\n  while (!block_follow(ls, 1)) {\n    if (ls.t.token === R.TK_RETURN) {\n      statement(ls);\n      return;\n      /* 'return' must be last statement */\n    }\n\n    statement(ls);\n  }\n};\n\nvar fieldsel = function fieldsel(ls, v) {\n  /* fieldsel -> ['.' | ':'] NAME */\n  var fs = ls.fs;\n  var key = new expdesc();\n  luaK_exp2anyregup(fs, v);\n  llex.luaX_next(ls);\n  /* skip the dot or colon */\n\n  checkname(ls, key);\n  luaK_indexed(fs, v, key);\n};\n\nvar yindex = function yindex(ls, v) {\n  /* index -> '[' expr ']' */\n  llex.luaX_next(ls);\n  /* skip the '[' */\n\n  expr(ls, v);\n  luaK_exp2val(ls.fs, v);\n  checknext(ls, 93\n  /* (']').charCodeAt(0) */\n  );\n};\n/*\n** {======================================================================\n** Rules for Constructors\n** =======================================================================\n*/\n\n\nvar ConsControl = function ConsControl() {\n  _classCallCheck(this, ConsControl);\n\n  this.v = new expdesc();\n  /* last list item read */\n\n  this.t = new expdesc();\n  /* table descriptor */\n\n  this.nh = NaN;\n  /* total number of 'record' elements */\n\n  this.na = NaN;\n  /* total number of array elements */\n\n  this.tostore = NaN;\n  /* number of array elements pending to be stored */\n};\n\nvar recfield = function recfield(ls, cc) {\n  /* recfield -> (NAME | '['exp1']') = exp1 */\n  var fs = ls.fs;\n  var reg = ls.fs.freereg;\n  var key = new expdesc();\n  var val = new expdesc();\n\n  if (ls.t.token === R.TK_NAME) {\n    checklimit(fs, cc.nh, MAX_INT, to_luastring(\"items in a constructor\", true));\n    checkname(ls, key);\n  } else\n    /* ls->t.token === '[' */\n    yindex(ls, key);\n\n  cc.nh++;\n  checknext(ls, 61\n  /* ('=').charCodeAt(0) */\n  );\n  var rkkey = luaK_exp2RK(fs, key);\n  expr(ls, val);\n  luaK_codeABC(fs, OP_SETTABLE, cc.t.u.info, rkkey, luaK_exp2RK(fs, val));\n  fs.freereg = reg;\n  /* free registers */\n};\n\nvar closelistfield = function closelistfield(fs, cc) {\n  if (cc.v.k === expkind.VVOID) return;\n  /* there is no list item */\n\n  luaK_exp2nextreg(fs, cc.v);\n  cc.v.k = expkind.VVOID;\n\n  if (cc.tostore === LFIELDS_PER_FLUSH) {\n    luaK_setlist(fs, cc.t.u.info, cc.na, cc.tostore);\n    /* flush */\n\n    cc.tostore = 0;\n    /* no more items pending */\n  }\n};\n\nvar lastlistfield = function lastlistfield(fs, cc) {\n  if (cc.tostore === 0) return;\n\n  if (hasmultret(cc.v.k)) {\n    luaK_setmultret(fs, cc.v);\n    luaK_setlist(fs, cc.t.u.info, cc.na, LUA_MULTRET);\n    cc.na--;\n    /* do not count last expression (unknown number of elements) */\n  } else {\n    if (cc.v.k !== expkind.VVOID) luaK_exp2nextreg(fs, cc.v);\n    luaK_setlist(fs, cc.t.u.info, cc.na, cc.tostore);\n  }\n};\n\nvar listfield = function listfield(ls, cc) {\n  /* listfield -> exp */\n  expr(ls, cc.v);\n  checklimit(ls.fs, cc.na, MAX_INT, to_luastring(\"items in a constructor\", true));\n  cc.na++;\n  cc.tostore++;\n};\n\nvar field = function field(ls, cc) {\n  /* field -> listfield | recfield */\n  switch (ls.t.token) {\n    case R.TK_NAME:\n      {\n        /* may be 'listfield' or 'recfield' */\n        if (llex.luaX_lookahead(ls) !== 61\n        /* ('=').charCodeAt(0) */\n        )\n          /* expression? */\n          listfield(ls, cc);else recfield(ls, cc);\n        break;\n      }\n\n    case 91\n    /* ('[').charCodeAt(0) */\n    :\n      {\n        recfield(ls, cc);\n        break;\n      }\n\n    default:\n      {\n        listfield(ls, cc);\n        break;\n      }\n  }\n};\n\nvar constructor = function constructor(ls, t) {\n  /* constructor -> '{' [ field { sep field } [sep] ] '}'\n     sep -> ',' | ';' */\n  var fs = ls.fs;\n  var line = ls.linenumber;\n  var pc = luaK_codeABC(fs, OP_NEWTABLE, 0, 0, 0);\n  var cc = new ConsControl();\n  cc.na = cc.nh = cc.tostore = 0;\n  cc.t = t;\n  init_exp(t, expkind.VRELOCABLE, pc);\n  init_exp(cc.v, expkind.VVOID, 0);\n  /* no value (yet) */\n\n  luaK_exp2nextreg(ls.fs, t);\n  /* fix it at stack top */\n\n  checknext(ls, 123\n  /* ('{').charCodeAt(0) */\n  );\n\n  do {\n    lua_assert(cc.v.k === expkind.VVOID || cc.tostore > 0);\n    if (ls.t.token === 125\n    /* ('}').charCodeAt(0) */\n    ) break;\n    closelistfield(fs, cc);\n    field(ls, cc);\n  } while (testnext(ls, 44\n  /* (',').charCodeAt(0) */\n  ) || testnext(ls, 59\n  /* (';').charCodeAt(0) */\n  ));\n\n  check_match(ls, 125\n  /* ('}').charCodeAt(0) */\n  , 123\n  /* ('{').charCodeAt(0) */\n  , line);\n  lastlistfield(fs, cc);\n  SETARG_B(fs.f.code[pc], lobject.luaO_int2fb(cc.na));\n  /* set initial array size */\n\n  SETARG_C(fs.f.code[pc], lobject.luaO_int2fb(cc.nh));\n  /* set initial table size */\n};\n/* }====================================================================== */\n\n\nvar parlist = function parlist(ls) {\n  /* parlist -> [ param { ',' param } ] */\n  var fs = ls.fs;\n  var f = fs.f;\n  var nparams = 0;\n  f.is_vararg = false;\n\n  if (ls.t.token !== 41\n  /* (')').charCodeAt(0) */\n  ) {\n      /* is 'parlist' not empty? */\n      do {\n        switch (ls.t.token) {\n          case R.TK_NAME:\n            {\n              /* param -> NAME */\n              new_localvar(ls, str_checkname(ls));\n              nparams++;\n              break;\n            }\n\n          case R.TK_DOTS:\n            {\n              /* param -> '...' */\n              llex.luaX_next(ls);\n              f.is_vararg = true;\n              /* declared vararg */\n\n              break;\n            }\n\n          default:\n            llex.luaX_syntaxerror(ls, to_luastring(\"<name> or '...' expected\", true));\n        }\n      } while (!f.is_vararg && testnext(ls, 44\n      /* (',').charCodeAt(0) */\n      ));\n    }\n\n  adjustlocalvars(ls, nparams);\n  f.numparams = fs.nactvar;\n  luaK_reserveregs(fs, fs.nactvar);\n  /* reserve register for parameters */\n};\n\nvar body = function body(ls, e, ismethod, line) {\n  /* body ->  '(' parlist ')' block END */\n  var new_fs = new FuncState();\n  var bl = new BlockCnt();\n  new_fs.f = addprototype(ls);\n  new_fs.f.linedefined = line;\n  open_func(ls, new_fs, bl);\n  checknext(ls, 40\n  /* ('(').charCodeAt(0) */\n  );\n\n  if (ismethod) {\n    new_localvarliteral(ls, \"self\");\n    /* create 'self' parameter */\n\n    adjustlocalvars(ls, 1);\n  }\n\n  parlist(ls);\n  checknext(ls, 41\n  /* (')').charCodeAt(0) */\n  );\n  statlist(ls);\n  new_fs.f.lastlinedefined = ls.linenumber;\n  check_match(ls, R.TK_END, R.TK_FUNCTION, line);\n  codeclosure(ls, e);\n  close_func(ls);\n};\n\nvar explist = function explist(ls, v) {\n  /* explist -> expr { ',' expr } */\n  var n = 1;\n  /* at least one expression */\n\n  expr(ls, v);\n\n  while (testnext(ls, 44\n  /* (',').charCodeAt(0) */\n  )) {\n    luaK_exp2nextreg(ls.fs, v);\n    expr(ls, v);\n    n++;\n  }\n\n  return n;\n};\n\nvar funcargs = function funcargs(ls, f, line) {\n  var fs = ls.fs;\n  var args = new expdesc();\n\n  switch (ls.t.token) {\n    case 40\n    /* ('(').charCodeAt(0) */\n    :\n      {\n        /* funcargs -> '(' [ explist ] ')' */\n        llex.luaX_next(ls);\n        if (ls.t.token === 41\n        /* (')').charCodeAt(0) */\n        )\n          /* arg list is empty? */\n          args.k = expkind.VVOID;else {\n          explist(ls, args);\n          luaK_setmultret(fs, args);\n        }\n        check_match(ls, 41\n        /* (')').charCodeAt(0) */\n        , 40\n        /* ('(').charCodeAt(0) */\n        , line);\n        break;\n      }\n\n    case 123\n    /* ('{').charCodeAt(0) */\n    :\n      {\n        /* funcargs -> constructor */\n        constructor(ls, args);\n        break;\n      }\n\n    case R.TK_STRING:\n      {\n        /* funcargs -> STRING */\n        codestring(ls, args, ls.t.seminfo.ts);\n        llex.luaX_next(ls);\n        /* must use 'seminfo' before 'next' */\n\n        break;\n      }\n\n    default:\n      {\n        llex.luaX_syntaxerror(ls, to_luastring(\"function arguments expected\", true));\n      }\n  }\n\n  lua_assert(f.k === expkind.VNONRELOC);\n  var nparams;\n  var base = f.u.info;\n  /* base register for call */\n\n  if (hasmultret(args.k)) nparams = LUA_MULTRET;\n  /* open call */\n  else {\n      if (args.k !== expkind.VVOID) luaK_exp2nextreg(fs, args);\n      /* close last argument */\n\n      nparams = fs.freereg - (base + 1);\n    }\n  init_exp(f, expkind.VCALL, luaK_codeABC(fs, OP_CALL, base, nparams + 1, 2));\n  luaK_fixline(fs, line);\n  fs.freereg = base + 1;\n  /* call remove function and arguments and leaves (unless changed) one result */\n};\n/*\n** {======================================================================\n** Expression parsing\n** =======================================================================\n*/\n\n\nvar primaryexp = function primaryexp(ls, v) {\n  /* primaryexp -> NAME | '(' expr ')' */\n  switch (ls.t.token) {\n    case 40\n    /* ('(').charCodeAt(0) */\n    :\n      {\n        var line = ls.linenumber;\n        llex.luaX_next(ls);\n        expr(ls, v);\n        check_match(ls, 41\n        /* (')').charCodeAt(0) */\n        , 40\n        /* ('(').charCodeAt(0) */\n        , line);\n        luaK_dischargevars(ls.fs, v);\n        return;\n      }\n\n    case R.TK_NAME:\n      {\n        singlevar(ls, v);\n        return;\n      }\n\n    default:\n      {\n        llex.luaX_syntaxerror(ls, to_luastring(\"unexpected symbol\", true));\n      }\n  }\n};\n\nvar suffixedexp = function suffixedexp(ls, v) {\n  /* suffixedexp ->\n     primaryexp { '.' NAME | '[' exp ']' | ':' NAME funcargs | funcargs } */\n  var fs = ls.fs;\n  var line = ls.linenumber;\n  primaryexp(ls, v);\n\n  for (;;) {\n    switch (ls.t.token) {\n      case 46\n      /* ('.').charCodeAt(0) */\n      :\n        {\n          /* fieldsel */\n          fieldsel(ls, v);\n          break;\n        }\n\n      case 91\n      /* ('[').charCodeAt(0) */\n      :\n        {\n          /* '[' exp1 ']' */\n          var key = new expdesc();\n          luaK_exp2anyregup(fs, v);\n          yindex(ls, key);\n          luaK_indexed(fs, v, key);\n          break;\n        }\n\n      case 58\n      /* (':').charCodeAt(0) */\n      :\n        {\n          /* ':' NAME funcargs */\n          var _key = new expdesc();\n\n          llex.luaX_next(ls);\n          checkname(ls, _key);\n          luaK_self(fs, v, _key);\n          funcargs(ls, v, line);\n          break;\n        }\n\n      case 40\n      /* ('(').charCodeAt(0) */\n      :\n      case R.TK_STRING:\n      case 123\n      /* ('{').charCodeAt(0) */\n      :\n        {\n          /* funcargs */\n          luaK_exp2nextreg(fs, v);\n          funcargs(ls, v, line);\n          break;\n        }\n\n      default:\n        return;\n    }\n  }\n};\n\nvar simpleexp = function simpleexp(ls, v) {\n  /* simpleexp -> FLT | INT | STRING | NIL | TRUE | FALSE | ... |\n     constructor | FUNCTION body | suffixedexp */\n  switch (ls.t.token) {\n    case R.TK_FLT:\n      {\n        init_exp(v, expkind.VKFLT, 0);\n        v.u.nval = ls.t.seminfo.r;\n        break;\n      }\n\n    case R.TK_INT:\n      {\n        init_exp(v, expkind.VKINT, 0);\n        v.u.ival = ls.t.seminfo.i;\n        break;\n      }\n\n    case R.TK_STRING:\n      {\n        codestring(ls, v, ls.t.seminfo.ts);\n        break;\n      }\n\n    case R.TK_NIL:\n      {\n        init_exp(v, expkind.VNIL, 0);\n        break;\n      }\n\n    case R.TK_TRUE:\n      {\n        init_exp(v, expkind.VTRUE, 0);\n        break;\n      }\n\n    case R.TK_FALSE:\n      {\n        init_exp(v, expkind.VFALSE, 0);\n        break;\n      }\n\n    case R.TK_DOTS:\n      {\n        /* vararg */\n        var fs = ls.fs;\n        check_condition(ls, fs.f.is_vararg, to_luastring(\"cannot use '...' outside a vararg function\", true));\n        init_exp(v, expkind.VVARARG, luaK_codeABC(fs, OP_VARARG, 0, 1, 0));\n        break;\n      }\n\n    case 123\n    /* ('{').charCodeAt(0) */\n    :\n      {\n        /* constructor */\n        constructor(ls, v);\n        return;\n      }\n\n    case R.TK_FUNCTION:\n      {\n        llex.luaX_next(ls);\n        body(ls, v, 0, ls.linenumber);\n        return;\n      }\n\n    default:\n      {\n        suffixedexp(ls, v);\n        return;\n      }\n  }\n\n  llex.luaX_next(ls);\n};\n\nvar getunopr = function getunopr(op) {\n  switch (op) {\n    case R.TK_NOT:\n      return OPR_NOT;\n\n    case 45\n    /* ('-').charCodeAt(0) */\n    :\n      return OPR_MINUS;\n\n    case 126\n    /* ('~').charCodeAt(0) */\n    :\n      return OPR_BNOT;\n\n    case 35\n    /* ('#').charCodeAt(0) */\n    :\n      return OPR_LEN;\n\n    default:\n      return OPR_NOUNOPR;\n  }\n};\n\nvar getbinopr = function getbinopr(op) {\n  switch (op) {\n    case 43\n    /* ('+').charCodeAt(0) */\n    :\n      return OPR_ADD;\n\n    case 45\n    /* ('-').charCodeAt(0) */\n    :\n      return OPR_SUB;\n\n    case 42\n    /* ('*').charCodeAt(0) */\n    :\n      return OPR_MUL;\n\n    case 37\n    /* ('%').charCodeAt(0) */\n    :\n      return OPR_MOD;\n\n    case 94\n    /* ('^').charCodeAt(0) */\n    :\n      return OPR_POW;\n\n    case 47\n    /* ('/').charCodeAt(0) */\n    :\n      return OPR_DIV;\n\n    case R.TK_IDIV:\n      return OPR_IDIV;\n\n    case 38\n    /* ('&').charCodeAt(0) */\n    :\n      return OPR_BAND;\n\n    case 124\n    /* ('|').charCodeAt(0) */\n    :\n      return OPR_BOR;\n\n    case 126\n    /* ('~').charCodeAt(0) */\n    :\n      return OPR_BXOR;\n\n    case R.TK_SHL:\n      return OPR_SHL;\n\n    case R.TK_SHR:\n      return OPR_SHR;\n\n    case R.TK_CONCAT:\n      return OPR_CONCAT;\n\n    case R.TK_NE:\n      return OPR_NE;\n\n    case R.TK_EQ:\n      return OPR_EQ;\n\n    case 60\n    /* ('<').charCodeAt(0) */\n    :\n      return OPR_LT;\n\n    case R.TK_LE:\n      return OPR_LE;\n\n    case 62\n    /* ('>').charCodeAt(0) */\n    :\n      return OPR_GT;\n\n    case R.TK_GE:\n      return OPR_GE;\n\n    case R.TK_AND:\n      return OPR_AND;\n\n    case R.TK_OR:\n      return OPR_OR;\n\n    default:\n      return OPR_NOBINOPR;\n  }\n};\n\nvar priority = [\n/* ORDER OPR */\n{\n  left: 10,\n  right: 10\n}, {\n  left: 10,\n  right: 10\n},\n/* '+' '-' */\n{\n  left: 11,\n  right: 11\n}, {\n  left: 11,\n  right: 11\n},\n/* '*' '%' */\n{\n  left: 14,\n  right: 13\n},\n/* '^' (right associative) */\n{\n  left: 11,\n  right: 11\n}, {\n  left: 11,\n  right: 11\n},\n/* '/' '//' */\n{\n  left: 6,\n  right: 6\n}, {\n  left: 4,\n  right: 4\n}, {\n  left: 5,\n  right: 5\n},\n/* '&' '|' '~' */\n{\n  left: 7,\n  right: 7\n}, {\n  left: 7,\n  right: 7\n},\n/* '<<' '>>' */\n{\n  left: 9,\n  right: 8\n},\n/* '..' (right associative) */\n{\n  left: 3,\n  right: 3\n}, {\n  left: 3,\n  right: 3\n}, {\n  left: 3,\n  right: 3\n},\n/* ==, <, <= */\n{\n  left: 3,\n  right: 3\n}, {\n  left: 3,\n  right: 3\n}, {\n  left: 3,\n  right: 3\n},\n/* ~=, >, >= */\n{\n  left: 2,\n  right: 2\n}, {\n  left: 1,\n  right: 1\n  /* and, or */\n\n}];\nvar UNARY_PRIORITY = 12;\n/*\n** subexpr -> (simpleexp | unop subexpr) { binop subexpr }\n** where 'binop' is any binary operator with a priority higher than 'limit'\n*/\n\nvar subexpr = function subexpr(ls, v, limit) {\n  enterlevel(ls);\n  var uop = getunopr(ls.t.token);\n\n  if (uop !== OPR_NOUNOPR) {\n    var line = ls.linenumber;\n    llex.luaX_next(ls);\n    subexpr(ls, v, UNARY_PRIORITY);\n    luaK_prefix(ls.fs, uop, v, line);\n  } else simpleexp(ls, v);\n  /* expand while operators have priorities higher than 'limit' */\n\n\n  var op = getbinopr(ls.t.token);\n\n  while (op !== OPR_NOBINOPR && priority[op].left > limit) {\n    var v2 = new expdesc();\n    var _line = ls.linenumber;\n    llex.luaX_next(ls);\n    luaK_infix(ls.fs, op, v);\n    /* read sub-expression with higher priority */\n\n    var nextop = subexpr(ls, v2, priority[op].right);\n    luaK_posfix(ls.fs, op, v, v2, _line);\n    op = nextop;\n  }\n\n  leavelevel(ls);\n  return op;\n  /* return first untreated operator */\n};\n\nvar expr = function expr(ls, v) {\n  subexpr(ls, v, 0);\n};\n/* }==================================================================== */\n\n/*\n** {======================================================================\n** Rules for Statements\n** =======================================================================\n*/\n\n\nvar block = function block(ls) {\n  /* block -> statlist */\n  var fs = ls.fs;\n  var bl = new BlockCnt();\n  enterblock(fs, bl, 0);\n  statlist(ls);\n  leaveblock(fs);\n};\n/*\n** structure to chain all variables in the left-hand side of an\n** assignment\n*/\n\n\nvar LHS_assign = function LHS_assign() {\n  _classCallCheck(this, LHS_assign);\n\n  this.prev = null;\n  this.v = new expdesc();\n  /* variable (global, local, upvalue, or indexed) */\n};\n/*\n** check whether, in an assignment to an upvalue/local variable, the\n** upvalue/local variable is begin used in a previous assignment to a\n** table. If so, save original upvalue/local value in a safe place and\n** use this safe copy in the previous assignment.\n*/\n\n\nvar check_conflict = function check_conflict(ls, lh, v) {\n  var fs = ls.fs;\n  var extra = fs.freereg;\n  /* eventual position to save local variable */\n\n  var conflict = false;\n\n  for (; lh; lh = lh.prev) {\n    /* check all previous assignments */\n    if (lh.v.k === expkind.VINDEXED) {\n      /* assigning to a table? */\n\n      /* table is the upvalue/local being assigned now? */\n      if (lh.v.u.ind.vt === v.k && lh.v.u.ind.t === v.u.info) {\n        conflict = true;\n        lh.v.u.ind.vt = expkind.VLOCAL;\n        lh.v.u.ind.t = extra;\n        /* previous assignment will use safe copy */\n      }\n      /* index is the local being assigned? (index cannot be upvalue) */\n\n\n      if (v.k === expkind.VLOCAL && lh.v.u.ind.idx === v.u.info) {\n        conflict = true;\n        lh.v.u.ind.idx = extra;\n        /* previous assignment will use safe copy */\n      }\n    }\n  }\n\n  if (conflict) {\n    /* copy upvalue/local value to a temporary (in position 'extra') */\n    var op = v.k === expkind.VLOCAL ? OP_MOVE : OP_GETUPVAL;\n    luaK_codeABC(fs, op, extra, v.u.info, 0);\n    luaK_reserveregs(fs, 1);\n  }\n};\n\nvar assignment = function assignment(ls, lh, nvars) {\n  var e = new expdesc();\n  check_condition(ls, vkisvar(lh.v.k), to_luastring(\"syntax error\", true));\n\n  if (testnext(ls, 44\n  /* (',').charCodeAt(0) */\n  )) {\n    /* assignment -> ',' suffixedexp assignment */\n    var nv = new LHS_assign();\n    nv.prev = lh;\n    suffixedexp(ls, nv.v);\n    if (nv.v.k !== expkind.VINDEXED) check_conflict(ls, lh, nv.v);\n    checklimit(ls.fs, nvars + ls.L.nCcalls, LUAI_MAXCCALLS, to_luastring(\"JS levels\", true));\n    assignment(ls, nv, nvars + 1);\n  } else {\n    /* assignment -> '=' explist */\n    checknext(ls, 61\n    /* ('=').charCodeAt(0) */\n    );\n    var nexps = explist(ls, e);\n    if (nexps !== nvars) adjust_assign(ls, nvars, nexps, e);else {\n      luaK_setoneret(ls.fs, e);\n      /* close last expression */\n\n      luaK_storevar(ls.fs, lh.v, e);\n      return;\n      /* avoid default */\n    }\n  }\n\n  init_exp(e, expkind.VNONRELOC, ls.fs.freereg - 1);\n  /* default assignment */\n\n  luaK_storevar(ls.fs, lh.v, e);\n};\n\nvar cond = function cond(ls) {\n  /* cond -> exp */\n  var v = new expdesc();\n  expr(ls, v);\n  /* read condition */\n\n  if (v.k === expkind.VNIL) v.k = expkind.VFALSE;\n  /* 'falses' are all equal here */\n\n  luaK_goiftrue(ls.fs, v);\n  return v.f;\n};\n\nvar gotostat = function gotostat(ls, pc) {\n  var line = ls.linenumber;\n  var label;\n  if (testnext(ls, R.TK_GOTO)) label = str_checkname(ls);else {\n    llex.luaX_next(ls);\n    /* skip break */\n\n    label = luaS_newliteral(ls.L, \"break\");\n  }\n  var g = newlabelentry(ls, ls.dyd.gt, label, line, pc);\n  findlabel(ls, g);\n  /* close it if label already defined */\n};\n/* check for repeated labels on the same block */\n\n\nvar checkrepeated = function checkrepeated(fs, ll, label) {\n  for (var i = fs.bl.firstlabel; i < ll.n; i++) {\n    if (eqstr(label, ll.arr[i].name)) {\n      var msg = lobject.luaO_pushfstring(fs.ls.L, to_luastring(\"label '%s' already defined on line %d\", true), label.getstr(), ll.arr[i].line);\n      semerror(fs.ls, msg);\n    }\n  }\n};\n/* skip no-op statements */\n\n\nvar skipnoopstat = function skipnoopstat(ls) {\n  while (ls.t.token === 59\n  /* (';').charCodeAt(0) */\n  || ls.t.token === R.TK_DBCOLON) {\n    statement(ls);\n  }\n};\n\nvar labelstat = function labelstat(ls, label, line) {\n  /* label -> '::' NAME '::' */\n  var fs = ls.fs;\n  var ll = ls.dyd.label;\n  var l;\n  /* index of new label being created */\n\n  checkrepeated(fs, ll, label);\n  /* check for repeated labels */\n\n  checknext(ls, R.TK_DBCOLON);\n  /* skip double colon */\n\n  /* create new entry for this label */\n\n  l = newlabelentry(ls, ll, label, line, luaK_getlabel(fs));\n  skipnoopstat(ls);\n  /* skip other no-op statements */\n\n  if (block_follow(ls, 0)) {\n    /* label is last no-op statement in the block? */\n\n    /* assume that locals are already out of scope */\n    ll.arr[l].nactvar = fs.bl.nactvar;\n  }\n\n  findgotos(ls, ll.arr[l]);\n};\n\nvar whilestat = function whilestat(ls, line) {\n  /* whilestat -> WHILE cond DO block END */\n  var fs = ls.fs;\n  var bl = new BlockCnt();\n  llex.luaX_next(ls);\n  /* skip WHILE */\n\n  var whileinit = luaK_getlabel(fs);\n  var condexit = cond(ls);\n  enterblock(fs, bl, 1);\n  checknext(ls, R.TK_DO);\n  block(ls);\n  luaK_jumpto(fs, whileinit);\n  check_match(ls, R.TK_END, R.TK_WHILE, line);\n  leaveblock(fs);\n  luaK_patchtohere(fs, condexit);\n  /* false conditions finish the loop */\n};\n\nvar repeatstat = function repeatstat(ls, line) {\n  /* repeatstat -> REPEAT block UNTIL cond */\n  var fs = ls.fs;\n  var repeat_init = luaK_getlabel(fs);\n  var bl1 = new BlockCnt();\n  var bl2 = new BlockCnt();\n  enterblock(fs, bl1, 1);\n  /* loop block */\n\n  enterblock(fs, bl2, 0);\n  /* scope block */\n\n  llex.luaX_next(ls);\n  /* skip REPEAT */\n\n  statlist(ls);\n  check_match(ls, R.TK_UNTIL, R.TK_REPEAT, line);\n  var condexit = cond(ls);\n  /* read condition (inside scope block) */\n\n  if (bl2.upval)\n    /* upvalues? */\n    luaK_patchclose(fs, condexit, bl2.nactvar);\n  leaveblock(fs);\n  /* finish scope */\n\n  luaK_patchlist(fs, condexit, repeat_init);\n  /* close the loop */\n\n  leaveblock(fs);\n  /* finish loop */\n};\n\nvar exp1 = function exp1(ls) {\n  var e = new expdesc();\n  expr(ls, e);\n  luaK_exp2nextreg(ls.fs, e);\n  lua_assert(e.k === expkind.VNONRELOC);\n  var reg = e.u.info;\n  return reg;\n};\n\nvar forbody = function forbody(ls, base, line, nvars, isnum) {\n  /* forbody -> DO block */\n  var bl = new BlockCnt();\n  var fs = ls.fs;\n  var endfor;\n  adjustlocalvars(ls, 3);\n  /* control variables */\n\n  checknext(ls, R.TK_DO);\n  var prep = isnum ? luaK_codeAsBx(fs, OP_FORPREP, base, NO_JUMP) : luaK_jump(fs);\n  enterblock(fs, bl, 0);\n  /* scope for declared variables */\n\n  adjustlocalvars(ls, nvars);\n  luaK_reserveregs(fs, nvars);\n  block(ls);\n  leaveblock(fs);\n  /* end of scope for declared variables */\n\n  luaK_patchtohere(fs, prep);\n  if (isnum)\n    /* end of scope for declared variables */\n    endfor = luaK_codeAsBx(fs, OP_FORLOOP, base, NO_JUMP);else {\n    /* generic for */\n    luaK_codeABC(fs, OP_TFORCALL, base, 0, nvars);\n    luaK_fixline(fs, line);\n    endfor = luaK_codeAsBx(fs, OP_TFORLOOP, base + 2, NO_JUMP);\n  }\n  luaK_patchlist(fs, endfor, prep + 1);\n  luaK_fixline(fs, line);\n};\n\nvar fornum = function fornum(ls, varname, line) {\n  /* fornum -> NAME = exp1,exp1[,exp1] forbody */\n  var fs = ls.fs;\n  var base = fs.freereg;\n  new_localvarliteral(ls, \"(for index)\");\n  new_localvarliteral(ls, \"(for limit)\");\n  new_localvarliteral(ls, \"(for step)\");\n  new_localvar(ls, varname);\n  checknext(ls, 61\n  /* ('=').charCodeAt(0) */\n  );\n  exp1(ls);\n  /* initial value */\n\n  checknext(ls, 44\n  /* (',').charCodeAt(0) */\n  );\n  exp1(ls);\n  /* limit */\n\n  if (testnext(ls, 44\n  /* (',').charCodeAt(0) */\n  )) exp1(ls);\n  /* optional step */\n  else {\n      /* default step = 1 */\n      luaK_codek(fs, fs.freereg, luaK_intK(fs, 1));\n      luaK_reserveregs(fs, 1);\n    }\n  forbody(ls, base, line, 1, 1);\n};\n\nvar forlist = function forlist(ls, indexname) {\n  /* forlist -> NAME {,NAME} IN explist forbody */\n  var fs = ls.fs;\n  var e = new expdesc();\n  var nvars = 4;\n  /* gen, state, control, plus at least one declared var */\n\n  var base = fs.freereg;\n  /* create control variables */\n\n  new_localvarliteral(ls, \"(for generator)\");\n  new_localvarliteral(ls, \"(for state)\");\n  new_localvarliteral(ls, \"(for control)\");\n  /* create declared variables */\n\n  new_localvar(ls, indexname);\n\n  while (testnext(ls, 44\n  /* (',').charCodeAt(0) */\n  )) {\n    new_localvar(ls, str_checkname(ls));\n    nvars++;\n  }\n\n  checknext(ls, R.TK_IN);\n  var line = ls.linenumber;\n  adjust_assign(ls, 3, explist(ls, e), e);\n  luaK_checkstack(fs, 3);\n  /* extra space to call generator */\n\n  forbody(ls, base, line, nvars - 3, 0);\n};\n\nvar forstat = function forstat(ls, line) {\n  /* forstat -> FOR (fornum | forlist) END */\n  var fs = ls.fs;\n  var bl = new BlockCnt();\n  enterblock(fs, bl, 1);\n  /* scope for loop and control variables */\n\n  llex.luaX_next(ls);\n  /* skip 'for' */\n\n  var varname = str_checkname(ls);\n  /* first variable name */\n\n  switch (ls.t.token) {\n    case 61\n    /* ('=').charCodeAt(0) */\n    :\n      fornum(ls, varname, line);\n      break;\n\n    case 44\n    /* (',').charCodeAt(0) */\n    :\n    case R.TK_IN:\n      forlist(ls, varname);\n      break;\n\n    default:\n      llex.luaX_syntaxerror(ls, to_luastring(\"'=' or 'in' expected\", true));\n  }\n\n  check_match(ls, R.TK_END, R.TK_FOR, line);\n  leaveblock(fs);\n  /* loop scope ('break' jumps to this point) */\n};\n\nvar test_then_block = function test_then_block(ls, escapelist) {\n  /* test_then_block -> [IF | ELSEIF] cond THEN block */\n  var bl = new BlockCnt();\n  var fs = ls.fs;\n  var v = new expdesc();\n  var jf;\n  /* instruction to skip 'then' code (if condition is false) */\n\n  llex.luaX_next(ls);\n  /* skip IF or ELSEIF */\n\n  expr(ls, v);\n  /* read condition */\n\n  checknext(ls, R.TK_THEN);\n\n  if (ls.t.token === R.TK_GOTO || ls.t.token === R.TK_BREAK) {\n    luaK_goiffalse(ls.fs, v);\n    /* will jump to label if condition is true */\n\n    enterblock(fs, bl, false);\n    /* must enter block before 'goto' */\n\n    gotostat(ls, v.t);\n    /* handle goto/break */\n\n    while (testnext(ls, 59\n    /* (';').charCodeAt(0) */\n    )) {\n      ;\n    }\n    /* skip colons */\n\n\n    if (block_follow(ls, 0)) {\n      /* 'goto' is the entire block? */\n      leaveblock(fs);\n      return escapelist;\n      /* and that is it */\n    } else\n      /* must skip over 'then' part if condition is false */\n      jf = luaK_jump(fs);\n  } else {\n    /* regular case (not goto/break) */\n    luaK_goiftrue(ls.fs, v);\n    /* skip over block if condition is false */\n\n    enterblock(fs, bl, false);\n    jf = v.f;\n  }\n\n  statlist(ls);\n  /* 'then' part */\n\n  leaveblock(fs);\n  if (ls.t.token === R.TK_ELSE || ls.t.token === R.TK_ELSEIF)\n    /* followed by 'else'/'elseif'? */\n    escapelist = luaK_concat(fs, escapelist, luaK_jump(fs));\n  /* must jump over it */\n\n  luaK_patchtohere(fs, jf);\n  return escapelist;\n};\n\nvar ifstat = function ifstat(ls, line) {\n  /* ifstat -> IF cond THEN block {ELSEIF cond THEN block} [ELSE block] END */\n  var fs = ls.fs;\n  var escapelist = NO_JUMP;\n  /* exit list for finished parts */\n\n  escapelist = test_then_block(ls, escapelist);\n  /* IF cond THEN block */\n\n  while (ls.t.token === R.TK_ELSEIF) {\n    escapelist = test_then_block(ls, escapelist);\n  }\n  /* ELSEIF cond THEN block */\n\n\n  if (testnext(ls, R.TK_ELSE)) block(ls);\n  /* 'else' part */\n\n  check_match(ls, R.TK_END, R.TK_IF, line);\n  luaK_patchtohere(fs, escapelist);\n  /* patch escape list to 'if' end */\n};\n\nvar localfunc = function localfunc(ls) {\n  var b = new expdesc();\n  var fs = ls.fs;\n  new_localvar(ls, str_checkname(ls));\n  /* new local variable */\n\n  adjustlocalvars(ls, 1);\n  /* enter its scope */\n\n  body(ls, b, 0, ls.linenumber);\n  /* function created in next register */\n\n  /* debug information will only see the variable after this point! */\n\n  getlocvar(fs, b.u.info).startpc = fs.pc;\n};\n\nvar localstat = function localstat(ls) {\n  /* stat -> LOCAL NAME {',' NAME} ['=' explist] */\n  var nvars = 0;\n  var nexps;\n  var e = new expdesc();\n\n  do {\n    new_localvar(ls, str_checkname(ls));\n    nvars++;\n  } while (testnext(ls, 44\n  /* (',').charCodeAt(0) */\n  ));\n\n  if (testnext(ls, 61\n  /* ('=').charCodeAt(0) */\n  )) nexps = explist(ls, e);else {\n    e.k = expkind.VVOID;\n    nexps = 0;\n  }\n  adjust_assign(ls, nvars, nexps, e);\n  adjustlocalvars(ls, nvars);\n};\n\nvar funcname = function funcname(ls, v) {\n  /* funcname -> NAME {fieldsel} [':' NAME] */\n  var ismethod = 0;\n  singlevar(ls, v);\n\n  while (ls.t.token === 46\n  /* ('.').charCodeAt(0) */\n  ) {\n    fieldsel(ls, v);\n  }\n\n  if (ls.t.token === 58\n  /* (':').charCodeAt(0) */\n  ) {\n      ismethod = 1;\n      fieldsel(ls, v);\n    }\n\n  return ismethod;\n};\n\nvar funcstat = function funcstat(ls, line) {\n  /* funcstat -> FUNCTION funcname body */\n  var v = new expdesc();\n  var b = new expdesc();\n  llex.luaX_next(ls);\n  /* skip FUNCTION */\n\n  var ismethod = funcname(ls, v);\n  body(ls, b, ismethod, line);\n  luaK_storevar(ls.fs, v, b);\n  luaK_fixline(ls.fs, line);\n  /* definition \"happens\" in the first line */\n};\n\nvar exprstat = function exprstat(ls) {\n  /* stat -> func | assignment */\n  var fs = ls.fs;\n  var v = new LHS_assign();\n  suffixedexp(ls, v.v);\n\n  if (ls.t.token === 61\n  /* ('=').charCodeAt(0) */\n  || ls.t.token === 44\n  /* (',').charCodeAt(0) */\n  ) {\n      /* stat . assignment ? */\n      v.prev = null;\n      assignment(ls, v, 1);\n    } else {\n    /* stat -> func */\n    check_condition(ls, v.v.k === expkind.VCALL, to_luastring(\"syntax error\", true));\n    SETARG_C(getinstruction(fs, v.v), 1);\n    /* call statement uses no results */\n  }\n};\n\nvar retstat = function retstat(ls) {\n  /* stat -> RETURN [explist] [';'] */\n  var fs = ls.fs;\n  var e = new expdesc();\n  var first, nret;\n  /* registers with returned values */\n\n  if (block_follow(ls, 1) || ls.t.token === 59\n  /* (';').charCodeAt(0) */\n  ) first = nret = 0;\n    /* return no values */\n  else {\n      nret = explist(ls, e);\n      /* optional return values */\n\n      if (hasmultret(e.k)) {\n        luaK_setmultret(fs, e);\n\n        if (e.k === expkind.VCALL && nret === 1) {\n          /* tail call? */\n          SET_OPCODE(getinstruction(fs, e), OP_TAILCALL);\n          lua_assert(getinstruction(fs, e).A === fs.nactvar);\n        }\n\n        first = fs.nactvar;\n        nret = LUA_MULTRET;\n        /* return all values */\n      } else {\n        if (nret === 1)\n          /* only one single value? */\n          first = luaK_exp2anyreg(fs, e);else {\n          luaK_exp2nextreg(fs, e);\n          /* values must go to the stack */\n\n          first = fs.nactvar;\n          /* return all active values */\n\n          lua_assert(nret === fs.freereg - first);\n        }\n      }\n    }\n  luaK_ret(fs, first, nret);\n  testnext(ls, 59\n  /* (';').charCodeAt(0) */\n  );\n  /* skip optional semicolon */\n};\n\nvar statement = function statement(ls) {\n  var line = ls.linenumber;\n  /* may be needed for error messages */\n\n  enterlevel(ls);\n\n  switch (ls.t.token) {\n    case 59\n    /* (';').charCodeAt(0) */\n    :\n      {\n        /* stat -> ';' (empty statement) */\n        llex.luaX_next(ls);\n        /* skip ';' */\n\n        break;\n      }\n\n    case R.TK_IF:\n      {\n        /* stat -> ifstat */\n        ifstat(ls, line);\n        break;\n      }\n\n    case R.TK_WHILE:\n      {\n        /* stat -> whilestat */\n        whilestat(ls, line);\n        break;\n      }\n\n    case R.TK_DO:\n      {\n        /* stat -> DO block END */\n        llex.luaX_next(ls);\n        /* skip DO */\n\n        block(ls);\n        check_match(ls, R.TK_END, R.TK_DO, line);\n        break;\n      }\n\n    case R.TK_FOR:\n      {\n        /* stat -> forstat */\n        forstat(ls, line);\n        break;\n      }\n\n    case R.TK_REPEAT:\n      {\n        /* stat -> repeatstat */\n        repeatstat(ls, line);\n        break;\n      }\n\n    case R.TK_FUNCTION:\n      {\n        /* stat -> funcstat */\n        funcstat(ls, line);\n        break;\n      }\n\n    case R.TK_LOCAL:\n      {\n        /* stat -> localstat */\n        llex.luaX_next(ls);\n        /* skip LOCAL */\n\n        if (testnext(ls, R.TK_FUNCTION))\n          /* local function? */\n          localfunc(ls);else localstat(ls);\n        break;\n      }\n\n    case R.TK_DBCOLON:\n      {\n        /* stat -> label */\n        llex.luaX_next(ls);\n        /* skip double colon */\n\n        labelstat(ls, str_checkname(ls), line);\n        break;\n      }\n\n    case R.TK_RETURN:\n      {\n        /* skip double colon */\n        llex.luaX_next(ls);\n        /* skip RETURN */\n\n        retstat(ls);\n        break;\n      }\n\n    case R.TK_BREAK:\n    /* stat -> breakstat */\n\n    case R.TK_GOTO:\n      {\n        /* stat -> 'goto' NAME */\n        gotostat(ls, luaK_jump(ls.fs));\n        break;\n      }\n\n    default:\n      {\n        /* stat -> func | assignment */\n        exprstat(ls);\n        break;\n      }\n  }\n\n  lua_assert(ls.fs.f.maxstacksize >= ls.fs.freereg && ls.fs.freereg >= ls.fs.nactvar);\n  ls.fs.freereg = ls.fs.nactvar;\n  /* free registers */\n\n  leavelevel(ls);\n};\n/*\n** compiles the main function, which is a regular vararg function with an\n** upvalue named LUA_ENV\n*/\n\n\nvar mainfunc = function mainfunc(ls, fs) {\n  var bl = new BlockCnt();\n  var v = new expdesc();\n  open_func(ls, fs, bl);\n  fs.f.is_vararg = true;\n  /* main function is always declared vararg */\n\n  init_exp(v, expkind.VLOCAL, 0);\n  /* create and... */\n\n  newupvalue(fs, ls.envn, v);\n  /* ...set environment upvalue */\n\n  llex.luaX_next(ls);\n  /* read first token */\n\n  statlist(ls);\n  /* parse main body */\n\n  check(ls, R.TK_EOS);\n  close_func(ls);\n};\n\nvar luaY_parser = function luaY_parser(L, z, buff, dyd, name, firstchar) {\n  var lexstate = new llex.LexState();\n  var funcstate = new FuncState();\n  var cl = lfunc.luaF_newLclosure(L, 1);\n  /* create main closure */\n\n  ldo.luaD_inctop(L);\n  L.stack[L.top - 1].setclLvalue(cl);\n  lexstate.h = ltable.luaH_new(L);\n  /* create table for scanner */\n\n  ldo.luaD_inctop(L);\n  L.stack[L.top - 1].sethvalue(lexstate.h);\n  funcstate.f = cl.p = new Proto(L);\n  funcstate.f.source = luaS_new(L, name);\n  lexstate.buff = buff;\n  lexstate.dyd = dyd;\n  dyd.actvar.n = dyd.gt.n = dyd.label.n = 0;\n  llex.luaX_setinput(L, lexstate, z, funcstate.f.source, firstchar);\n  mainfunc(lexstate, funcstate);\n  lua_assert(!funcstate.prev && funcstate.nups === 1 && !lexstate.fs);\n  /* all scopes should be correctly finished */\n\n  lua_assert(dyd.actvar.n === 0 && dyd.gt.n === 0 && dyd.label.n === 0);\n  delete L.stack[--L.top];\n  /* remove scanner's table */\n\n  return cl;\n  /* closure is on the stack, too */\n};\n\nmodule.exports.Dyndata = Dyndata;\nmodule.exports.expkind = expkind;\nmodule.exports.expdesc = expdesc;\nmodule.exports.luaY_parser = luaY_parser;\nmodule.exports.vkisinreg = vkisinreg;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mZW5nYXJpLy4vbm9kZV9tb2R1bGVzL2Zlbmdhcmkvc3JjL2xwYXJzZXIuanM/YzJlNCJdLCJuYW1lcyI6WyJyZXF1aXJlIiwiTFVBX01VTFRSRVQiLCJ0b19sdWFzdHJpbmciLCJCaW5PcHIiLCJPUFJfQUREIiwiT1BSX0FORCIsIk9QUl9CQU5EIiwiT1BSX0JPUiIsIk9QUl9CWE9SIiwiT1BSX0NPTkNBVCIsIk9QUl9ESVYiLCJPUFJfRVEiLCJPUFJfR0UiLCJPUFJfR1QiLCJPUFJfSURJViIsIk9QUl9MRSIsIk9QUl9MVCIsIk9QUl9NT0QiLCJPUFJfTVVMIiwiT1BSX05FIiwiT1BSX05PQklOT1BSIiwiT1BSX09SIiwiT1BSX1BPVyIsIk9QUl9TSEwiLCJPUFJfU0hSIiwiT1BSX1NVQiIsIlVuT3ByIiwiT1BSX0JOT1QiLCJPUFJfTEVOIiwiT1BSX01JTlVTIiwiT1BSX05PVCIsIk9QUl9OT1VOT1BSIiwiTk9fSlVNUCIsImdldGluc3RydWN0aW9uIiwibHVhS19jaGVja3N0YWNrIiwibHVhS19jb2RlQUJDIiwibHVhS19jb2RlQUJ4IiwibHVhS19jb2RlQXNCeCIsImx1YUtfY29kZWsiLCJsdWFLX2NvbmNhdCIsImx1YUtfZGlzY2hhcmdldmFycyIsImx1YUtfZXhwMlJLIiwibHVhS19leHAyYW55cmVnIiwibHVhS19leHAyYW55cmVndXAiLCJsdWFLX2V4cDJuZXh0cmVnIiwibHVhS19leHAydmFsIiwibHVhS19maXhsaW5lIiwibHVhS19nZXRsYWJlbCIsImx1YUtfZ29pZmZhbHNlIiwibHVhS19nb2lmdHJ1ZSIsImx1YUtfaW5kZXhlZCIsImx1YUtfaW5maXgiLCJsdWFLX2ludEsiLCJsdWFLX2p1bXAiLCJsdWFLX2p1bXB0byIsImx1YUtfbmlsIiwibHVhS19wYXRjaGNsb3NlIiwibHVhS19wYXRjaGxpc3QiLCJsdWFLX3BhdGNodG9oZXJlIiwibHVhS19wb3NmaXgiLCJsdWFLX3ByZWZpeCIsImx1YUtfcmVzZXJ2ZXJlZ3MiLCJsdWFLX3JldCIsImx1YUtfc2VsZiIsImx1YUtfc2V0bGlzdCIsImx1YUtfc2V0bXVsdHJldCIsImx1YUtfc2V0b25lcmV0IiwibHVhS19zZXRyZXR1cm5zIiwibHVhS19zdG9yZXZhciIsImx1YUtfc3RyaW5nSyIsImxkbyIsImxmdW5jIiwibGxleCIsIkxVQUlfTUFYQ0NBTExTIiwiTUFYX0lOVCIsImx1YV9hc3NlcnQiLCJsb2JqZWN0IiwiT3BDb2Rlc0kiLCJPUF9DQUxMIiwiT1BfQ0xPU1VSRSIsIk9QX0ZPUkxPT1AiLCJPUF9GT1JQUkVQIiwiT1BfR0VUVVBWQUwiLCJPUF9NT1ZFIiwiT1BfTkVXVEFCTEUiLCJPUF9TRVRUQUJMRSIsIk9QX1RBSUxDQUxMIiwiT1BfVEZPUkNBTEwiLCJPUF9URk9STE9PUCIsIk9QX1ZBUkFSRyIsIkxGSUVMRFNfUEVSX0ZMVVNIIiwiU0VUQVJHX0IiLCJTRVRBUkdfQyIsIlNFVF9PUENPREUiLCJsdWFTX2VxbG5nc3RyIiwibHVhU19uZXciLCJsdWFTX25ld2xpdGVyYWwiLCJsdGFibGUiLCJQcm90byIsIlIiLCJSRVNFUlZFRCIsIk1BWFZBUlMiLCJoYXNtdWx0cmV0IiwiayIsImV4cGtpbmQiLCJWQ0FMTCIsIlZWQVJBUkciLCJlcXN0ciIsImEiLCJiIiwiQmxvY2tDbnQiLCJwcmV2aW91cyIsImZpcnN0bGFiZWwiLCJOYU4iLCJmaXJzdGdvdG8iLCJuYWN0dmFyIiwidXB2YWwiLCJpc2xvb3AiLCJWVk9JRCIsIlZOSUwiLCJWVFJVRSIsIlZGQUxTRSIsIlZLIiwiVktGTFQiLCJWS0lOVCIsIlZOT05SRUxPQyIsIlZMT0NBTCIsIlZVUFZBTCIsIlZJTkRFWEVEIiwiVkpNUCIsIlZSRUxPQ0FCTEUiLCJ2a2lzdmFyIiwidmtpc2lucmVnIiwiZXhwZGVzYyIsInUiLCJpdmFsIiwibnZhbCIsImluZm8iLCJpbmQiLCJpZHgiLCJ0IiwidnQiLCJmIiwiZSIsIkZ1bmNTdGF0ZSIsInByZXYiLCJscyIsImJsIiwicGMiLCJsYXN0dGFyZ2V0IiwianBjIiwibmsiLCJucCIsImZpcnN0bG9jYWwiLCJubG9jdmFycyIsIm51cHMiLCJmcmVlcmVnIiwiVmFyZGVzYyIsIkxhYmVsZGVzYyIsIm5hbWUiLCJsaW5lIiwiTGFiZWxsaXN0IiwiYXJyIiwibiIsInNpemUiLCJEeW5kYXRhIiwiYWN0dmFyIiwiZ3QiLCJsYWJlbCIsInNlbWVycm9yIiwibXNnIiwidG9rZW4iLCJsdWFYX3N5bnRheGVycm9yIiwiZXJyb3JfZXhwZWN0ZWQiLCJsdWFPX3B1c2hmc3RyaW5nIiwiTCIsImx1YVhfdG9rZW4yc3RyIiwiZXJyb3JsaW1pdCIsImZzIiwibGltaXQiLCJ3aGF0IiwibGluZWRlZmluZWQiLCJ3aGVyZSIsImNoZWNrbGltaXQiLCJ2IiwibCIsInRlc3RuZXh0IiwiYyIsImx1YVhfbmV4dCIsImNoZWNrIiwiY2hlY2tuZXh0IiwiY2hlY2tfY29uZGl0aW9uIiwiY2hlY2tfbWF0Y2giLCJ3aG8iLCJsaW5lbnVtYmVyIiwic3RyX2NoZWNrbmFtZSIsIlRLX05BTUUiLCJ0cyIsInNlbWluZm8iLCJpbml0X2V4cCIsImkiLCJjb2Rlc3RyaW5nIiwicyIsImNoZWNrbmFtZSIsInJlZ2lzdGVybG9jYWx2YXIiLCJ2YXJuYW1lIiwibG9jdmFycyIsIkxvY1ZhciIsIm5ld19sb2NhbHZhciIsImR5ZCIsInJlZyIsIm5ld19sb2NhbHZhcmxpdGVyYWwiLCJsdWFYX25ld3N0cmluZyIsImdldGxvY3ZhciIsImFkanVzdGxvY2FsdmFycyIsIm52YXJzIiwic3RhcnRwYyIsInJlbW92ZXZhcnMiLCJ0b2xldmVsIiwiZW5kcGMiLCJzZWFyY2h1cHZhbHVlIiwidXAiLCJ1cHZhbHVlcyIsIm5ld3VwdmFsdWUiLCJNQVhVUFZBTCIsImluc3RhY2siLCJzZWFyY2h2YXIiLCJtYXJrdXB2YWwiLCJsZXZlbCIsInNpbmdsZXZhcmF1eCIsInZyIiwiYmFzZSIsInNpbmdsZXZhciIsImtleSIsImVudm4iLCJhZGp1c3RfYXNzaWduIiwibmV4cHMiLCJleHRyYSIsImVudGVybGV2ZWwiLCJuQ2NhbGxzIiwibGVhdmVsZXZlbCIsImNsb3NlZ290byIsImciLCJnbCIsInZuYW1lIiwiZ2V0c3RyIiwiZmluZGxhYmVsIiwibGIiLCJuZXdsYWJlbGVudHJ5IiwiZmluZGdvdG9zIiwibW92ZWdvdG9zb3V0IiwiZW50ZXJibG9jayIsImJyZWFrbGFiZWwiLCJ1bmRlZmdvdG8iLCJpc3Jlc2VydmVkIiwiYWRkcHJvdG90eXBlIiwiY2xwIiwicCIsImNvZGVjbG9zdXJlIiwib3Blbl9mdW5jIiwic291cmNlIiwibWF4c3RhY2tzaXplIiwibGVhdmVibG9jayIsImoiLCJjbG9zZV9mdW5jIiwiYmxvY2tfZm9sbG93Iiwid2l0aHVudGlsIiwiVEtfRUxTRSIsIlRLX0VMU0VJRiIsIlRLX0VORCIsIlRLX0VPUyIsIlRLX1VOVElMIiwic3RhdGxpc3QiLCJUS19SRVRVUk4iLCJzdGF0ZW1lbnQiLCJmaWVsZHNlbCIsInlpbmRleCIsImV4cHIiLCJDb25zQ29udHJvbCIsIm5oIiwibmEiLCJ0b3N0b3JlIiwicmVjZmllbGQiLCJjYyIsInZhbCIsInJra2V5IiwiY2xvc2VsaXN0ZmllbGQiLCJsYXN0bGlzdGZpZWxkIiwibGlzdGZpZWxkIiwiZmllbGQiLCJsdWFYX2xvb2thaGVhZCIsImNvbnN0cnVjdG9yIiwiY29kZSIsImx1YU9faW50MmZiIiwicGFybGlzdCIsIm5wYXJhbXMiLCJpc192YXJhcmciLCJUS19ET1RTIiwibnVtcGFyYW1zIiwiYm9keSIsImlzbWV0aG9kIiwibmV3X2ZzIiwibGFzdGxpbmVkZWZpbmVkIiwiVEtfRlVOQ1RJT04iLCJleHBsaXN0IiwiZnVuY2FyZ3MiLCJhcmdzIiwiVEtfU1RSSU5HIiwicHJpbWFyeWV4cCIsInN1ZmZpeGVkZXhwIiwic2ltcGxlZXhwIiwiVEtfRkxUIiwiciIsIlRLX0lOVCIsIlRLX05JTCIsIlRLX1RSVUUiLCJUS19GQUxTRSIsImdldHVub3ByIiwib3AiLCJUS19OT1QiLCJnZXRiaW5vcHIiLCJUS19JRElWIiwiVEtfU0hMIiwiVEtfU0hSIiwiVEtfQ09OQ0FUIiwiVEtfTkUiLCJUS19FUSIsIlRLX0xFIiwiVEtfR0UiLCJUS19BTkQiLCJUS19PUiIsInByaW9yaXR5IiwibGVmdCIsInJpZ2h0IiwiVU5BUllfUFJJT1JJVFkiLCJzdWJleHByIiwidW9wIiwidjIiLCJuZXh0b3AiLCJibG9jayIsIkxIU19hc3NpZ24iLCJjaGVja19jb25mbGljdCIsImxoIiwiY29uZmxpY3QiLCJhc3NpZ25tZW50IiwibnYiLCJjb25kIiwiZ290b3N0YXQiLCJUS19HT1RPIiwiY2hlY2tyZXBlYXRlZCIsImxsIiwic2tpcG5vb3BzdGF0IiwiVEtfREJDT0xPTiIsImxhYmVsc3RhdCIsIndoaWxlc3RhdCIsIndoaWxlaW5pdCIsImNvbmRleGl0IiwiVEtfRE8iLCJUS19XSElMRSIsInJlcGVhdHN0YXQiLCJyZXBlYXRfaW5pdCIsImJsMSIsImJsMiIsIlRLX1JFUEVBVCIsImV4cDEiLCJmb3Jib2R5IiwiaXNudW0iLCJlbmRmb3IiLCJwcmVwIiwiZm9ybnVtIiwiZm9ybGlzdCIsImluZGV4bmFtZSIsIlRLX0lOIiwiZm9yc3RhdCIsIlRLX0ZPUiIsInRlc3RfdGhlbl9ibG9jayIsImVzY2FwZWxpc3QiLCJqZiIsIlRLX1RIRU4iLCJUS19CUkVBSyIsImlmc3RhdCIsIlRLX0lGIiwibG9jYWxmdW5jIiwibG9jYWxzdGF0IiwiZnVuY25hbWUiLCJmdW5jc3RhdCIsImV4cHJzdGF0IiwicmV0c3RhdCIsImZpcnN0IiwibnJldCIsIkEiLCJUS19MT0NBTCIsIm1haW5mdW5jIiwibHVhWV9wYXJzZXIiLCJ6IiwiYnVmZiIsImZpcnN0Y2hhciIsImxleHN0YXRlIiwiTGV4U3RhdGUiLCJmdW5jc3RhdGUiLCJjbCIsImx1YUZfbmV3TGNsb3N1cmUiLCJsdWFEX2luY3RvcCIsInN0YWNrIiwidG9wIiwic2V0Y2xMdmFsdWUiLCJoIiwibHVhSF9uZXciLCJzZXRodmFsdWUiLCJsdWFYX3NldGlucHV0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQWE7Ozs7Ozs7O2VBS1RBLG1C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QUF0QyxJQUEyQyxDQUFDa1AsUUFBUSxDQUFDM04sRUFBdEQsQ0FBVjtBQUNBOztBQUNBdkcsWUFBVSxDQUFDc0ksR0FBRyxDQUFDM0MsTUFBSixDQUFXSCxDQUFYLEtBQWlCLENBQWpCLElBQXNCOEMsR0FBRyxDQUFDMUMsRUFBSixDQUFPSixDQUFQLEtBQWEsQ0FBbkMsSUFBd0M4QyxHQUFHLENBQUN6QyxLQUFKLENBQVVMLENBQVYsS0FBZ0IsQ0FBekQsQ0FBVjtBQUNBLFNBQU9ZLENBQUMsQ0FBQ29PLEtBQUYsQ0FBUSxFQUFFcE8sQ0FBQyxDQUFDcU8sR0FBWixDQUFQO0FBQTBCOztBQUMxQixTQUFPSixFQUFQO0FBQVk7QUFDZixDQXJCRDs7QUF3QkFVLE1BQU0sQ0FBQ0MsT0FBUCxDQUFldFAsT0FBZixHQUE2QkEsT0FBN0I7QUFDQXFQLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlblQsT0FBZixHQUE2QkEsT0FBN0I7QUFDQWtULE1BQU0sQ0FBQ0MsT0FBUCxDQUFldFIsT0FBZixHQUE2QkEsT0FBN0I7QUFDQXFSLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlbEIsV0FBZixHQUE2QkEsV0FBN0I7QUFDQWlCLE1BQU0sQ0FBQ0MsT0FBUCxDQUFldlIsU0FBZixHQUE2QkEsU0FBN0IiLCJmaWxlIjoiMjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3Qge1xuICAgIExVQV9NVUxUUkVULFxuICAgIHRvX2x1YXN0cmluZ1xufSA9IHJlcXVpcmUoJy4vZGVmcy5qcycpO1xuY29uc3Qge1xuICAgIEJpbk9wcjoge1xuICAgICAgICBPUFJfQURELFxuICAgICAgICBPUFJfQU5ELFxuICAgICAgICBPUFJfQkFORCxcbiAgICAgICAgT1BSX0JPUixcbiAgICAgICAgT1BSX0JYT1IsXG4gICAgICAgIE9QUl9DT05DQVQsXG4gICAgICAgIE9QUl9ESVYsXG4gICAgICAgIE9QUl9FUSxcbiAgICAgICAgT1BSX0dFLFxuICAgICAgICBPUFJfR1QsXG4gICAgICAgIE9QUl9JRElWLFxuICAgICAgICBPUFJfTEUsXG4gICAgICAgIE9QUl9MVCxcbiAgICAgICAgT1BSX01PRCxcbiAgICAgICAgT1BSX01VTCxcbiAgICAgICAgT1BSX05FLFxuICAgICAgICBPUFJfTk9CSU5PUFIsXG4gICAgICAgIE9QUl9PUixcbiAgICAgICAgT1BSX1BPVyxcbiAgICAgICAgT1BSX1NITCxcbiAgICAgICAgT1BSX1NIUixcbiAgICAgICAgT1BSX1NVQlxuICAgIH0sXG4gICAgVW5PcHI6IHtcbiAgICAgICAgT1BSX0JOT1QsXG4gICAgICAgIE9QUl9MRU4sXG4gICAgICAgIE9QUl9NSU5VUyxcbiAgICAgICAgT1BSX05PVCxcbiAgICAgICAgT1BSX05PVU5PUFJcbiAgICB9LFxuICAgIE5PX0pVTVAsXG4gICAgZ2V0aW5zdHJ1Y3Rpb24sXG4gICAgbHVhS19jaGVja3N0YWNrLFxuICAgIGx1YUtfY29kZUFCQyxcbiAgICBsdWFLX2NvZGVBQngsXG4gICAgbHVhS19jb2RlQXNCeCxcbiAgICBsdWFLX2NvZGVrLFxuICAgIGx1YUtfY29uY2F0LFxuICAgIGx1YUtfZGlzY2hhcmdldmFycyxcbiAgICBsdWFLX2V4cDJSSyxcbiAgICBsdWFLX2V4cDJhbnlyZWcsXG4gICAgbHVhS19leHAyYW55cmVndXAsXG4gICAgbHVhS19leHAybmV4dHJlZyxcbiAgICBsdWFLX2V4cDJ2YWwsXG4gICAgbHVhS19maXhsaW5lLFxuICAgIGx1YUtfZ2V0bGFiZWwsXG4gICAgbHVhS19nb2lmZmFsc2UsXG4gICAgbHVhS19nb2lmdHJ1ZSxcbiAgICBsdWFLX2luZGV4ZWQsXG4gICAgbHVhS19pbmZpeCxcbiAgICBsdWFLX2ludEssXG4gICAgbHVhS19qdW1wLFxuICAgIGx1YUtfanVtcHRvLFxuICAgIGx1YUtfbmlsLFxuICAgIGx1YUtfcGF0Y2hjbG9zZSxcbiAgICBsdWFLX3BhdGNobGlzdCxcbiAgICBsdWFLX3BhdGNodG9oZXJlLFxuICAgIGx1YUtfcG9zZml4LFxuICAgIGx1YUtfcHJlZml4LFxuICAgIGx1YUtfcmVzZXJ2ZXJlZ3MsXG4gICAgbHVhS19yZXQsXG4gICAgbHVhS19zZWxmLFxuICAgIGx1YUtfc2V0bGlzdCxcbiAgICBsdWFLX3NldG11bHRyZXQsXG4gICAgbHVhS19zZXRvbmVyZXQsXG4gICAgbHVhS19zZXRyZXR1cm5zLFxuICAgIGx1YUtfc3RvcmV2YXIsXG4gICAgbHVhS19zdHJpbmdLXG59ID0gcmVxdWlyZSgnLi9sY29kZS5qcycpO1xuY29uc3QgbGRvICAgICAgPSByZXF1aXJlKCcuL2xkby5qcycpO1xuY29uc3QgbGZ1bmMgICAgPSByZXF1aXJlKCcuL2xmdW5jLmpzJyk7XG5jb25zdCBsbGV4ICAgICA9IHJlcXVpcmUoJy4vbGxleC5qcycpO1xuY29uc3Qge1xuICAgIExVQUlfTUFYQ0NBTExTLFxuICAgIE1BWF9JTlQsXG4gICAgbHVhX2Fzc2VydFxufSAgPSByZXF1aXJlKCcuL2xsaW1pdHMuanMnKTtcbmNvbnN0IGxvYmplY3QgID0gcmVxdWlyZSgnLi9sb2JqZWN0LmpzJyk7XG5jb25zdCB7XG4gICAgT3BDb2Rlc0k6IHtcbiAgICAgICAgT1BfQ0FMTCxcbiAgICAgICAgT1BfQ0xPU1VSRSxcbiAgICAgICAgT1BfRk9STE9PUCxcbiAgICAgICAgT1BfRk9SUFJFUCxcbiAgICAgICAgT1BfR0VUVVBWQUwsXG4gICAgICAgIE9QX01PVkUsXG4gICAgICAgIE9QX05FV1RBQkxFLFxuICAgICAgICBPUF9TRVRUQUJMRSxcbiAgICAgICAgT1BfVEFJTENBTEwsXG4gICAgICAgIE9QX1RGT1JDQUxMLFxuICAgICAgICBPUF9URk9STE9PUCxcbiAgICAgICAgT1BfVkFSQVJHXG4gICAgfSxcbiAgICBMRklFTERTX1BFUl9GTFVTSCxcbiAgICBTRVRBUkdfQixcbiAgICBTRVRBUkdfQyxcbiAgICBTRVRfT1BDT0RFXG59ID0gcmVxdWlyZSgnLi9sb3Bjb2Rlcy5qcycpO1xuY29uc3Qge1xuICAgIGx1YVNfZXFsbmdzdHIsXG4gICAgbHVhU19uZXcsXG4gICAgbHVhU19uZXdsaXRlcmFsXG59ID0gcmVxdWlyZSgnLi9sc3RyaW5nLmpzJyk7XG5jb25zdCBsdGFibGUgICA9IHJlcXVpcmUoJy4vbHRhYmxlLmpzJyk7XG5jb25zdCBQcm90byAgICA9IGxmdW5jLlByb3RvO1xuY29uc3QgUiAgICAgICAgPSBsbGV4LlJFU0VSVkVEO1xuXG5jb25zdCBNQVhWQVJTID0gMjAwO1xuXG5jb25zdCBoYXNtdWx0cmV0ID0gZnVuY3Rpb24oaykge1xuICAgIHJldHVybiBrID09PSBleHBraW5kLlZDQUxMIHx8IGsgPT09IGV4cGtpbmQuVlZBUkFSRztcbn07XG5cbmNvbnN0IGVxc3RyID0gZnVuY3Rpb24oYSwgYikge1xuICAgIC8qIFRPRE86IHVzZSBwbGFpbiBlcXVhbGl0eSBhcyBzdHJpbmdzIGFyZSBjYWNoZWQgKi9cbiAgICByZXR1cm4gbHVhU19lcWxuZ3N0cihhLCBiKTtcbn07XG5cbmNsYXNzIEJsb2NrQ250IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5wcmV2aW91cyA9IG51bGw7ICAvKiBjaGFpbiAqL1xuICAgICAgICB0aGlzLmZpcnN0bGFiZWwgPSBOYU47IC8qIGluZGV4IG9mIGZpcnN0IGxhYmVsIGluIHRoaXMgYmxvY2sgKi9cbiAgICAgICAgdGhpcy5maXJzdGdvdG8gPSBOYU47ICAvKiBpbmRleCBvZiBmaXJzdCBwZW5kaW5nIGdvdG8gaW4gdGhpcyBibG9jayAqL1xuICAgICAgICB0aGlzLm5hY3R2YXIgPSBOYU47ICAgIC8qICMgYWN0aXZlIGxvY2FscyBvdXRzaWRlIHRoZSBibG9jayAqL1xuICAgICAgICB0aGlzLnVwdmFsID0gTmFOOyAgICAgIC8qIHRydWUgaWYgc29tZSB2YXJpYWJsZSBpbiB0aGUgYmxvY2sgaXMgYW4gdXB2YWx1ZSAqL1xuICAgICAgICB0aGlzLmlzbG9vcCA9IE5hTjsgICAgIC8qIHRydWUgaWYgJ2Jsb2NrJyBpcyBhIGxvb3AgKi9cbiAgICB9XG59XG5cbmNvbnN0IGV4cGtpbmQgPSB7XG4gICAgVlZPSUQ6IDAsICAgICAgICAvKiB3aGVuICdleHBkZXNjJyBkZXNjcmliZXMgdGhlIGxhc3QgZXhwcmVzc2lvbiBhIGxpc3QsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzIGtpbmQgbWVhbnMgYW4gZW1wdHkgbGlzdCAoc28sIG5vIGV4cHJlc3Npb24pICovXG4gICAgVk5JTDogMSwgICAgICAgICAvKiBjb25zdGFudCBuaWwgKi9cbiAgICBWVFJVRTogMiwgICAgICAgIC8qIGNvbnN0YW50IHRydWUgKi9cbiAgICBWRkFMU0U6IDMsICAgICAgIC8qIGNvbnN0YW50IGZhbHNlICovXG4gICAgVks6IDQsICAgICAgICAgICAvKiBjb25zdGFudCBpbiAnayc7IGluZm8gPSBpbmRleCBvZiBjb25zdGFudCBpbiAnaycgKi9cbiAgICBWS0ZMVDogNSwgICAgICAgIC8qIGZsb2F0aW5nIGNvbnN0YW50OyBudmFsID0gbnVtZXJpY2FsIGZsb2F0IHZhbHVlICovXG4gICAgVktJTlQ6IDYsICAgICAgICAvKiBpbnRlZ2VyIGNvbnN0YW50OyBudmFsID0gbnVtZXJpY2FsIGludGVnZXIgdmFsdWUgKi9cbiAgICBWTk9OUkVMT0M6IDcsICAgIC8qIGV4cHJlc3Npb24gaGFzIGl0cyB2YWx1ZSBpbiBhIGZpeGVkIHJlZ2lzdGVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5mbyA9IHJlc3VsdCByZWdpc3RlciAqL1xuICAgIFZMT0NBTDogOCwgICAgICAgLyogbG9jYWwgdmFyaWFibGU7IGluZm8gPSBsb2NhbCByZWdpc3RlciAqL1xuICAgIFZVUFZBTDogOSwgICAgICAgLyogdXB2YWx1ZSB2YXJpYWJsZTsgaW5mbyA9IGluZGV4IG9mIHVwdmFsdWUgaW4gJ3VwdmFsdWVzJyAqL1xuICAgIFZJTkRFWEVEOiAxMCwgICAgLyogaW5kZXhlZCB2YXJpYWJsZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZC52dCA9IHdoZXRoZXIgJ3QnIGlzIHJlZ2lzdGVyIG9yIHVwdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbmQudCA9IHRhYmxlIHJlZ2lzdGVyIG9yIHVwdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbmQuaWR4ID0ga2V5J3MgUi9LIGluZGV4ICovXG4gICAgVkpNUDogMTEsICAgICAgICAvKiBleHByZXNzaW9uIGlzIGEgdGVzdC9jb21wYXJpc29uO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5mbyA9IHBjIG9mIGNvcnJlc3BvbmRpbmcganVtcCBpbnN0cnVjdGlvbiAqL1xuICAgIFZSRUxPQ0FCTEU6IDEyLCAgLyogZXhwcmVzc2lvbiBjYW4gcHV0IHJlc3VsdCBpbiBhbnkgcmVnaXN0ZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbmZvID0gaW5zdHJ1Y3Rpb24gcGMgKi9cbiAgICBWQ0FMTDogMTMsICAgICAgIC8qIGV4cHJlc3Npb24gaXMgYSBmdW5jdGlvbiBjYWxsOyBpbmZvID0gaW5zdHJ1Y3Rpb24gcGMgKi9cbiAgICBWVkFSQVJHOiAxNCAgICAgIC8qIHZhcmFyZyBleHByZXNzaW9uOyBpbmZvID0gaW5zdHJ1Y3Rpb24gcGMgKi9cbn07XG5cbmNvbnN0IHZraXN2YXIgPSBmdW5jdGlvbihrKSB7XG4gICAgcmV0dXJuIGV4cGtpbmQuVkxPQ0FMIDw9IGsgJiYgayA8PSBleHBraW5kLlZJTkRFWEVEO1xufTtcblxuY29uc3Qgdmtpc2lucmVnID0gZnVuY3Rpb24oaykge1xuICAgIHJldHVybiBrID09PSBleHBraW5kLlZOT05SRUxPQyB8fCBrID09PSBleHBraW5kLlZMT0NBTDtcbn07XG5cbmNsYXNzIGV4cGRlc2Mge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmsgPSBOYU47XG4gICAgICAgIHRoaXMudSA9IHtcbiAgICAgICAgICAgIGl2YWw6IE5hTiwgICAgLyogZm9yIFZLSU5UICovXG4gICAgICAgICAgICBudmFsOiBOYU4sICAgIC8qIGZvciBWS0ZMVCAqL1xuICAgICAgICAgICAgaW5mbzogTmFOLCAgICAvKiBmb3IgZ2VuZXJpYyB1c2UgKi9cbiAgICAgICAgICAgIGluZDogeyAgICAgICAgLyogZm9yIGluZGV4ZWQgdmFyaWFibGVzIChWSU5ERVhFRCkgKi9cbiAgICAgICAgICAgICAgICBpZHg6IE5hTiwgLyogaW5kZXggKFIvSykgKi9cbiAgICAgICAgICAgICAgICB0OiBOYU4sICAgLyogdGFibGUgKHJlZ2lzdGVyIG9yIHVwdmFsdWUpICovXG4gICAgICAgICAgICAgICAgdnQ6IE5hTiAgIC8qIHdoZXRoZXIgJ3QnIGlzIHJlZ2lzdGVyIChWTE9DQUwpIG9yIHVwdmFsdWUgKFZVUFZBTCkgKi9cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy50ID0gTmFOOyAgICAgLyogcGF0Y2ggbGlzdCBvZiAnZXhpdCB3aGVuIHRydWUnICovXG4gICAgICAgIHRoaXMuZiA9IE5hTjsgICAgIC8qIHBhdGNoIGxpc3Qgb2YgJ2V4aXQgd2hlbiBmYWxzZScgKi9cbiAgICB9XG5cbiAgICB0byhlKSB7IC8vIENvcHkgZSBjb250ZW50IHRvIHRoaXMsIGNmLiBsdWFLX3Bvc2ZpeFxuICAgICAgICB0aGlzLmsgPSBlLms7XG4gICAgICAgIHRoaXMudSA9IGUudTtcbiAgICAgICAgdGhpcy50ID0gZS50O1xuICAgICAgICB0aGlzLmYgPSBlLmY7XG4gICAgfVxufVxuXG5jbGFzcyBGdW5jU3RhdGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmYgPSBudWxsOyAgICAgICAgIC8qIGN1cnJlbnQgZnVuY3Rpb24gaGVhZGVyICovXG4gICAgICAgIHRoaXMucHJldiA9IG51bGw7ICAgICAgLyogZW5jbG9zaW5nIGZ1bmN0aW9uICovXG4gICAgICAgIHRoaXMubHMgPSBudWxsOyAgICAgICAgLyogbGV4aWNhbCBzdGF0ZSAqL1xuICAgICAgICB0aGlzLmJsID0gbnVsbDsgICAgICAgIC8qIGNoYWluIG9mIGN1cnJlbnQgYmxvY2tzICovXG4gICAgICAgIHRoaXMucGMgPSBOYU47ICAgICAgICAgLyogbmV4dCBwb3NpdGlvbiB0byBjb2RlIChlcXVpdmFsZW50IHRvICduY29kZScpICovXG4gICAgICAgIHRoaXMubGFzdHRhcmdldCA9IE5hTjsgLyogJ2xhYmVsJyBvZiBsYXN0ICdqdW1wIGxhYmVsJyAqL1xuICAgICAgICB0aGlzLmpwYyA9IE5hTjsgICAgICAgIC8qIGxpc3Qgb2YgcGVuZGluZyBqdW1wcyB0byAncGMnICovXG4gICAgICAgIHRoaXMubmsgPSBOYU47ICAgICAgICAgLyogbnVtYmVyIG9mIGVsZW1lbnRzIGluICdrJyAqL1xuICAgICAgICB0aGlzLm5wID0gTmFOOyAgICAgICAgIC8qIG51bWJlciBvZiBlbGVtZW50cyBpbiAncCcgKi9cbiAgICAgICAgdGhpcy5maXJzdGxvY2FsID0gTmFOOyAvKiBpbmRleCBvZiBmaXJzdCBsb2NhbCB2YXIgKGluIER5bmRhdGEgYXJyYXkpICovXG4gICAgICAgIHRoaXMubmxvY3ZhcnMgPSBOYU47ICAgLyogbnVtYmVyIG9mIGVsZW1lbnRzIGluICdmLT5sb2N2YXJzJyAqL1xuICAgICAgICB0aGlzLm5hY3R2YXIgPSBOYU47ICAgIC8qIG51bWJlciBvZiBhY3RpdmUgbG9jYWwgdmFyaWFibGVzICovXG4gICAgICAgIHRoaXMubnVwcyA9IE5hTjsgICAgICAgLyogbnVtYmVyIG9mIHVwdmFsdWVzICovXG4gICAgICAgIHRoaXMuZnJlZXJlZyA9IE5hTjsgICAgLyogZmlyc3QgZnJlZSByZWdpc3RlciAqL1xuICAgIH1cbn1cblxuLyogZGVzY3JpcHRpb24gb2YgYWN0aXZlIGxvY2FsIHZhcmlhYmxlICovXG5jbGFzcyBWYXJkZXNjIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5pZHggPSBOYU47ICAvKiB2YXJpYWJsZSBpbmRleCBpbiBzdGFjayAqL1xuICAgIH1cbn1cblxuXG4vKiBkZXNjcmlwdGlvbiBvZiBwZW5kaW5nIGdvdG8gc3RhdGVtZW50cyBhbmQgbGFiZWwgc3RhdGVtZW50cyAqL1xuY2xhc3MgTGFiZWxkZXNjIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5uYW1lID0gbnVsbDsgIC8qIGxhYmVsIGlkZW50aWZpZXIgKi9cbiAgICAgICAgdGhpcy5wYyA9IE5hTjsgIC8qIHBvc2l0aW9uIGluIGNvZGUgKi9cbiAgICAgICAgdGhpcy5saW5lID0gTmFOOyAgLyogbGluZSB3aGVyZSBpdCBhcHBlYXJlZCAqL1xuICAgICAgICB0aGlzLm5hY3R2YXIgPSBOYU47ICAvKiBsb2NhbCBsZXZlbCB3aGVyZSBpdCBhcHBlYXJzIGluIGN1cnJlbnQgYmxvY2sgKi9cbiAgICB9XG59XG5cblxuLyogbGlzdCBvZiBsYWJlbHMgb3IgZ290b3MgKi9cbmNsYXNzIExhYmVsbGlzdCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuYXJyID0gW107IC8qIGFycmF5ICovXG4gICAgICAgIHRoaXMubiA9IE5hTjsgIC8qIG51bWJlciBvZiBlbnRyaWVzIGluIHVzZSAqL1xuICAgICAgICB0aGlzLnNpemUgPSBOYU47ICAvKiBhcnJheSBzaXplICovXG4gICAgfVxufVxuXG4vKiBkeW5hbWljIHN0cnVjdHVyZXMgdXNlZCBieSB0aGUgcGFyc2VyICovXG5jbGFzcyBEeW5kYXRhIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5hY3R2YXIgPSB7ICAvKiBsaXN0IG9mIGFjdGl2ZSBsb2NhbCB2YXJpYWJsZXMgKi9cbiAgICAgICAgICAgIGFycjogW10sXG4gICAgICAgICAgICBuOiBOYU4sXG4gICAgICAgICAgICBzaXplOiBOYU5cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5ndCA9IG5ldyBMYWJlbGxpc3QoKTtcbiAgICAgICAgdGhpcy5sYWJlbCA9IG5ldyBMYWJlbGxpc3QoKTtcbiAgICB9XG59XG5cbmNvbnN0IHNlbWVycm9yID0gZnVuY3Rpb24obHMsIG1zZykge1xuICAgIGxzLnQudG9rZW4gPSAwOyAgLyogcmVtb3ZlIFwibmVhciA8dG9rZW4+XCIgZnJvbSBmaW5hbCBtZXNzYWdlICovXG4gICAgbGxleC5sdWFYX3N5bnRheGVycm9yKGxzLCBtc2cpO1xufTtcblxuY29uc3QgZXJyb3JfZXhwZWN0ZWQgPSBmdW5jdGlvbihscywgdG9rZW4pIHtcbiAgICBsbGV4Lmx1YVhfc3ludGF4ZXJyb3IobHMsIGxvYmplY3QubHVhT19wdXNoZnN0cmluZyhscy5MLCB0b19sdWFzdHJpbmcoXCIlcyBleHBlY3RlZFwiLCB0cnVlKSwgbGxleC5sdWFYX3Rva2VuMnN0cihscywgdG9rZW4pKSk7XG59O1xuXG5jb25zdCBlcnJvcmxpbWl0ID0gZnVuY3Rpb24oZnMsIGxpbWl0LCB3aGF0KSB7XG4gICAgbGV0IEwgPSBmcy5scy5MO1xuICAgIGxldCBsaW5lID0gZnMuZi5saW5lZGVmaW5lZDtcbiAgICBsZXQgd2hlcmUgPSAobGluZSA9PT0gMClcbiAgICAgICAgPyB0b19sdWFzdHJpbmcoXCJtYWluIGZ1bmN0aW9uXCIsIHRydWUpXG4gICAgICAgIDogbG9iamVjdC5sdWFPX3B1c2hmc3RyaW5nKEwsIHRvX2x1YXN0cmluZyhcImZ1bmN0aW9uIGF0IGxpbmUgJWRcIiwgdHJ1ZSksIGxpbmUpO1xuICAgIGxldCBtc2cgPSBsb2JqZWN0Lmx1YU9fcHVzaGZzdHJpbmcoTCwgdG9fbHVhc3RyaW5nKFwidG9vIG1hbnkgJXMgKGxpbWl0IGlzICVkKSBpbiAlc1wiLCB0cnVlKSxcbiAgICAgICAgd2hhdCwgbGltaXQsIHdoZXJlKTtcbiAgICBsbGV4Lmx1YVhfc3ludGF4ZXJyb3IoZnMubHMsIG1zZyk7XG59O1xuXG5jb25zdCBjaGVja2xpbWl0ID0gZnVuY3Rpb24oZnMsIHYsIGwsIHdoYXQpIHtcbiAgICBpZiAodiA+IGwpIGVycm9ybGltaXQoZnMsIGwsIHdoYXQpO1xufTtcblxuY29uc3QgdGVzdG5leHQgPSBmdW5jdGlvbihscywgYykge1xuICAgIGlmIChscy50LnRva2VuID09PSBjKSB7XG4gICAgICAgIGxsZXgubHVhWF9uZXh0KGxzKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xufTtcblxuY29uc3QgY2hlY2sgPSBmdW5jdGlvbihscywgYykge1xuICAgIGlmIChscy50LnRva2VuICE9PSBjKVxuICAgICAgICBlcnJvcl9leHBlY3RlZChscywgYyk7XG59O1xuXG5jb25zdCBjaGVja25leHQgPSBmdW5jdGlvbihscywgYykge1xuICAgIGNoZWNrKGxzLCBjKTtcbiAgICBsbGV4Lmx1YVhfbmV4dChscyk7XG59O1xuXG5jb25zdCBjaGVja19jb25kaXRpb24gPSBmdW5jdGlvbihscywgYywgbXNnKSB7XG4gICAgaWYgKCFjKVxuICAgICAgICBsbGV4Lmx1YVhfc3ludGF4ZXJyb3IobHMsIG1zZyk7XG59O1xuXG5jb25zdCBjaGVja19tYXRjaCA9IGZ1bmN0aW9uKGxzLCB3aGF0LCB3aG8sIHdoZXJlKSB7XG4gICAgaWYgKCF0ZXN0bmV4dChscywgd2hhdCkpIHtcbiAgICAgICAgaWYgKHdoZXJlID09PSBscy5saW5lbnVtYmVyKVxuICAgICAgICAgICAgZXJyb3JfZXhwZWN0ZWQobHMsIHdoYXQpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBsbGV4Lmx1YVhfc3ludGF4ZXJyb3IobHMsIGxvYmplY3QubHVhT19wdXNoZnN0cmluZyhscy5MLFxuICAgICAgICAgICAgICAgIHRvX2x1YXN0cmluZyhcIiVzIGV4cGVjdGVkICh0byBjbG9zZSAlcyBhdCBsaW5lICVkKVwiKSxcbiAgICAgICAgICAgICAgICBsbGV4Lmx1YVhfdG9rZW4yc3RyKGxzLCB3aGF0KSwgbGxleC5sdWFYX3Rva2VuMnN0cihscywgd2hvKSwgd2hlcmUpKTtcbiAgICB9XG59O1xuXG5jb25zdCBzdHJfY2hlY2tuYW1lID0gZnVuY3Rpb24obHMpIHtcbiAgICBjaGVjayhscywgUi5US19OQU1FKTtcbiAgICBsZXQgdHMgPSBscy50LnNlbWluZm8udHM7XG4gICAgbGxleC5sdWFYX25leHQobHMpO1xuICAgIHJldHVybiB0cztcbn07XG5cbmNvbnN0IGluaXRfZXhwID0gZnVuY3Rpb24oZSwgaywgaSkge1xuICAgIGUuZiA9IGUudCA9IE5PX0pVTVA7XG4gICAgZS5rID0gaztcbiAgICBlLnUuaW5mbyA9IGk7XG59O1xuXG5jb25zdCBjb2Rlc3RyaW5nID0gZnVuY3Rpb24obHMsIGUsIHMpIHtcbiAgICBpbml0X2V4cChlLCBleHBraW5kLlZLLCBsdWFLX3N0cmluZ0sobHMuZnMsIHMpKTtcbn07XG5cbmNvbnN0IGNoZWNrbmFtZSA9IGZ1bmN0aW9uKGxzLCBlKSB7XG4gICAgY29kZXN0cmluZyhscywgZSwgc3RyX2NoZWNrbmFtZShscykpO1xufTtcblxuY29uc3QgcmVnaXN0ZXJsb2NhbHZhciA9IGZ1bmN0aW9uKGxzLCB2YXJuYW1lKSB7XG4gICAgbGV0IGZzID0gbHMuZnM7XG4gICAgbGV0IGYgPSBmcy5mO1xuICAgIGYubG9jdmFyc1tmcy5ubG9jdmFyc10gPSBuZXcgbG9iamVjdC5Mb2NWYXIoKTtcbiAgICBmLmxvY3ZhcnNbZnMubmxvY3ZhcnNdLnZhcm5hbWUgPSB2YXJuYW1lO1xuICAgIHJldHVybiBmcy5ubG9jdmFycysrO1xufTtcblxuY29uc3QgbmV3X2xvY2FsdmFyID0gZnVuY3Rpb24obHMsIG5hbWUpIHtcbiAgICBsZXQgZnMgPSBscy5mcztcbiAgICBsZXQgZHlkID0gbHMuZHlkO1xuICAgIGxldCByZWcgPSByZWdpc3RlcmxvY2FsdmFyKGxzLCBuYW1lKTtcbiAgICBjaGVja2xpbWl0KGZzLCBkeWQuYWN0dmFyLm4gKyAxIC0gZnMuZmlyc3Rsb2NhbCwgTUFYVkFSUywgdG9fbHVhc3RyaW5nKFwibG9jYWwgdmFyaWFibGVzXCIsIHRydWUpKTtcbiAgICBkeWQuYWN0dmFyLmFycltkeWQuYWN0dmFyLm5dID0gbmV3IFZhcmRlc2MoKTtcbiAgICBkeWQuYWN0dmFyLmFycltkeWQuYWN0dmFyLm5dLmlkeCA9IHJlZztcbiAgICBkeWQuYWN0dmFyLm4rKztcbn07XG5cbmNvbnN0IG5ld19sb2NhbHZhcmxpdGVyYWwgPSBmdW5jdGlvbihscywgbmFtZSkge1xuICAgIG5ld19sb2NhbHZhcihscywgbGxleC5sdWFYX25ld3N0cmluZyhscywgdG9fbHVhc3RyaW5nKG5hbWUsIHRydWUpKSk7XG59O1xuXG5jb25zdCBnZXRsb2N2YXIgPSBmdW5jdGlvbihmcywgaSkge1xuICAgIGxldCBpZHggPSBmcy5scy5keWQuYWN0dmFyLmFycltmcy5maXJzdGxvY2FsICsgaV0uaWR4O1xuICAgIGx1YV9hc3NlcnQoaWR4IDwgZnMubmxvY3ZhcnMpO1xuICAgIHJldHVybiBmcy5mLmxvY3ZhcnNbaWR4XTtcbn07XG5cbmNvbnN0IGFkanVzdGxvY2FsdmFycyA9IGZ1bmN0aW9uKGxzLCBudmFycykge1xuICAgIGxldCBmcyA9IGxzLmZzO1xuICAgIGZzLm5hY3R2YXIgPSBmcy5uYWN0dmFyICsgbnZhcnM7XG4gICAgZm9yICg7IG52YXJzOyBudmFycy0tKVxuICAgICAgICBnZXRsb2N2YXIoZnMsIGZzLm5hY3R2YXIgLSBudmFycykuc3RhcnRwYyA9IGZzLnBjO1xufTtcblxuY29uc3QgcmVtb3ZldmFycyA9IGZ1bmN0aW9uKGZzLCB0b2xldmVsKSB7XG4gICAgZnMubHMuZHlkLmFjdHZhci5uIC09IGZzLm5hY3R2YXIgLSB0b2xldmVsO1xuICAgIHdoaWxlIChmcy5uYWN0dmFyID4gdG9sZXZlbClcbiAgICAgICAgZ2V0bG9jdmFyKGZzLCAtLWZzLm5hY3R2YXIpLmVuZHBjID0gZnMucGM7XG59O1xuXG5jb25zdCBzZWFyY2h1cHZhbHVlID0gZnVuY3Rpb24oZnMsIG5hbWUpIHtcbiAgICBsZXQgdXAgPSBmcy5mLnVwdmFsdWVzO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZnMubnVwczsgaSsrKSB7XG4gICAgICAgIGlmIChlcXN0cih1cFtpXS5uYW1lLCBuYW1lKSlcbiAgICAgICAgICAgIHJldHVybiBpO1xuICAgIH1cbiAgICByZXR1cm4gLTE7ICAvKiBub3QgZm91bmQgKi9cbn07XG5cbmNvbnN0IG5ld3VwdmFsdWUgPSBmdW5jdGlvbihmcywgbmFtZSwgdikge1xuICAgIGxldCBmID0gZnMuZjtcbiAgICBjaGVja2xpbWl0KGZzLCBmcy5udXBzICsgMSwgbGZ1bmMuTUFYVVBWQUwsIHRvX2x1YXN0cmluZyhcInVwdmFsdWVzXCIsIHRydWUpKTtcbiAgICBmLnVwdmFsdWVzW2ZzLm51cHNdID0ge1xuICAgICAgICBpbnN0YWNrOiB2LmsgPT09IGV4cGtpbmQuVkxPQ0FMLFxuICAgICAgICBpZHg6IHYudS5pbmZvLFxuICAgICAgICBuYW1lOiBuYW1lXG4gICAgfTtcbiAgICByZXR1cm4gZnMubnVwcysrO1xufTtcblxuY29uc3Qgc2VhcmNodmFyID0gZnVuY3Rpb24oZnMsIG4pIHtcbiAgICBmb3IgKGxldCBpID0gZnMubmFjdHZhciAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIGlmIChlcXN0cihuLCBnZXRsb2N2YXIoZnMsIGkpLnZhcm5hbWUpKVxuICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgfVxuXG4gICAgcmV0dXJuIC0xO1xufTtcblxuLypcbioqIE1hcmsgYmxvY2sgd2hlcmUgdmFyaWFibGUgYXQgZ2l2ZW4gbGV2ZWwgd2FzIGRlZmluZWRcbioqICh0byBlbWl0IGNsb3NlIGluc3RydWN0aW9ucyBsYXRlcikuXG4qL1xuY29uc3QgbWFya3VwdmFsID0gZnVuY3Rpb24oZnMsIGxldmVsKSB7XG4gICAgbGV0IGJsID0gZnMuYmw7XG4gICAgd2hpbGUgKGJsLm5hY3R2YXIgPiBsZXZlbClcbiAgICAgICAgYmwgPSBibC5wcmV2aW91cztcbiAgICBibC51cHZhbCA9IDE7XG59O1xuXG4vKlxuKiogRmluZCB2YXJpYWJsZSB3aXRoIGdpdmVuIG5hbWUgJ24nLiBJZiBpdCBpcyBhbiB1cHZhbHVlLCBhZGQgdGhpc1xuKiogdXB2YWx1ZSBpbnRvIGFsbCBpbnRlcm1lZGlhdGUgZnVuY3Rpb25zLlxuKi9cbmNvbnN0IHNpbmdsZXZhcmF1eCA9IGZ1bmN0aW9uKGZzLCBuLCB2ciwgYmFzZSkge1xuICAgIGlmIChmcyA9PT0gbnVsbCkgIC8qIG5vIG1vcmUgbGV2ZWxzPyAqL1xuICAgICAgICBpbml0X2V4cCh2ciwgZXhwa2luZC5WVk9JRCwgMCk7ICAvKiBkZWZhdWx0IGlzIGdsb2JhbCAqL1xuICAgIGVsc2Uge1xuICAgICAgICBsZXQgdiA9IHNlYXJjaHZhcihmcywgbik7ICAvKiBsb29rIHVwIGxvY2FscyBhdCBjdXJyZW50IGxldmVsICovXG4gICAgICAgIGlmICh2ID49IDApIHsgIC8qIGZvdW5kPyAqL1xuICAgICAgICAgICAgaW5pdF9leHAodnIsIGV4cGtpbmQuVkxPQ0FMLCB2KTsgIC8qIHZhcmlhYmxlIGlzIGxvY2FsICovXG4gICAgICAgICAgICBpZiAoIWJhc2UpXG4gICAgICAgICAgICAgICAgbWFya3VwdmFsKGZzLCB2KTsgIC8qIGxvY2FsIHdpbGwgYmUgdXNlZCBhcyBhbiB1cHZhbCAqL1xuICAgICAgICB9IGVsc2UgeyAgLyogbm90IGZvdW5kIGFzIGxvY2FsIGF0IGN1cnJlbnQgbGV2ZWw7IHRyeSB1cHZhbHVlcyAqL1xuICAgICAgICAgICAgbGV0IGlkeCA9IHNlYXJjaHVwdmFsdWUoZnMsIG4pOyAgLyogdHJ5IGV4aXN0aW5nIHVwdmFsdWVzICovXG4gICAgICAgICAgICBpZiAoaWR4IDwgMCkgeyAgLyogbm90IGZvdW5kPyAqL1xuICAgICAgICAgICAgICAgIHNpbmdsZXZhcmF1eChmcy5wcmV2LCBuLCB2ciwgMCk7ICAvKiB0cnkgdXBwZXIgbGV2ZWxzICovXG4gICAgICAgICAgICAgICAgaWYgKHZyLmsgPT09IGV4cGtpbmQuVlZPSUQpICAvKiBub3QgZm91bmQ/ICovXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjsgIC8qIGl0IGlzIGEgZ2xvYmFsICovXG4gICAgICAgICAgICAgICAgLyogZWxzZSB3YXMgTE9DQUwgb3IgVVBWQUwgKi9cbiAgICAgICAgICAgICAgICBpZHggPSBuZXd1cHZhbHVlKGZzLCBuLCB2cik7ICAvKiB3aWxsIGJlIGEgbmV3IHVwdmFsdWUgKi9cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGluaXRfZXhwKHZyLCBleHBraW5kLlZVUFZBTCwgaWR4KTsgIC8qIG5ldyBvciBvbGQgdXB2YWx1ZSAqL1xuICAgICAgICB9XG4gICAgfVxufTtcblxuY29uc3Qgc2luZ2xldmFyID0gZnVuY3Rpb24obHMsIHZyKSB7XG4gICAgbGV0IHZhcm5hbWUgPSBzdHJfY2hlY2tuYW1lKGxzKTtcbiAgICBsZXQgZnMgPSBscy5mcztcbiAgICBzaW5nbGV2YXJhdXgoZnMsIHZhcm5hbWUsIHZyLCAxKTtcbiAgICBpZiAodnIuayA9PT0gZXhwa2luZC5WVk9JRCkgeyAgLyogaXMgZ2xvYmFsIG5hbWU/ICovXG4gICAgICAgIGxldCBrZXkgPSBuZXcgZXhwZGVzYygpO1xuICAgICAgICBzaW5nbGV2YXJhdXgoZnMsIGxzLmVudm4sIHZyLCAxKTsgIC8qIGdldCBlbnZpcm9ubWVudCB2YXJpYWJsZSAqL1xuICAgICAgICBsdWFfYXNzZXJ0KHZyLmsgIT09IGV4cGtpbmQuVlZPSUQpOyAgLyogdGhpcyBvbmUgbXVzdCBleGlzdCAqL1xuICAgICAgICBjb2Rlc3RyaW5nKGxzLCBrZXksIHZhcm5hbWUpOyAgLyoga2V5IGlzIHZhcmlhYmxlIG5hbWUgKi9cbiAgICAgICAgbHVhS19pbmRleGVkKGZzLCB2ciwga2V5KTsgIC8qIGVudlt2YXJuYW1lXSAqL1xuICAgIH1cbn07XG5cbmNvbnN0IGFkanVzdF9hc3NpZ24gPSBmdW5jdGlvbihscywgbnZhcnMsIG5leHBzLCBlKSB7XG4gICAgbGV0IGZzID0gbHMuZnM7XG4gICAgbGV0IGV4dHJhID0gbnZhcnMgLSBuZXhwcztcbiAgICBpZiAoaGFzbXVsdHJldChlLmspKSB7XG4gICAgICAgIGV4dHJhKys7ICAvKiBpbmNsdWRlcyBjYWxsIGl0c2VsZiAqL1xuICAgICAgICBpZiAoZXh0cmEgPCAwKSBleHRyYSA9IDA7XG4gICAgICAgIGx1YUtfc2V0cmV0dXJucyhmcywgZSwgZXh0cmEpOyAgLyogbGFzdCBleHAuIHByb3ZpZGVzIHRoZSBkaWZmZXJlbmNlICovXG4gICAgICAgIGlmIChleHRyYSA+IDEpIGx1YUtfcmVzZXJ2ZXJlZ3MoZnMsIGV4dHJhIC0gMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGUuayAhPT0gZXhwa2luZC5WVk9JRCkgbHVhS19leHAybmV4dHJlZyhmcywgZSk7ICAvKiBjbG9zZSBsYXN0IGV4cHJlc3Npb24gKi9cbiAgICAgICAgaWYgKGV4dHJhID4gMCkge1xuICAgICAgICAgICAgbGV0IHJlZyA9IGZzLmZyZWVyZWc7XG4gICAgICAgICAgICBsdWFLX3Jlc2VydmVyZWdzKGZzLCBleHRyYSk7XG4gICAgICAgICAgICBsdWFLX25pbChmcywgcmVnLCBleHRyYSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKG5leHBzID4gbnZhcnMpXG4gICAgICAgIGxzLmZzLmZyZWVyZWcgLT0gbmV4cHMgLSBudmFyczsgIC8qIHJlbW92ZSBleHRyYSB2YWx1ZXMgKi9cbn07XG5cbmNvbnN0IGVudGVybGV2ZWwgPSBmdW5jdGlvbihscykge1xuICAgIGxldCBMID0gbHMuTDtcbiAgICArK0wubkNjYWxscztcbiAgICBjaGVja2xpbWl0KGxzLmZzLCBMLm5DY2FsbHMsIExVQUlfTUFYQ0NBTExTLCB0b19sdWFzdHJpbmcoXCJKUyBsZXZlbHNcIiwgdHJ1ZSkpO1xufTtcblxuY29uc3QgbGVhdmVsZXZlbCA9IGZ1bmN0aW9uKGxzKSB7XG4gICAgcmV0dXJuIGxzLkwubkNjYWxscy0tO1xufTtcblxuY29uc3QgY2xvc2Vnb3RvID0gZnVuY3Rpb24obHMsIGcsIGxhYmVsKSB7XG4gICAgbGV0IGZzID0gbHMuZnM7XG4gICAgbGV0IGdsID0gbHMuZHlkLmd0O1xuICAgIGxldCBndCA9IGdsLmFycltnXTtcbiAgICBsdWFfYXNzZXJ0KGVxc3RyKGd0Lm5hbWUsIGxhYmVsLm5hbWUpKTtcbiAgICBpZiAoZ3QubmFjdHZhciA8IGxhYmVsLm5hY3R2YXIpIHtcbiAgICAgICAgbGV0IHZuYW1lID0gZ2V0bG9jdmFyKGZzLCBndC5uYWN0dmFyKS52YXJuYW1lO1xuICAgICAgICBsZXQgbXNnID0gbG9iamVjdC5sdWFPX3B1c2hmc3RyaW5nKGxzLkwsXG4gICAgICAgICAgICB0b19sdWFzdHJpbmcoXCI8Z290byAlcz4gYXQgbGluZSAlZCBqdW1wcyBpbnRvIHRoZSBzY29wZSBvZiBsb2NhbCAnJXMnXCIpLFxuICAgICAgICAgICAgZ3QubmFtZS5nZXRzdHIoKSwgZ3QubGluZSwgdm5hbWUuZ2V0c3RyKCkpO1xuICAgICAgICBzZW1lcnJvcihscywgbXNnKTtcbiAgICB9XG4gICAgbHVhS19wYXRjaGxpc3QoZnMsIGd0LnBjLCBsYWJlbC5wYyk7XG4gICAgLyogcmVtb3ZlIGdvdG8gZnJvbSBwZW5kaW5nIGxpc3QgKi9cbiAgICBmb3IgKGxldCBpID0gZzsgaSA8IGdsLm4gLSAxOyBpKyspXG4gICAgICAgIGdsLmFycltpXSA9IGdsLmFycltpICsgMV07XG4gICAgZ2wubi0tO1xufTtcblxuLypcbioqIHRyeSB0byBjbG9zZSBhIGdvdG8gd2l0aCBleGlzdGluZyBsYWJlbHM7IHRoaXMgc29sdmVzIGJhY2t3YXJkIGp1bXBzXG4qL1xuY29uc3QgZmluZGxhYmVsID0gZnVuY3Rpb24obHMsIGcpIHtcbiAgICBsZXQgYmwgPSBscy5mcy5ibDtcbiAgICBsZXQgZHlkID0gbHMuZHlkO1xuICAgIGxldCBndCA9IGR5ZC5ndC5hcnJbZ107XG4gICAgLyogY2hlY2sgbGFiZWxzIGluIGN1cnJlbnQgYmxvY2sgZm9yIGEgbWF0Y2ggKi9cbiAgICBmb3IgKGxldCBpID0gYmwuZmlyc3RsYWJlbDsgaSA8IGR5ZC5sYWJlbC5uOyBpKyspIHtcbiAgICAgICAgbGV0IGxiID0gZHlkLmxhYmVsLmFycltpXTtcbiAgICAgICAgaWYgKGVxc3RyKGxiLm5hbWUsIGd0Lm5hbWUpKSB7ICAvKiBjb3JyZWN0IGxhYmVsPyAqL1xuICAgICAgICAgICAgaWYgKGd0Lm5hY3R2YXIgPiBsYi5uYWN0dmFyICYmIChibC51cHZhbCB8fCBkeWQubGFiZWwubiA+IGJsLmZpcnN0bGFiZWwpKVxuICAgICAgICAgICAgICAgIGx1YUtfcGF0Y2hjbG9zZShscy5mcywgZ3QucGMsIGxiLm5hY3R2YXIpO1xuICAgICAgICAgICAgY2xvc2Vnb3RvKGxzLCBnLCBsYik7ICAvKiBjbG9zZSBpdCAqL1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlOyAgLyogbGFiZWwgbm90IGZvdW5kOyBjYW5ub3QgY2xvc2UgZ290byAqL1xufTtcblxuY29uc3QgbmV3bGFiZWxlbnRyeSA9IGZ1bmN0aW9uKGxzLCBsLCBuYW1lLCBsaW5lLCBwYykge1xuICAgIGxldCBuID0gbC5uO1xuICAgIGwuYXJyW25dID0gbmV3IExhYmVsZGVzYygpO1xuICAgIGwuYXJyW25dLm5hbWUgPSBuYW1lO1xuICAgIGwuYXJyW25dLmxpbmUgPSBsaW5lO1xuICAgIGwuYXJyW25dLm5hY3R2YXIgPSBscy5mcy5uYWN0dmFyO1xuICAgIGwuYXJyW25dLnBjID0gcGM7XG4gICAgbC5uID0gbiArIDE7XG4gICAgcmV0dXJuIG47XG59O1xuXG4vKlxuKiogY2hlY2sgd2hldGhlciBuZXcgbGFiZWwgJ2xiJyBtYXRjaGVzIGFueSBwZW5kaW5nIGdvdG9zIGluIGN1cnJlbnRcbioqIGJsb2NrOyBzb2x2ZXMgZm9yd2FyZCBqdW1wc1xuKi9cbmNvbnN0IGZpbmRnb3RvcyA9IGZ1bmN0aW9uKGxzLCBsYikge1xuICAgIGxldCBnbCA9IGxzLmR5ZC5ndDtcbiAgICBsZXQgaSA9IGxzLmZzLmJsLmZpcnN0Z290bztcbiAgICB3aGlsZSAoaSA8IGdsLm4pIHtcbiAgICAgICAgaWYgKGVxc3RyKGdsLmFycltpXS5uYW1lLCBsYi5uYW1lKSlcbiAgICAgICAgICAgIGNsb3NlZ290byhscywgaSwgbGIpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBpKys7XG4gICAgfVxufTtcblxuLypcbioqIGV4cG9ydCBwZW5kaW5nIGdvdG9zIHRvIG91dGVyIGxldmVsLCB0byBjaGVjayB0aGVtIGFnYWluc3RcbioqIG91dGVyIGxhYmVsczsgaWYgdGhlIGJsb2NrIGJlaW5nIGV4aXRlZCBoYXMgdXB2YWx1ZXMsIGFuZFxuKiogdGhlIGdvdG8gZXhpdHMgdGhlIHNjb3BlIG9mIGFueSB2YXJpYWJsZSAod2hpY2ggY2FuIGJlIHRoZVxuKiogdXB2YWx1ZSksIGNsb3NlIHRob3NlIHZhcmlhYmxlcyBiZWluZyBleGl0ZWQuXG4qL1xuY29uc3QgbW92ZWdvdG9zb3V0ID0gZnVuY3Rpb24oZnMsIGJsKSB7XG4gICAgbGV0IGkgPSBibC5maXJzdGdvdG87XG4gICAgbGV0IGdsID0gZnMubHMuZHlkLmd0O1xuICAgIC8qIGNvcnJlY3QgcGVuZGluZyBnb3RvcyB0byBjdXJyZW50IGJsb2NrIGFuZCB0cnkgdG8gY2xvc2UgaXRcbiAgICAgICB3aXRoIHZpc2libGUgbGFiZWxzICovXG4gICAgd2hpbGUgKGkgPCBnbC5uKSB7XG4gICAgICAgIGxldCBndCA9IGdsLmFycltpXTtcbiAgICAgICAgaWYgKGd0Lm5hY3R2YXIgPiBibC5uYWN0dmFyKSB7XG4gICAgICAgICAgICBpZiAoYmwudXB2YWwpXG4gICAgICAgICAgICAgICAgbHVhS19wYXRjaGNsb3NlKGZzLCBndC5wYywgYmwubmFjdHZhcik7XG4gICAgICAgICAgICBndC5uYWN0dmFyID0gYmwubmFjdHZhcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWZpbmRsYWJlbChmcy5scywgaSkpXG4gICAgICAgICAgICBpKys7ICAvKiBtb3ZlIHRvIG5leHQgb25lICovXG4gICAgfVxufTtcblxuY29uc3QgZW50ZXJibG9jayA9IGZ1bmN0aW9uKGZzLCBibCwgaXNsb29wKSB7XG4gICAgYmwuaXNsb29wID0gaXNsb29wO1xuICAgIGJsLm5hY3R2YXIgPSBmcy5uYWN0dmFyO1xuICAgIGJsLmZpcnN0bGFiZWwgPSBmcy5scy5keWQubGFiZWwubjtcbiAgICBibC5maXJzdGdvdG8gPSBmcy5scy5keWQuZ3QubjtcbiAgICBibC51cHZhbCA9IDA7XG4gICAgYmwucHJldmlvdXMgPSBmcy5ibDtcbiAgICBmcy5ibCA9IGJsO1xuICAgIGx1YV9hc3NlcnQoZnMuZnJlZXJlZyA9PT0gZnMubmFjdHZhcik7XG59O1xuXG4vKlxuKiogY3JlYXRlIGEgbGFiZWwgbmFtZWQgJ2JyZWFrJyB0byByZXNvbHZlIGJyZWFrIHN0YXRlbWVudHNcbiovXG5jb25zdCBicmVha2xhYmVsID0gZnVuY3Rpb24obHMpIHtcbiAgICBsZXQgbiA9IGx1YVNfbmV3bGl0ZXJhbChscy5MLCBcImJyZWFrXCIpO1xuICAgIGxldCBsID0gbmV3bGFiZWxlbnRyeShscywgbHMuZHlkLmxhYmVsLCBuLCAwLCBscy5mcy5wYyk7XG4gICAgZmluZGdvdG9zKGxzLCBscy5keWQubGFiZWwuYXJyW2xdKTtcbn07XG5cbi8qXG4qKiBnZW5lcmF0ZXMgYW4gZXJyb3IgZm9yIGFuIHVuZGVmaW5lZCAnZ290byc7IGNob29zZSBhcHByb3ByaWF0ZVxuKiogbWVzc2FnZSB3aGVuIGxhYmVsIG5hbWUgaXMgYSByZXNlcnZlZCB3b3JkICh3aGljaCBjYW4gb25seSBiZSAnYnJlYWsnKVxuKi9cbmNvbnN0IHVuZGVmZ290byA9IGZ1bmN0aW9uKGxzLCBndCkge1xuICAgIGxldCBtc2cgPSBsbGV4LmlzcmVzZXJ2ZWQoZ3QubmFtZSlcbiAgICAgICAgPyBcIjwlcz4gYXQgbGluZSAlZCBub3QgaW5zaWRlIGEgbG9vcFwiXG4gICAgICAgIDogXCJubyB2aXNpYmxlIGxhYmVsICclcycgZm9yIDxnb3RvPiBhdCBsaW5lICVkXCI7XG4gICAgbXNnID0gbG9iamVjdC5sdWFPX3B1c2hmc3RyaW5nKGxzLkwsIHRvX2x1YXN0cmluZyhtc2cpLCBndC5uYW1lLmdldHN0cigpLCBndC5saW5lKTtcbiAgICBzZW1lcnJvcihscywgbXNnKTtcbn07XG5cbi8qXG4qKiBhZGRzIGEgbmV3IHByb3RvdHlwZSBpbnRvIGxpc3Qgb2YgcHJvdG90eXBlc1xuKi9cbmNvbnN0IGFkZHByb3RvdHlwZSA9IGZ1bmN0aW9uKGxzKSB7XG4gICAgbGV0IEwgPSBscy5MO1xuICAgIGxldCBjbHAgPSBuZXcgUHJvdG8oTCk7XG4gICAgbGV0IGZzID0gbHMuZnM7XG4gICAgbGV0IGYgPSBmcy5mOyAgLyogcHJvdG90eXBlIG9mIGN1cnJlbnQgZnVuY3Rpb24gKi9cbiAgICBmLnBbZnMubnArK10gPSBjbHA7XG4gICAgcmV0dXJuIGNscDtcbn07XG5cbi8qXG4qKiBjb2RlcyBpbnN0cnVjdGlvbiB0byBjcmVhdGUgbmV3IGNsb3N1cmUgaW4gcGFyZW50IGZ1bmN0aW9uLlxuKi9cbmNvbnN0IGNvZGVjbG9zdXJlID0gZnVuY3Rpb24obHMsIHYpIHtcbiAgICBsZXQgZnMgPSBscy5mcy5wcmV2O1xuICAgIGluaXRfZXhwKHYsIGV4cGtpbmQuVlJFTE9DQUJMRSwgbHVhS19jb2RlQUJ4KGZzLCBPUF9DTE9TVVJFLCAwLCBmcy5ucCAtMSkpO1xuICAgIGx1YUtfZXhwMm5leHRyZWcoZnMsIHYpOyAgLyogZml4IGl0IGF0IHRoZSBsYXN0IHJlZ2lzdGVyICovXG59O1xuXG5jb25zdCBvcGVuX2Z1bmMgPSBmdW5jdGlvbihscywgZnMsIGJsKSB7XG4gICAgZnMucHJldiA9IGxzLmZzOyAgLyogbGlua2VkIGxpc3Qgb2YgZnVuY3N0YXRlcyAqL1xuICAgIGZzLmxzID0gbHM7XG4gICAgbHMuZnMgPSBmcztcbiAgICBmcy5wYyA9IDA7XG4gICAgZnMubGFzdHRhcmdldCA9IDA7XG4gICAgZnMuanBjID0gTk9fSlVNUDtcbiAgICBmcy5mcmVlcmVnID0gMDtcbiAgICBmcy5uayA9IDA7XG4gICAgZnMubnAgPSAwO1xuICAgIGZzLm51cHMgPSAwO1xuICAgIGZzLm5sb2N2YXJzID0gMDtcbiAgICBmcy5uYWN0dmFyID0gMDtcbiAgICBmcy5maXJzdGxvY2FsID0gbHMuZHlkLmFjdHZhci5uO1xuICAgIGZzLmJsID0gbnVsbDtcbiAgICBsZXQgZiA9IGZzLmY7XG4gICAgZi5zb3VyY2UgPSBscy5zb3VyY2U7XG4gICAgZi5tYXhzdGFja3NpemUgPSAyOyAgLyogcmVnaXN0ZXJzIDAvMSBhcmUgYWx3YXlzIHZhbGlkICovXG4gICAgZW50ZXJibG9jayhmcywgYmwsIGZhbHNlKTtcbn07XG5cbmNvbnN0IGxlYXZlYmxvY2sgPSBmdW5jdGlvbihmcykge1xuICAgIGxldCBibCA9IGZzLmJsO1xuICAgIGxldCBscyA9IGZzLmxzO1xuICAgIGlmIChibC5wcmV2aW91cyAmJiBibC51cHZhbCkge1xuICAgICAgICAvKiBjcmVhdGUgYSAnanVtcCB0byBoZXJlJyB0byBjbG9zZSB1cHZhbHVlcyAqL1xuICAgICAgICBsZXQgaiA9IGx1YUtfanVtcChmcyk7XG4gICAgICAgIGx1YUtfcGF0Y2hjbG9zZShmcywgaiAsIGJsLm5hY3R2YXIpO1xuICAgICAgICBsdWFLX3BhdGNodG9oZXJlKGZzLCBqKTtcbiAgICB9XG5cbiAgICBpZiAoYmwuaXNsb29wKVxuICAgICAgICBicmVha2xhYmVsKGxzKTsgIC8qIGNsb3NlIHBlbmRpbmcgYnJlYWtzICovXG5cbiAgICBmcy5ibCA9IGJsLnByZXZpb3VzO1xuICAgIHJlbW92ZXZhcnMoZnMsIGJsLm5hY3R2YXIpO1xuICAgIGx1YV9hc3NlcnQoYmwubmFjdHZhciA9PT0gZnMubmFjdHZhcik7XG4gICAgZnMuZnJlZXJlZyA9IGZzLm5hY3R2YXI7ICAvKiBmcmVlIHJlZ2lzdGVycyAqL1xuICAgIGxzLmR5ZC5sYWJlbC5uID0gYmwuZmlyc3RsYWJlbDsgIC8qIHJlbW92ZSBsb2NhbCBsYWJlbHMgKi9cbiAgICBpZiAoYmwucHJldmlvdXMpICAvKiBpbm5lciBibG9jaz8gKi9cbiAgICAgICAgbW92ZWdvdG9zb3V0KGZzLCBibCk7ICAvKiB1cGRhdGUgcGVuZGluZyBnb3RvcyB0byBvdXRlciBibG9jayAqL1xuICAgIGVsc2UgaWYgKGJsLmZpcnN0Z290byA8IGxzLmR5ZC5ndC5uKSAgLyogcGVuZGluZyBnb3RvcyBpbiBvdXRlciBibG9jaz8gKi9cbiAgICAgICAgdW5kZWZnb3RvKGxzLCBscy5keWQuZ3QuYXJyW2JsLmZpcnN0Z290b10pOyAgLyogZXJyb3IgKi9cbn07XG5cbmNvbnN0IGNsb3NlX2Z1bmMgPSBmdW5jdGlvbihscykge1xuICAgIGxldCBmcyA9IGxzLmZzO1xuICAgIGx1YUtfcmV0KGZzLCAwLCAwKTsgIC8qIGZpbmFsIHJldHVybiAqL1xuICAgIGxlYXZlYmxvY2soZnMpO1xuICAgIGx1YV9hc3NlcnQoZnMuYmwgPT09IG51bGwpO1xuICAgIGxzLmZzID0gZnMucHJldjtcbn07XG5cbi8qPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cbi8qIEdSQU1NQVIgUlVMRVMgKi9cbi8qPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuY29uc3QgYmxvY2tfZm9sbG93ID0gZnVuY3Rpb24obHMsIHdpdGh1bnRpbCkge1xuICAgIHN3aXRjaCAobHMudC50b2tlbikge1xuICAgICAgICBjYXNlIFIuVEtfRUxTRTogY2FzZSBSLlRLX0VMU0VJRjpcbiAgICAgICAgY2FzZSBSLlRLX0VORDogY2FzZSBSLlRLX0VPUzpcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICBjYXNlIFIuVEtfVU5USUw6IHJldHVybiB3aXRodW50aWw7XG4gICAgICAgIGRlZmF1bHQ6IHJldHVybiBmYWxzZTtcbiAgICB9XG59O1xuXG5jb25zdCBzdGF0bGlzdCA9IGZ1bmN0aW9uKGxzKSB7XG4gICAgLyogc3RhdGxpc3QgLT4geyBzdGF0IFsnOyddIH0gKi9cbiAgICB3aGlsZSAoIWJsb2NrX2ZvbGxvdyhscywgMSkpIHtcbiAgICAgICAgaWYgKGxzLnQudG9rZW4gPT09IFIuVEtfUkVUVVJOKSB7XG4gICAgICAgICAgICBzdGF0ZW1lbnQobHMpO1xuICAgICAgICAgICAgcmV0dXJuOyAgLyogJ3JldHVybicgbXVzdCBiZSBsYXN0IHN0YXRlbWVudCAqL1xuICAgICAgICB9XG4gICAgICAgIHN0YXRlbWVudChscyk7XG4gICAgfVxufTtcblxuY29uc3QgZmllbGRzZWwgPSBmdW5jdGlvbihscywgdikge1xuICAgIC8qIGZpZWxkc2VsIC0+IFsnLicgfCAnOiddIE5BTUUgKi9cbiAgICBsZXQgZnMgPSBscy5mcztcbiAgICBsZXQga2V5ID0gbmV3IGV4cGRlc2MoKTtcbiAgICBsdWFLX2V4cDJhbnlyZWd1cChmcywgdik7XG4gICAgbGxleC5sdWFYX25leHQobHMpOyAgLyogc2tpcCB0aGUgZG90IG9yIGNvbG9uICovXG4gICAgY2hlY2tuYW1lKGxzLCBrZXkpO1xuICAgIGx1YUtfaW5kZXhlZChmcywgdiwga2V5KTtcbn07XG5cbmNvbnN0IHlpbmRleCA9IGZ1bmN0aW9uKGxzLCB2KSB7XG4gICAgLyogaW5kZXggLT4gJ1snIGV4cHIgJ10nICovXG4gICAgbGxleC5sdWFYX25leHQobHMpOyAgLyogc2tpcCB0aGUgJ1snICovXG4gICAgZXhwcihscywgdik7XG4gICAgbHVhS19leHAydmFsKGxzLmZzLCB2KTtcbiAgICBjaGVja25leHQobHMsIDkzIC8qICgnXScpLmNoYXJDb2RlQXQoMCkgKi8pO1xufTtcblxuLypcbioqIHs9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4qKiBSdWxlcyBmb3IgQ29uc3RydWN0b3JzXG4qKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuKi9cblxuY2xhc3MgQ29uc0NvbnRyb2wge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnYgPSBuZXcgZXhwZGVzYygpOyAvKiBsYXN0IGxpc3QgaXRlbSByZWFkICovXG4gICAgICAgIHRoaXMudCA9IG5ldyBleHBkZXNjKCk7IC8qIHRhYmxlIGRlc2NyaXB0b3IgKi9cbiAgICAgICAgdGhpcy5uaCA9IE5hTjsgICAgICAgICAgLyogdG90YWwgbnVtYmVyIG9mICdyZWNvcmQnIGVsZW1lbnRzICovXG4gICAgICAgIHRoaXMubmEgPSBOYU47ICAgICAgICAgIC8qIHRvdGFsIG51bWJlciBvZiBhcnJheSBlbGVtZW50cyAqL1xuICAgICAgICB0aGlzLnRvc3RvcmUgPSBOYU47ICAgICAvKiBudW1iZXIgb2YgYXJyYXkgZWxlbWVudHMgcGVuZGluZyB0byBiZSBzdG9yZWQgKi9cbiAgICB9XG59XG5cbmNvbnN0IHJlY2ZpZWxkID0gZnVuY3Rpb24obHMsIGNjKSB7XG4gICAgLyogcmVjZmllbGQgLT4gKE5BTUUgfCAnWydleHAxJ10nKSA9IGV4cDEgKi9cbiAgICBsZXQgZnMgPSBscy5mcztcbiAgICBsZXQgcmVnID0gbHMuZnMuZnJlZXJlZztcbiAgICBsZXQga2V5ID0gbmV3IGV4cGRlc2MoKTtcbiAgICBsZXQgdmFsID0gbmV3IGV4cGRlc2MoKTtcblxuICAgIGlmIChscy50LnRva2VuID09PSBSLlRLX05BTUUpIHtcbiAgICAgICAgY2hlY2tsaW1pdChmcywgY2MubmgsIE1BWF9JTlQsIHRvX2x1YXN0cmluZyhcIml0ZW1zIGluIGEgY29uc3RydWN0b3JcIiwgdHJ1ZSkpO1xuICAgICAgICBjaGVja25hbWUobHMsIGtleSk7XG4gICAgfSBlbHNlICAvKiBscy0+dC50b2tlbiA9PT0gJ1snICovXG4gICAgICAgIHlpbmRleChscywga2V5KTtcbiAgICBjYy5uaCsrO1xuICAgIGNoZWNrbmV4dChscywgNjEgLyogKCc9JykuY2hhckNvZGVBdCgwKSAqLyk7XG4gICAgbGV0IHJra2V5ID0gbHVhS19leHAyUksoZnMsIGtleSk7XG4gICAgZXhwcihscywgdmFsKTtcbiAgICBsdWFLX2NvZGVBQkMoZnMsIE9QX1NFVFRBQkxFLCBjYy50LnUuaW5mbywgcmtrZXksIGx1YUtfZXhwMlJLKGZzLCB2YWwpKTtcbiAgICBmcy5mcmVlcmVnID0gcmVnOyAgLyogZnJlZSByZWdpc3RlcnMgKi9cbn07XG5cbmNvbnN0IGNsb3NlbGlzdGZpZWxkID0gZnVuY3Rpb24oZnMsIGNjKSB7XG4gICAgaWYgKGNjLnYuayA9PT0gZXhwa2luZC5WVk9JRCkgcmV0dXJuOyAgLyogdGhlcmUgaXMgbm8gbGlzdCBpdGVtICovXG4gICAgbHVhS19leHAybmV4dHJlZyhmcywgY2Mudik7XG4gICAgY2Mudi5rID0gZXhwa2luZC5WVk9JRDtcbiAgICBpZiAoY2MudG9zdG9yZSA9PT0gTEZJRUxEU19QRVJfRkxVU0gpIHtcbiAgICAgICAgbHVhS19zZXRsaXN0KGZzLCBjYy50LnUuaW5mbywgY2MubmEsIGNjLnRvc3RvcmUpOyAgLyogZmx1c2ggKi9cbiAgICAgICAgY2MudG9zdG9yZSA9IDA7ICAvKiBubyBtb3JlIGl0ZW1zIHBlbmRpbmcgKi9cbiAgICB9XG59O1xuXG5jb25zdCBsYXN0bGlzdGZpZWxkID0gZnVuY3Rpb24oZnMsIGNjKSB7XG4gICAgaWYgKGNjLnRvc3RvcmUgPT09IDApIHJldHVybjtcbiAgICBpZiAoaGFzbXVsdHJldChjYy52LmspKSB7XG4gICAgICAgIGx1YUtfc2V0bXVsdHJldChmcywgY2Mudik7XG4gICAgICAgIGx1YUtfc2V0bGlzdChmcywgY2MudC51LmluZm8sIGNjLm5hLCBMVUFfTVVMVFJFVCk7XG4gICAgICAgIGNjLm5hLS07ICAvKiBkbyBub3QgY291bnQgbGFzdCBleHByZXNzaW9uICh1bmtub3duIG51bWJlciBvZiBlbGVtZW50cykgKi9cbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoY2Mudi5rICE9PSBleHBraW5kLlZWT0lEKVxuICAgICAgICAgICAgbHVhS19leHAybmV4dHJlZyhmcywgY2Mudik7XG4gICAgICAgIGx1YUtfc2V0bGlzdChmcywgY2MudC51LmluZm8sIGNjLm5hLCBjYy50b3N0b3JlKTtcbiAgICB9XG59O1xuXG5jb25zdCBsaXN0ZmllbGQgPSBmdW5jdGlvbihscywgY2MpIHtcbiAgICAvKiBsaXN0ZmllbGQgLT4gZXhwICovXG4gICAgZXhwcihscywgY2Mudik7XG4gICAgY2hlY2tsaW1pdChscy5mcywgY2MubmEsIE1BWF9JTlQsIHRvX2x1YXN0cmluZyhcIml0ZW1zIGluIGEgY29uc3RydWN0b3JcIiwgdHJ1ZSkpO1xuICAgIGNjLm5hKys7XG4gICAgY2MudG9zdG9yZSsrO1xufTtcblxuY29uc3QgZmllbGQgPSBmdW5jdGlvbihscywgY2MpIHtcbiAgICAvKiBmaWVsZCAtPiBsaXN0ZmllbGQgfCByZWNmaWVsZCAqL1xuICAgIHN3aXRjaCAobHMudC50b2tlbikge1xuICAgICAgICBjYXNlIFIuVEtfTkFNRTogeyAgLyogbWF5IGJlICdsaXN0ZmllbGQnIG9yICdyZWNmaWVsZCcgKi9cbiAgICAgICAgICAgIGlmIChsbGV4Lmx1YVhfbG9va2FoZWFkKGxzKSAhPT0gNjEgLyogKCc9JykuY2hhckNvZGVBdCgwKSAqLykgIC8qIGV4cHJlc3Npb24/ICovXG4gICAgICAgICAgICAgICAgbGlzdGZpZWxkKGxzLCBjYyk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgcmVjZmllbGQobHMsIGNjKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgOTEgLyogKCdbJykuY2hhckNvZGVBdCgwKSAqLzoge1xuICAgICAgICAgICAgcmVjZmllbGQobHMsIGNjKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgIGxpc3RmaWVsZChscywgY2MpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5jb25zdCBjb25zdHJ1Y3RvciA9IGZ1bmN0aW9uKGxzLCB0KSB7XG4gICAgLyogY29uc3RydWN0b3IgLT4gJ3snIFsgZmllbGQgeyBzZXAgZmllbGQgfSBbc2VwXSBdICd9J1xuICAgICAgIHNlcCAtPiAnLCcgfCAnOycgKi9cbiAgICBsZXQgZnMgPSBscy5mcztcbiAgICBsZXQgbGluZSA9IGxzLmxpbmVudW1iZXI7XG4gICAgbGV0IHBjID0gbHVhS19jb2RlQUJDKGZzLCBPUF9ORVdUQUJMRSwgMCwgMCwgMCk7XG4gICAgbGV0IGNjID0gbmV3IENvbnNDb250cm9sKCk7XG4gICAgY2MubmEgPSBjYy5uaCA9IGNjLnRvc3RvcmUgPSAwO1xuICAgIGNjLnQgPSB0O1xuICAgIGluaXRfZXhwKHQsIGV4cGtpbmQuVlJFTE9DQUJMRSwgcGMpO1xuICAgIGluaXRfZXhwKGNjLnYsIGV4cGtpbmQuVlZPSUQsIDApOyAgLyogbm8gdmFsdWUgKHlldCkgKi9cbiAgICBsdWFLX2V4cDJuZXh0cmVnKGxzLmZzLCB0KTsgIC8qIGZpeCBpdCBhdCBzdGFjayB0b3AgKi9cbiAgICBjaGVja25leHQobHMsIDEyMyAvKiAoJ3snKS5jaGFyQ29kZUF0KDApICovKTtcbiAgICBkbyB7XG4gICAgICAgIGx1YV9hc3NlcnQoY2Mudi5rID09PSBleHBraW5kLlZWT0lEIHx8IGNjLnRvc3RvcmUgPiAwKTtcbiAgICAgICAgaWYgKGxzLnQudG9rZW4gPT09IDEyNSAvKiAoJ30nKS5jaGFyQ29kZUF0KDApICovKSBicmVhaztcbiAgICAgICAgY2xvc2VsaXN0ZmllbGQoZnMsIGNjKTtcbiAgICAgICAgZmllbGQobHMsIGNjKTtcbiAgICB9IHdoaWxlICh0ZXN0bmV4dChscywgNDQgLyogKCcsJykuY2hhckNvZGVBdCgwKSAqLykgfHwgdGVzdG5leHQobHMsIDU5IC8qICgnOycpLmNoYXJDb2RlQXQoMCkgKi8pKTtcbiAgICBjaGVja19tYXRjaChscywgMTI1IC8qICgnfScpLmNoYXJDb2RlQXQoMCkgKi8sIDEyMyAvKiAoJ3snKS5jaGFyQ29kZUF0KDApICovLCBsaW5lKTtcbiAgICBsYXN0bGlzdGZpZWxkKGZzLCBjYyk7XG4gICAgU0VUQVJHX0IoZnMuZi5jb2RlW3BjXSwgbG9iamVjdC5sdWFPX2ludDJmYihjYy5uYSkpOyAgLyogc2V0IGluaXRpYWwgYXJyYXkgc2l6ZSAqL1xuICAgIFNFVEFSR19DKGZzLmYuY29kZVtwY10sIGxvYmplY3QubHVhT19pbnQyZmIoY2MubmgpKTsgIC8qIHNldCBpbml0aWFsIHRhYmxlIHNpemUgKi9cbn07XG5cbi8qIH09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbmNvbnN0IHBhcmxpc3QgPSBmdW5jdGlvbihscykge1xuICAgIC8qIHBhcmxpc3QgLT4gWyBwYXJhbSB7ICcsJyBwYXJhbSB9IF0gKi9cbiAgICBsZXQgZnMgPSBscy5mcztcbiAgICBsZXQgZiA9IGZzLmY7XG4gICAgbGV0IG5wYXJhbXMgPSAwO1xuICAgIGYuaXNfdmFyYXJnID0gZmFsc2U7XG4gICAgaWYgKGxzLnQudG9rZW4gIT09IDQxIC8qICgnKScpLmNoYXJDb2RlQXQoMCkgKi8pIHsgIC8qIGlzICdwYXJsaXN0JyBub3QgZW1wdHk/ICovXG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIHN3aXRjaCAobHMudC50b2tlbikge1xuICAgICAgICAgICAgICAgIGNhc2UgUi5US19OQU1FOiB7ICAvKiBwYXJhbSAtPiBOQU1FICovXG4gICAgICAgICAgICAgICAgICAgIG5ld19sb2NhbHZhcihscywgc3RyX2NoZWNrbmFtZShscykpO1xuICAgICAgICAgICAgICAgICAgICBucGFyYW1zKys7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlIFIuVEtfRE9UUzogeyAgLyogcGFyYW0gLT4gJy4uLicgKi9cbiAgICAgICAgICAgICAgICAgICAgbGxleC5sdWFYX25leHQobHMpO1xuICAgICAgICAgICAgICAgICAgICBmLmlzX3ZhcmFyZyA9IHRydWU7ICAvKiBkZWNsYXJlZCB2YXJhcmcgKi9cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IGxsZXgubHVhWF9zeW50YXhlcnJvcihscywgdG9fbHVhc3RyaW5nKFwiPG5hbWU+IG9yICcuLi4nIGV4cGVjdGVkXCIsIHRydWUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSB3aGlsZSghZi5pc192YXJhcmcgJiYgdGVzdG5leHQobHMsIDQ0IC8qICgnLCcpLmNoYXJDb2RlQXQoMCkgKi8pKTtcbiAgICB9XG4gICAgYWRqdXN0bG9jYWx2YXJzKGxzLCBucGFyYW1zKTtcbiAgICBmLm51bXBhcmFtcyA9IGZzLm5hY3R2YXI7XG4gICAgbHVhS19yZXNlcnZlcmVncyhmcywgZnMubmFjdHZhcik7ICAvKiByZXNlcnZlIHJlZ2lzdGVyIGZvciBwYXJhbWV0ZXJzICovXG59O1xuXG5jb25zdCBib2R5ID0gZnVuY3Rpb24obHMsIGUsIGlzbWV0aG9kLCBsaW5lKSB7XG4gICAgLyogYm9keSAtPiAgJygnIHBhcmxpc3QgJyknIGJsb2NrIEVORCAqL1xuICAgIGxldCBuZXdfZnMgPSBuZXcgRnVuY1N0YXRlKCk7XG4gICAgbGV0IGJsID0gbmV3IEJsb2NrQ250KCk7XG4gICAgbmV3X2ZzLmYgPSBhZGRwcm90b3R5cGUobHMpO1xuICAgIG5ld19mcy5mLmxpbmVkZWZpbmVkID0gbGluZTtcbiAgICBvcGVuX2Z1bmMobHMsIG5ld19mcywgYmwpO1xuICAgIGNoZWNrbmV4dChscywgNDAgLyogKCcoJykuY2hhckNvZGVBdCgwKSAqLyk7XG4gICAgaWYgKGlzbWV0aG9kKSB7XG4gICAgICAgIG5ld19sb2NhbHZhcmxpdGVyYWwobHMsIFwic2VsZlwiKTsgIC8qIGNyZWF0ZSAnc2VsZicgcGFyYW1ldGVyICovXG4gICAgICAgIGFkanVzdGxvY2FsdmFycyhscywgMSk7XG4gICAgfVxuICAgIHBhcmxpc3QobHMpO1xuICAgIGNoZWNrbmV4dChscywgNDEgLyogKCcpJykuY2hhckNvZGVBdCgwKSAqLyk7XG4gICAgc3RhdGxpc3QobHMpO1xuICAgIG5ld19mcy5mLmxhc3RsaW5lZGVmaW5lZCA9IGxzLmxpbmVudW1iZXI7XG4gICAgY2hlY2tfbWF0Y2gobHMsIFIuVEtfRU5ELCBSLlRLX0ZVTkNUSU9OLCBsaW5lKTtcbiAgICBjb2RlY2xvc3VyZShscywgZSk7XG4gICAgY2xvc2VfZnVuYyhscyk7XG59O1xuXG5jb25zdCBleHBsaXN0ID0gZnVuY3Rpb24obHMsIHYpIHtcbiAgICAvKiBleHBsaXN0IC0+IGV4cHIgeyAnLCcgZXhwciB9ICovXG4gICAgbGV0IG4gPSAxOyAgLyogYXQgbGVhc3Qgb25lIGV4cHJlc3Npb24gKi9cbiAgICBleHByKGxzLCB2KTtcbiAgICB3aGlsZSAodGVzdG5leHQobHMsIDQ0IC8qICgnLCcpLmNoYXJDb2RlQXQoMCkgKi8pKSB7XG4gICAgICAgIGx1YUtfZXhwMm5leHRyZWcobHMuZnMsIHYpO1xuICAgICAgICBleHByKGxzLCB2KTtcbiAgICAgICAgbisrO1xuICAgIH1cbiAgICByZXR1cm4gbjtcbn07XG5cbmNvbnN0IGZ1bmNhcmdzID0gZnVuY3Rpb24obHMsIGYsIGxpbmUpIHtcbiAgICBsZXQgZnMgPSBscy5mcztcbiAgICBsZXQgYXJncyA9IG5ldyBleHBkZXNjKCk7XG4gICAgc3dpdGNoIChscy50LnRva2VuKSB7XG4gICAgICAgIGNhc2UgNDAgLyogKCcoJykuY2hhckNvZGVBdCgwKSAqLzogeyAgLyogZnVuY2FyZ3MgLT4gJygnIFsgZXhwbGlzdCBdICcpJyAqL1xuICAgICAgICAgICAgbGxleC5sdWFYX25leHQobHMpO1xuICAgICAgICAgICAgaWYgKGxzLnQudG9rZW4gPT09IDQxIC8qICgnKScpLmNoYXJDb2RlQXQoMCkgKi8pICAvKiBhcmcgbGlzdCBpcyBlbXB0eT8gKi9cbiAgICAgICAgICAgICAgICBhcmdzLmsgPSBleHBraW5kLlZWT0lEO1xuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZXhwbGlzdChscywgYXJncyk7XG4gICAgICAgICAgICAgICAgbHVhS19zZXRtdWx0cmV0KGZzLCBhcmdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNoZWNrX21hdGNoKGxzLCA0MSAvKiAoJyknKS5jaGFyQ29kZUF0KDApICovLCA0MCAvKiAoJygnKS5jaGFyQ29kZUF0KDApICovLCBsaW5lKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMTIzIC8qICgneycpLmNoYXJDb2RlQXQoMCkgKi86IHsgIC8qIGZ1bmNhcmdzIC0+IGNvbnN0cnVjdG9yICovXG4gICAgICAgICAgICBjb25zdHJ1Y3RvcihscywgYXJncyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFIuVEtfU1RSSU5HOiB7ICAvKiBmdW5jYXJncyAtPiBTVFJJTkcgKi9cbiAgICAgICAgICAgIGNvZGVzdHJpbmcobHMsIGFyZ3MsIGxzLnQuc2VtaW5mby50cyk7XG4gICAgICAgICAgICBsbGV4Lmx1YVhfbmV4dChscyk7ICAvKiBtdXN0IHVzZSAnc2VtaW5mbycgYmVmb3JlICduZXh0JyAqL1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgbGxleC5sdWFYX3N5bnRheGVycm9yKGxzLCB0b19sdWFzdHJpbmcoXCJmdW5jdGlvbiBhcmd1bWVudHMgZXhwZWN0ZWRcIiwgdHJ1ZSkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGx1YV9hc3NlcnQoZi5rID09PSBleHBraW5kLlZOT05SRUxPQyk7XG4gICAgbGV0IG5wYXJhbXM7XG4gICAgbGV0IGJhc2UgPSBmLnUuaW5mbzsgIC8qIGJhc2UgcmVnaXN0ZXIgZm9yIGNhbGwgKi9cbiAgICBpZiAoaGFzbXVsdHJldChhcmdzLmspKVxuICAgICAgICBucGFyYW1zID0gTFVBX01VTFRSRVQ7ICAvKiBvcGVuIGNhbGwgKi9cbiAgICBlbHNlIHtcbiAgICAgICAgaWYgKGFyZ3MuayAhPT0gZXhwa2luZC5WVk9JRClcbiAgICAgICAgICAgIGx1YUtfZXhwMm5leHRyZWcoZnMsIGFyZ3MpOyAgLyogY2xvc2UgbGFzdCBhcmd1bWVudCAqL1xuICAgICAgICBucGFyYW1zID0gZnMuZnJlZXJlZyAtIChiYXNlKzEpO1xuICAgIH1cbiAgICBpbml0X2V4cChmLCBleHBraW5kLlZDQUxMLCBsdWFLX2NvZGVBQkMoZnMsIE9QX0NBTEwsIGJhc2UsIG5wYXJhbXMrMSwgMikpO1xuICAgIGx1YUtfZml4bGluZShmcywgbGluZSk7XG4gICAgZnMuZnJlZXJlZyA9IGJhc2UgKyAxOyAvKiBjYWxsIHJlbW92ZSBmdW5jdGlvbiBhbmQgYXJndW1lbnRzIGFuZCBsZWF2ZXMgKHVubGVzcyBjaGFuZ2VkKSBvbmUgcmVzdWx0ICovXG59O1xuXG4vKlxuKiogez09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbioqIEV4cHJlc3Npb24gcGFyc2luZ1xuKiogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiovXG5cbmNvbnN0IHByaW1hcnlleHAgPSBmdW5jdGlvbihscywgdikge1xuICAgIC8qIHByaW1hcnlleHAgLT4gTkFNRSB8ICcoJyBleHByICcpJyAqL1xuICAgIHN3aXRjaCAobHMudC50b2tlbikge1xuICAgICAgICBjYXNlIDQwIC8qICgnKCcpLmNoYXJDb2RlQXQoMCkgKi86IHtcbiAgICAgICAgICAgIGxldCBsaW5lID0gbHMubGluZW51bWJlcjtcbiAgICAgICAgICAgIGxsZXgubHVhWF9uZXh0KGxzKTtcbiAgICAgICAgICAgIGV4cHIobHMsIHYpO1xuICAgICAgICAgICAgY2hlY2tfbWF0Y2gobHMsIDQxIC8qICgnKScpLmNoYXJDb2RlQXQoMCkgKi8sIDQwIC8qICgnKCcpLmNoYXJDb2RlQXQoMCkgKi8sIGxpbmUpO1xuICAgICAgICAgICAgbHVhS19kaXNjaGFyZ2V2YXJzKGxzLmZzLCB2KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFIuVEtfTkFNRToge1xuICAgICAgICAgICAgc2luZ2xldmFyKGxzLCB2KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICBsbGV4Lmx1YVhfc3ludGF4ZXJyb3IobHMsIHRvX2x1YXN0cmluZyhcInVuZXhwZWN0ZWQgc3ltYm9sXCIsIHRydWUpKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbmNvbnN0IHN1ZmZpeGVkZXhwID0gZnVuY3Rpb24obHMsIHYpIHtcbiAgICAvKiBzdWZmaXhlZGV4cCAtPlxuICAgICAgIHByaW1hcnlleHAgeyAnLicgTkFNRSB8ICdbJyBleHAgJ10nIHwgJzonIE5BTUUgZnVuY2FyZ3MgfCBmdW5jYXJncyB9ICovXG4gICAgbGV0IGZzID0gbHMuZnM7XG4gICAgbGV0IGxpbmUgPSBscy5saW5lbnVtYmVyO1xuICAgIHByaW1hcnlleHAobHMsIHYpO1xuICAgIGZvciAoOzspIHtcbiAgICAgICAgc3dpdGNoIChscy50LnRva2VuKSB7XG4gICAgICAgICAgICBjYXNlIDQ2IC8qICgnLicpLmNoYXJDb2RlQXQoMCkgKi86IHsgIC8qIGZpZWxkc2VsICovXG4gICAgICAgICAgICAgICAgZmllbGRzZWwobHMsIHYpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSA5MSAvKiAoJ1snKS5jaGFyQ29kZUF0KDApICovOiB7ICAvKiAnWycgZXhwMSAnXScgKi9cbiAgICAgICAgICAgICAgICBsZXQga2V5ID0gbmV3IGV4cGRlc2MoKTtcbiAgICAgICAgICAgICAgICBsdWFLX2V4cDJhbnlyZWd1cChmcywgdik7XG4gICAgICAgICAgICAgICAgeWluZGV4KGxzLCBrZXkpO1xuICAgICAgICAgICAgICAgIGx1YUtfaW5kZXhlZChmcywgdiwga2V5KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgNTggLyogKCc6JykuY2hhckNvZGVBdCgwKSAqLzogeyAgLyogJzonIE5BTUUgZnVuY2FyZ3MgKi9cbiAgICAgICAgICAgICAgICBsZXQga2V5ID0gbmV3IGV4cGRlc2MoKTtcbiAgICAgICAgICAgICAgICBsbGV4Lmx1YVhfbmV4dChscyk7XG4gICAgICAgICAgICAgICAgY2hlY2tuYW1lKGxzLCBrZXkpO1xuICAgICAgICAgICAgICAgIGx1YUtfc2VsZihmcywgdiwga2V5KTtcbiAgICAgICAgICAgICAgICBmdW5jYXJncyhscywgdiwgbGluZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIDQwIC8qICgnKCcpLmNoYXJDb2RlQXQoMCkgKi86IGNhc2UgUi5US19TVFJJTkc6IGNhc2UgMTIzIC8qICgneycpLmNoYXJDb2RlQXQoMCkgKi86IHsgIC8qIGZ1bmNhcmdzICovXG4gICAgICAgICAgICAgICAgbHVhS19leHAybmV4dHJlZyhmcywgdik7XG4gICAgICAgICAgICAgICAgZnVuY2FyZ3MobHMsIHYsIGxpbmUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVmYXVsdDogcmV0dXJuO1xuICAgICAgICB9XG4gICAgfVxufTtcblxuY29uc3Qgc2ltcGxlZXhwID0gZnVuY3Rpb24obHMsIHYpIHtcbiAgICAvKiBzaW1wbGVleHAgLT4gRkxUIHwgSU5UIHwgU1RSSU5HIHwgTklMIHwgVFJVRSB8IEZBTFNFIHwgLi4uIHxcbiAgICAgICBjb25zdHJ1Y3RvciB8IEZVTkNUSU9OIGJvZHkgfCBzdWZmaXhlZGV4cCAqL1xuICAgIHN3aXRjaCAobHMudC50b2tlbikge1xuICAgICAgICBjYXNlIFIuVEtfRkxUOiB7XG4gICAgICAgICAgICBpbml0X2V4cCh2LCBleHBraW5kLlZLRkxULCAwKTtcbiAgICAgICAgICAgIHYudS5udmFsID0gbHMudC5zZW1pbmZvLnI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFIuVEtfSU5UOiB7XG4gICAgICAgICAgICBpbml0X2V4cCh2LCBleHBraW5kLlZLSU5ULCAwKTtcbiAgICAgICAgICAgIHYudS5pdmFsID0gbHMudC5zZW1pbmZvLmk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFIuVEtfU1RSSU5HOiB7XG4gICAgICAgICAgICBjb2Rlc3RyaW5nKGxzLCB2LCBscy50LnNlbWluZm8udHMpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBSLlRLX05JTDoge1xuICAgICAgICAgICAgaW5pdF9leHAodiwgZXhwa2luZC5WTklMLCAwKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgUi5US19UUlVFOiB7XG4gICAgICAgICAgICBpbml0X2V4cCh2LCBleHBraW5kLlZUUlVFLCAwKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgUi5US19GQUxTRToge1xuICAgICAgICAgICAgaW5pdF9leHAodiwgZXhwa2luZC5WRkFMU0UsIDApO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBSLlRLX0RPVFM6IHsgIC8qIHZhcmFyZyAqL1xuICAgICAgICAgICAgbGV0IGZzID0gbHMuZnM7XG4gICAgICAgICAgICBjaGVja19jb25kaXRpb24obHMsIGZzLmYuaXNfdmFyYXJnLCB0b19sdWFzdHJpbmcoXCJjYW5ub3QgdXNlICcuLi4nIG91dHNpZGUgYSB2YXJhcmcgZnVuY3Rpb25cIiwgdHJ1ZSkpO1xuICAgICAgICAgICAgaW5pdF9leHAodiwgZXhwa2luZC5WVkFSQVJHLCBsdWFLX2NvZGVBQkMoZnMsIE9QX1ZBUkFSRywgMCwgMSwgMCkpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAxMjMgLyogKCd7JykuY2hhckNvZGVBdCgwKSAqLzogeyAgLyogY29uc3RydWN0b3IgKi9cbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKGxzLCB2KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFIuVEtfRlVOQ1RJT046IHtcbiAgICAgICAgICAgIGxsZXgubHVhWF9uZXh0KGxzKTtcbiAgICAgICAgICAgIGJvZHkobHMsIHYsIDAsIGxzLmxpbmVudW1iZXIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgIHN1ZmZpeGVkZXhwKGxzLCB2KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBsbGV4Lmx1YVhfbmV4dChscyk7XG59O1xuXG5jb25zdCBnZXR1bm9wciA9IGZ1bmN0aW9uKG9wKSB7XG4gICAgc3dpdGNoIChvcCkge1xuICAgICAgICBjYXNlIFIuVEtfTk9UOiByZXR1cm4gT1BSX05PVDtcbiAgICAgICAgY2FzZSA0NSAvKiAoJy0nKS5jaGFyQ29kZUF0KDApICovOiByZXR1cm4gT1BSX01JTlVTO1xuICAgICAgICBjYXNlIDEyNiAvKiAoJ34nKS5jaGFyQ29kZUF0KDApICovOiByZXR1cm4gT1BSX0JOT1Q7XG4gICAgICAgIGNhc2UgMzUgLyogKCcjJykuY2hhckNvZGVBdCgwKSAqLzogcmV0dXJuIE9QUl9MRU47XG4gICAgICAgIGRlZmF1bHQ6IHJldHVybiBPUFJfTk9VTk9QUjtcbiAgICB9XG59O1xuXG5jb25zdCBnZXRiaW5vcHIgPSBmdW5jdGlvbihvcCkge1xuICAgIHN3aXRjaCAob3ApIHtcbiAgICAgICAgY2FzZSA0MyAvKiAoJysnKS5jaGFyQ29kZUF0KDApICovOiByZXR1cm4gT1BSX0FERDtcbiAgICAgICAgY2FzZSA0NSAvKiAoJy0nKS5jaGFyQ29kZUF0KDApICovOiByZXR1cm4gT1BSX1NVQjtcbiAgICAgICAgY2FzZSA0MiAvKiAoJyonKS5jaGFyQ29kZUF0KDApICovOiByZXR1cm4gT1BSX01VTDtcbiAgICAgICAgY2FzZSAzNyAvKiAoJyUnKS5jaGFyQ29kZUF0KDApICovOiByZXR1cm4gT1BSX01PRDtcbiAgICAgICAgY2FzZSA5NCAvKiAoJ14nKS5jaGFyQ29kZUF0KDApICovOiByZXR1cm4gT1BSX1BPVztcbiAgICAgICAgY2FzZSA0NyAvKiAoJy8nKS5jaGFyQ29kZUF0KDApICovOiByZXR1cm4gT1BSX0RJVjtcbiAgICAgICAgY2FzZSBSLlRLX0lESVY6ICAgcmV0dXJuIE9QUl9JRElWO1xuICAgICAgICBjYXNlIDM4IC8qICgnJicpLmNoYXJDb2RlQXQoMCkgKi86IHJldHVybiBPUFJfQkFORDtcbiAgICAgICAgY2FzZSAxMjQgLyogKCd8JykuY2hhckNvZGVBdCgwKSAqLzogcmV0dXJuIE9QUl9CT1I7XG4gICAgICAgIGNhc2UgMTI2IC8qICgnficpLmNoYXJDb2RlQXQoMCkgKi86IHJldHVybiBPUFJfQlhPUjtcbiAgICAgICAgY2FzZSBSLlRLX1NITDogICAgcmV0dXJuIE9QUl9TSEw7XG4gICAgICAgIGNhc2UgUi5US19TSFI6ICAgIHJldHVybiBPUFJfU0hSO1xuICAgICAgICBjYXNlIFIuVEtfQ09OQ0FUOiByZXR1cm4gT1BSX0NPTkNBVDtcbiAgICAgICAgY2FzZSBSLlRLX05FOiAgICAgcmV0dXJuIE9QUl9ORTtcbiAgICAgICAgY2FzZSBSLlRLX0VROiAgICAgcmV0dXJuIE9QUl9FUTtcbiAgICAgICAgY2FzZSA2MCAvKiAoJzwnKS5jaGFyQ29kZUF0KDApICovOiByZXR1cm4gT1BSX0xUO1xuICAgICAgICBjYXNlIFIuVEtfTEU6ICAgICByZXR1cm4gT1BSX0xFO1xuICAgICAgICBjYXNlIDYyIC8qICgnPicpLmNoYXJDb2RlQXQoMCkgKi86IHJldHVybiBPUFJfR1Q7XG4gICAgICAgIGNhc2UgUi5US19HRTogICAgIHJldHVybiBPUFJfR0U7XG4gICAgICAgIGNhc2UgUi5US19BTkQ6ICAgIHJldHVybiBPUFJfQU5EO1xuICAgICAgICBjYXNlIFIuVEtfT1I6ICAgICByZXR1cm4gT1BSX09SO1xuICAgICAgICBkZWZhdWx0OiAgICAgICAgICByZXR1cm4gT1BSX05PQklOT1BSO1xuICAgIH1cbn07XG5cbmNvbnN0IHByaW9yaXR5ID0gWyAgLyogT1JERVIgT1BSICovXG4gICAge2xlZnQ6IDEwLCByaWdodDogMTB9LCB7bGVmdDogMTAsIHJpZ2h0OiAxMH0sICAgICAvKiAnKycgJy0nICovXG4gICAge2xlZnQ6IDExLCByaWdodDogMTF9LCB7bGVmdDogMTEsIHJpZ2h0OiAxMX0sICAgICAvKiAnKicgJyUnICovXG4gICAge2xlZnQ6IDE0LCByaWdodDogMTN9LCAgICAgICAgICAgICAgIC8qICdeJyAocmlnaHQgYXNzb2NpYXRpdmUpICovXG4gICAge2xlZnQ6IDExLCByaWdodDogMTF9LCB7bGVmdDogMTEsIHJpZ2h0OiAxMX0sICAgICAvKiAnLycgJy8vJyAqL1xuICAgIHtsZWZ0OiA2LCByaWdodDogNn0sIHtsZWZ0OiA0LCByaWdodDogNH0sIHtsZWZ0OiA1LCByaWdodDogNX0sIC8qICcmJyAnfCcgJ34nICovXG4gICAge2xlZnQ6IDcsIHJpZ2h0OiA3fSwge2xlZnQ6IDcsIHJpZ2h0OiA3fSwgICAgICAgICAvKiAnPDwnICc+PicgKi9cbiAgICB7bGVmdDogOSwgcmlnaHQ6IDh9LCAgICAgICAgICAgICAgICAgLyogJy4uJyAocmlnaHQgYXNzb2NpYXRpdmUpICovXG4gICAge2xlZnQ6IDMsIHJpZ2h0OiAzfSwge2xlZnQ6IDMsIHJpZ2h0OiAzfSwge2xlZnQ6IDMsIHJpZ2h0OiAzfSwgLyogPT0sIDwsIDw9ICovXG4gICAge2xlZnQ6IDMsIHJpZ2h0OiAzfSwge2xlZnQ6IDMsIHJpZ2h0OiAzfSwge2xlZnQ6IDMsIHJpZ2h0OiAzfSwgLyogfj0sID4sID49ICovXG4gICAge2xlZnQ6IDIsIHJpZ2h0OiAyfSwge2xlZnQ6IDEsIHJpZ2h0OiAxfSAgICAgICAgICAvKiBhbmQsIG9yICovXG5dO1xuXG5jb25zdCBVTkFSWV9QUklPUklUWSA9IDEyO1xuXG4vKlxuKiogc3ViZXhwciAtPiAoc2ltcGxlZXhwIHwgdW5vcCBzdWJleHByKSB7IGJpbm9wIHN1YmV4cHIgfVxuKiogd2hlcmUgJ2Jpbm9wJyBpcyBhbnkgYmluYXJ5IG9wZXJhdG9yIHdpdGggYSBwcmlvcml0eSBoaWdoZXIgdGhhbiAnbGltaXQnXG4qL1xuY29uc3Qgc3ViZXhwciA9IGZ1bmN0aW9uKGxzLCB2LCBsaW1pdCkge1xuICAgIGVudGVybGV2ZWwobHMpO1xuICAgIGxldCB1b3AgPSBnZXR1bm9wcihscy50LnRva2VuKTtcbiAgICBpZiAodW9wICE9PSBPUFJfTk9VTk9QUikge1xuICAgICAgICBsZXQgbGluZSA9IGxzLmxpbmVudW1iZXI7XG4gICAgICAgIGxsZXgubHVhWF9uZXh0KGxzKTtcbiAgICAgICAgc3ViZXhwcihscywgdiwgVU5BUllfUFJJT1JJVFkpO1xuICAgICAgICBsdWFLX3ByZWZpeChscy5mcywgdW9wLCB2LCBsaW5lKTtcbiAgICB9IGVsc2VcbiAgICAgICAgc2ltcGxlZXhwKGxzLCB2KTtcbiAgICAvKiBleHBhbmQgd2hpbGUgb3BlcmF0b3JzIGhhdmUgcHJpb3JpdGllcyBoaWdoZXIgdGhhbiAnbGltaXQnICovXG4gICAgbGV0IG9wID0gZ2V0Ymlub3ByKGxzLnQudG9rZW4pO1xuICAgIHdoaWxlIChvcCAhPT0gT1BSX05PQklOT1BSICYmIHByaW9yaXR5W29wXS5sZWZ0ID4gbGltaXQpIHtcbiAgICAgICAgbGV0IHYyID0gbmV3IGV4cGRlc2MoKTtcbiAgICAgICAgbGV0IGxpbmUgPSBscy5saW5lbnVtYmVyO1xuICAgICAgICBsbGV4Lmx1YVhfbmV4dChscyk7XG4gICAgICAgIGx1YUtfaW5maXgobHMuZnMsIG9wLCB2KTtcbiAgICAgICAgLyogcmVhZCBzdWItZXhwcmVzc2lvbiB3aXRoIGhpZ2hlciBwcmlvcml0eSAqL1xuICAgICAgICBsZXQgbmV4dG9wID0gc3ViZXhwcihscywgdjIsIHByaW9yaXR5W29wXS5yaWdodCk7XG4gICAgICAgIGx1YUtfcG9zZml4KGxzLmZzLCBvcCwgdiwgdjIsIGxpbmUpO1xuICAgICAgICBvcCA9IG5leHRvcDtcbiAgICB9XG4gICAgbGVhdmVsZXZlbChscyk7XG4gICAgcmV0dXJuIG9wOyAgLyogcmV0dXJuIGZpcnN0IHVudHJlYXRlZCBvcGVyYXRvciAqL1xufTtcblxuY29uc3QgZXhwciA9IGZ1bmN0aW9uKGxzLCB2KSB7XG4gICAgc3ViZXhwcihscywgdiwgMCk7XG59O1xuXG4vKiB9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuXG5cbi8qXG4qKiB7PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuKiogUnVsZXMgZm9yIFN0YXRlbWVudHNcbioqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4qL1xuXG5jb25zdCBibG9jayA9IGZ1bmN0aW9uKGxzKSB7XG4gICAgLyogYmxvY2sgLT4gc3RhdGxpc3QgKi9cbiAgICBsZXQgZnMgPSBscy5mcztcbiAgICBsZXQgYmwgPSBuZXcgQmxvY2tDbnQoKTtcbiAgICBlbnRlcmJsb2NrKGZzLCBibCwgMCk7XG4gICAgc3RhdGxpc3QobHMpO1xuICAgIGxlYXZlYmxvY2soZnMpO1xufTtcblxuLypcbioqIHN0cnVjdHVyZSB0byBjaGFpbiBhbGwgdmFyaWFibGVzIGluIHRoZSBsZWZ0LWhhbmQgc2lkZSBvZiBhblxuKiogYXNzaWdubWVudFxuKi9cbmNsYXNzIExIU19hc3NpZ24ge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnByZXYgPSBudWxsO1xuICAgICAgICB0aGlzLnYgPSBuZXcgZXhwZGVzYygpOyAgLyogdmFyaWFibGUgKGdsb2JhbCwgbG9jYWwsIHVwdmFsdWUsIG9yIGluZGV4ZWQpICovXG4gICAgfVxufVxuXG4vKlxuKiogY2hlY2sgd2hldGhlciwgaW4gYW4gYXNzaWdubWVudCB0byBhbiB1cHZhbHVlL2xvY2FsIHZhcmlhYmxlLCB0aGVcbioqIHVwdmFsdWUvbG9jYWwgdmFyaWFibGUgaXMgYmVnaW4gdXNlZCBpbiBhIHByZXZpb3VzIGFzc2lnbm1lbnQgdG8gYVxuKiogdGFibGUuIElmIHNvLCBzYXZlIG9yaWdpbmFsIHVwdmFsdWUvbG9jYWwgdmFsdWUgaW4gYSBzYWZlIHBsYWNlIGFuZFxuKiogdXNlIHRoaXMgc2FmZSBjb3B5IGluIHRoZSBwcmV2aW91cyBhc3NpZ25tZW50LlxuKi9cbmNvbnN0IGNoZWNrX2NvbmZsaWN0ID0gZnVuY3Rpb24obHMsIGxoLCB2KSB7XG4gICAgbGV0IGZzID0gbHMuZnM7XG4gICAgbGV0IGV4dHJhID0gZnMuZnJlZXJlZzsgIC8qIGV2ZW50dWFsIHBvc2l0aW9uIHRvIHNhdmUgbG9jYWwgdmFyaWFibGUgKi9cbiAgICBsZXQgY29uZmxpY3QgPSBmYWxzZTtcbiAgICBmb3IgKDsgbGg7IGxoID0gbGgucHJldikgeyAgLyogY2hlY2sgYWxsIHByZXZpb3VzIGFzc2lnbm1lbnRzICovXG4gICAgICAgIGlmIChsaC52LmsgPT09IGV4cGtpbmQuVklOREVYRUQpIHsgIC8qIGFzc2lnbmluZyB0byBhIHRhYmxlPyAqL1xuICAgICAgICAgICAgLyogdGFibGUgaXMgdGhlIHVwdmFsdWUvbG9jYWwgYmVpbmcgYXNzaWduZWQgbm93PyAqL1xuICAgICAgICAgICAgaWYgKGxoLnYudS5pbmQudnQgPT09IHYuayAmJiBsaC52LnUuaW5kLnQgPT09IHYudS5pbmZvKSB7XG4gICAgICAgICAgICAgICAgY29uZmxpY3QgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGxoLnYudS5pbmQudnQgPSBleHBraW5kLlZMT0NBTDtcbiAgICAgICAgICAgICAgICBsaC52LnUuaW5kLnQgPSBleHRyYTsgIC8qIHByZXZpb3VzIGFzc2lnbm1lbnQgd2lsbCB1c2Ugc2FmZSBjb3B5ICovXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKiBpbmRleCBpcyB0aGUgbG9jYWwgYmVpbmcgYXNzaWduZWQ/IChpbmRleCBjYW5ub3QgYmUgdXB2YWx1ZSkgKi9cbiAgICAgICAgICAgIGlmICh2LmsgPT09IGV4cGtpbmQuVkxPQ0FMICYmIGxoLnYudS5pbmQuaWR4ID09PSB2LnUuaW5mbykge1xuICAgICAgICAgICAgICAgIGNvbmZsaWN0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBsaC52LnUuaW5kLmlkeCA9IGV4dHJhOyAgLyogcHJldmlvdXMgYXNzaWdubWVudCB3aWxsIHVzZSBzYWZlIGNvcHkgKi9cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoY29uZmxpY3QpIHtcbiAgICAgICAgLyogY29weSB1cHZhbHVlL2xvY2FsIHZhbHVlIHRvIGEgdGVtcG9yYXJ5IChpbiBwb3NpdGlvbiAnZXh0cmEnKSAqL1xuICAgICAgICBsZXQgb3AgPSB2LmsgPT09IGV4cGtpbmQuVkxPQ0FMID8gT1BfTU9WRSA6IE9QX0dFVFVQVkFMO1xuICAgICAgICBsdWFLX2NvZGVBQkMoZnMsIG9wLCBleHRyYSwgdi51LmluZm8sIDApO1xuICAgICAgICBsdWFLX3Jlc2VydmVyZWdzKGZzLCAxKTtcbiAgICB9XG59O1xuXG5jb25zdCBhc3NpZ25tZW50ID0gZnVuY3Rpb24obHMsIGxoLCBudmFycykge1xuICAgIGxldCBlID0gbmV3IGV4cGRlc2MoKTtcbiAgICBjaGVja19jb25kaXRpb24obHMsIHZraXN2YXIobGgudi5rKSwgdG9fbHVhc3RyaW5nKFwic3ludGF4IGVycm9yXCIsIHRydWUpKTtcbiAgICBpZiAodGVzdG5leHQobHMsIDQ0IC8qICgnLCcpLmNoYXJDb2RlQXQoMCkgKi8pKSB7ICAvKiBhc3NpZ25tZW50IC0+ICcsJyBzdWZmaXhlZGV4cCBhc3NpZ25tZW50ICovXG4gICAgICAgIGxldCBudiA9IG5ldyBMSFNfYXNzaWduKCk7XG4gICAgICAgIG52LnByZXYgPSBsaDtcbiAgICAgICAgc3VmZml4ZWRleHAobHMsIG52LnYpO1xuICAgICAgICBpZiAobnYudi5rICE9PSBleHBraW5kLlZJTkRFWEVEKVxuICAgICAgICAgICAgY2hlY2tfY29uZmxpY3QobHMsIGxoLCBudi52KTtcbiAgICAgICAgY2hlY2tsaW1pdChscy5mcywgbnZhcnMgKyBscy5MLm5DY2FsbHMsIExVQUlfTUFYQ0NBTExTLCB0b19sdWFzdHJpbmcoXCJKUyBsZXZlbHNcIiwgdHJ1ZSkpO1xuICAgICAgICBhc3NpZ25tZW50KGxzLCBudiwgbnZhcnMgKyAxKTtcbiAgICB9IGVsc2UgeyAgLyogYXNzaWdubWVudCAtPiAnPScgZXhwbGlzdCAqL1xuICAgICAgICBjaGVja25leHQobHMsIDYxIC8qICgnPScpLmNoYXJDb2RlQXQoMCkgKi8pO1xuICAgICAgICBsZXQgbmV4cHMgPSBleHBsaXN0KGxzLCBlKTtcbiAgICAgICAgaWYgKG5leHBzICE9PSBudmFycylcbiAgICAgICAgICAgIGFkanVzdF9hc3NpZ24obHMsIG52YXJzLCBuZXhwcywgZSk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbHVhS19zZXRvbmVyZXQobHMuZnMsIGUpOyAgLyogY2xvc2UgbGFzdCBleHByZXNzaW9uICovXG4gICAgICAgICAgICBsdWFLX3N0b3JldmFyKGxzLmZzLCBsaC52LCBlKTtcbiAgICAgICAgICAgIHJldHVybjsgIC8qIGF2b2lkIGRlZmF1bHQgKi9cbiAgICAgICAgfVxuICAgIH1cbiAgICBpbml0X2V4cChlLCBleHBraW5kLlZOT05SRUxPQywgbHMuZnMuZnJlZXJlZy0xKTsgIC8qIGRlZmF1bHQgYXNzaWdubWVudCAqL1xuICAgIGx1YUtfc3RvcmV2YXIobHMuZnMsIGxoLnYsIGUpO1xufTtcblxuY29uc3QgY29uZCA9IGZ1bmN0aW9uKGxzKSB7XG4gICAgLyogY29uZCAtPiBleHAgKi9cbiAgICBsZXQgdiA9IG5ldyBleHBkZXNjKCk7XG4gICAgZXhwcihscywgdik7ICAvKiByZWFkIGNvbmRpdGlvbiAqL1xuICAgIGlmICh2LmsgPT09IGV4cGtpbmQuVk5JTCkgdi5rID0gZXhwa2luZC5WRkFMU0U7ICAvKiAnZmFsc2VzJyBhcmUgYWxsIGVxdWFsIGhlcmUgKi9cbiAgICBsdWFLX2dvaWZ0cnVlKGxzLmZzLCB2KTtcbiAgICByZXR1cm4gdi5mO1xufTtcblxuY29uc3QgZ290b3N0YXQgPSBmdW5jdGlvbihscywgcGMpIHtcbiAgICBsZXQgbGluZSA9IGxzLmxpbmVudW1iZXI7XG4gICAgbGV0IGxhYmVsO1xuICAgIGlmICh0ZXN0bmV4dChscywgUi5US19HT1RPKSlcbiAgICAgICAgbGFiZWwgPSBzdHJfY2hlY2tuYW1lKGxzKTtcbiAgICBlbHNlIHtcbiAgICAgICAgbGxleC5sdWFYX25leHQobHMpOyAgLyogc2tpcCBicmVhayAqL1xuICAgICAgICBsYWJlbCA9IGx1YVNfbmV3bGl0ZXJhbChscy5MLCBcImJyZWFrXCIpO1xuICAgIH1cbiAgICBsZXQgZyA9IG5ld2xhYmVsZW50cnkobHMsIGxzLmR5ZC5ndCwgbGFiZWwsIGxpbmUsIHBjKTtcbiAgICBmaW5kbGFiZWwobHMsIGcpOyAgLyogY2xvc2UgaXQgaWYgbGFiZWwgYWxyZWFkeSBkZWZpbmVkICovXG59O1xuXG4vKiBjaGVjayBmb3IgcmVwZWF0ZWQgbGFiZWxzIG9uIHRoZSBzYW1lIGJsb2NrICovXG5jb25zdCBjaGVja3JlcGVhdGVkID0gZnVuY3Rpb24oZnMsIGxsLCBsYWJlbCkge1xuICAgIGZvciAobGV0IGkgPSBmcy5ibC5maXJzdGxhYmVsOyBpIDwgbGwubjsgaSsrKSB7XG4gICAgICAgIGlmIChlcXN0cihsYWJlbCwgbGwuYXJyW2ldLm5hbWUpKSB7XG4gICAgICAgICAgICBsZXQgbXNnID0gbG9iamVjdC5sdWFPX3B1c2hmc3RyaW5nKGZzLmxzLkwsXG4gICAgICAgICAgICAgICAgdG9fbHVhc3RyaW5nKFwibGFiZWwgJyVzJyBhbHJlYWR5IGRlZmluZWQgb24gbGluZSAlZFwiLCB0cnVlKSxcbiAgICAgICAgICAgICAgICBsYWJlbC5nZXRzdHIoKSwgbGwuYXJyW2ldLmxpbmUpO1xuICAgICAgICAgICAgc2VtZXJyb3IoZnMubHMsIG1zZyk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG4vKiBza2lwIG5vLW9wIHN0YXRlbWVudHMgKi9cbmNvbnN0IHNraXBub29wc3RhdCA9IGZ1bmN0aW9uKGxzKSB7XG4gICAgd2hpbGUgKGxzLnQudG9rZW4gPT09IDU5IC8qICgnOycpLmNoYXJDb2RlQXQoMCkgKi8gfHwgbHMudC50b2tlbiA9PT0gUi5US19EQkNPTE9OKVxuICAgICAgICBzdGF0ZW1lbnQobHMpO1xufTtcblxuY29uc3QgbGFiZWxzdGF0ID0gZnVuY3Rpb24obHMsIGxhYmVsLCBsaW5lKSB7XG4gICAgLyogbGFiZWwgLT4gJzo6JyBOQU1FICc6OicgKi9cbiAgICBsZXQgZnMgPSBscy5mcztcbiAgICBsZXQgbGwgPSBscy5keWQubGFiZWw7XG4gICAgbGV0IGw7ICAvKiBpbmRleCBvZiBuZXcgbGFiZWwgYmVpbmcgY3JlYXRlZCAqL1xuICAgIGNoZWNrcmVwZWF0ZWQoZnMsIGxsLCBsYWJlbCk7ICAvKiBjaGVjayBmb3IgcmVwZWF0ZWQgbGFiZWxzICovXG4gICAgY2hlY2tuZXh0KGxzLCBSLlRLX0RCQ09MT04pOyAgLyogc2tpcCBkb3VibGUgY29sb24gKi9cbiAgICAvKiBjcmVhdGUgbmV3IGVudHJ5IGZvciB0aGlzIGxhYmVsICovXG4gICAgbCA9IG5ld2xhYmVsZW50cnkobHMsIGxsLCBsYWJlbCwgbGluZSwgbHVhS19nZXRsYWJlbChmcykpO1xuICAgIHNraXBub29wc3RhdChscyk7ICAvKiBza2lwIG90aGVyIG5vLW9wIHN0YXRlbWVudHMgKi9cbiAgICBpZiAoYmxvY2tfZm9sbG93KGxzLCAwKSkgeyAgLyogbGFiZWwgaXMgbGFzdCBuby1vcCBzdGF0ZW1lbnQgaW4gdGhlIGJsb2NrPyAqL1xuICAgICAgICAvKiBhc3N1bWUgdGhhdCBsb2NhbHMgYXJlIGFscmVhZHkgb3V0IG9mIHNjb3BlICovXG4gICAgICAgIGxsLmFycltsXS5uYWN0dmFyID0gZnMuYmwubmFjdHZhcjtcbiAgICB9XG4gICAgZmluZGdvdG9zKGxzLCBsbC5hcnJbbF0pO1xufTtcblxuY29uc3Qgd2hpbGVzdGF0ID0gZnVuY3Rpb24obHMsIGxpbmUpIHtcbiAgICAvKiB3aGlsZXN0YXQgLT4gV0hJTEUgY29uZCBETyBibG9jayBFTkQgKi9cbiAgICBsZXQgZnMgPSBscy5mcztcbiAgICBsZXQgYmwgPSBuZXcgQmxvY2tDbnQoKTtcbiAgICBsbGV4Lmx1YVhfbmV4dChscyk7ICAvKiBza2lwIFdISUxFICovXG4gICAgbGV0IHdoaWxlaW5pdCA9IGx1YUtfZ2V0bGFiZWwoZnMpO1xuICAgIGxldCBjb25kZXhpdCA9IGNvbmQobHMpO1xuICAgIGVudGVyYmxvY2soZnMsIGJsLCAxKTtcbiAgICBjaGVja25leHQobHMsIFIuVEtfRE8pO1xuICAgIGJsb2NrKGxzKTtcbiAgICBsdWFLX2p1bXB0byhmcywgd2hpbGVpbml0KTtcbiAgICBjaGVja19tYXRjaChscywgUi5US19FTkQsIFIuVEtfV0hJTEUsIGxpbmUpO1xuICAgIGxlYXZlYmxvY2soZnMpO1xuICAgIGx1YUtfcGF0Y2h0b2hlcmUoZnMsIGNvbmRleGl0KTsgIC8qIGZhbHNlIGNvbmRpdGlvbnMgZmluaXNoIHRoZSBsb29wICovXG59O1xuXG5jb25zdCByZXBlYXRzdGF0ID0gZnVuY3Rpb24obHMsIGxpbmUpIHtcbiAgICAvKiByZXBlYXRzdGF0IC0+IFJFUEVBVCBibG9jayBVTlRJTCBjb25kICovXG4gICAgbGV0IGZzID0gbHMuZnM7XG4gICAgbGV0IHJlcGVhdF9pbml0ID0gbHVhS19nZXRsYWJlbChmcyk7XG4gICAgbGV0IGJsMSA9IG5ldyBCbG9ja0NudCgpO1xuICAgIGxldCBibDIgPSBuZXcgQmxvY2tDbnQoKTtcbiAgICBlbnRlcmJsb2NrKGZzLCBibDEsIDEpOyAgLyogbG9vcCBibG9jayAqL1xuICAgIGVudGVyYmxvY2soZnMsIGJsMiwgMCk7ICAvKiBzY29wZSBibG9jayAqL1xuICAgIGxsZXgubHVhWF9uZXh0KGxzKTsgIC8qIHNraXAgUkVQRUFUICovXG4gICAgc3RhdGxpc3QobHMpO1xuICAgIGNoZWNrX21hdGNoKGxzLCBSLlRLX1VOVElMLCBSLlRLX1JFUEVBVCwgbGluZSk7XG4gICAgbGV0IGNvbmRleGl0ID0gY29uZChscyk7ICAvKiByZWFkIGNvbmRpdGlvbiAoaW5zaWRlIHNjb3BlIGJsb2NrKSAqL1xuICAgIGlmIChibDIudXB2YWwpICAvKiB1cHZhbHVlcz8gKi9cbiAgICAgICAgbHVhS19wYXRjaGNsb3NlKGZzLCBjb25kZXhpdCwgYmwyLm5hY3R2YXIpO1xuICAgIGxlYXZlYmxvY2soZnMpOyAgLyogZmluaXNoIHNjb3BlICovXG4gICAgbHVhS19wYXRjaGxpc3QoZnMsIGNvbmRleGl0LCByZXBlYXRfaW5pdCk7ICAvKiBjbG9zZSB0aGUgbG9vcCAqL1xuICAgIGxlYXZlYmxvY2soZnMpOyAgLyogZmluaXNoIGxvb3AgKi9cbn07XG5cbmNvbnN0IGV4cDEgPSBmdW5jdGlvbihscykge1xuICAgIGxldCBlID0gbmV3IGV4cGRlc2MoKTtcbiAgICBleHByKGxzLCBlKTtcbiAgICBsdWFLX2V4cDJuZXh0cmVnKGxzLmZzLCBlKTtcbiAgICBsdWFfYXNzZXJ0KGUuayA9PT0gZXhwa2luZC5WTk9OUkVMT0MpO1xuICAgIGxldCByZWcgPSBlLnUuaW5mbztcbiAgICByZXR1cm4gcmVnO1xufTtcblxuY29uc3QgZm9yYm9keSA9IGZ1bmN0aW9uKGxzLCBiYXNlLCBsaW5lLCBudmFycywgaXNudW0pIHtcbiAgICAvKiBmb3Jib2R5IC0+IERPIGJsb2NrICovXG4gICAgbGV0IGJsID0gbmV3IEJsb2NrQ250KCk7XG4gICAgbGV0IGZzID0gbHMuZnM7XG4gICAgbGV0IGVuZGZvcjtcbiAgICBhZGp1c3Rsb2NhbHZhcnMobHMsIDMpOyAgLyogY29udHJvbCB2YXJpYWJsZXMgKi9cbiAgICBjaGVja25leHQobHMsIFIuVEtfRE8pO1xuICAgIGxldCBwcmVwID0gaXNudW0gPyBsdWFLX2NvZGVBc0J4KGZzLCBPUF9GT1JQUkVQLCBiYXNlLCBOT19KVU1QKSA6IGx1YUtfanVtcChmcyk7XG4gICAgZW50ZXJibG9jayhmcywgYmwsIDApOyAgLyogc2NvcGUgZm9yIGRlY2xhcmVkIHZhcmlhYmxlcyAqL1xuICAgIGFkanVzdGxvY2FsdmFycyhscywgbnZhcnMpO1xuICAgIGx1YUtfcmVzZXJ2ZXJlZ3MoZnMsIG52YXJzKTtcbiAgICBibG9jayhscyk7XG4gICAgbGVhdmVibG9jayhmcyk7ICAvKiBlbmQgb2Ygc2NvcGUgZm9yIGRlY2xhcmVkIHZhcmlhYmxlcyAqL1xuICAgIGx1YUtfcGF0Y2h0b2hlcmUoZnMsIHByZXApO1xuICAgIGlmIChpc251bSkgIC8qIGVuZCBvZiBzY29wZSBmb3IgZGVjbGFyZWQgdmFyaWFibGVzICovXG4gICAgICAgIGVuZGZvciA9IGx1YUtfY29kZUFzQngoZnMsIE9QX0ZPUkxPT1AsIGJhc2UsIE5PX0pVTVApO1xuICAgIGVsc2UgeyAgLyogZ2VuZXJpYyBmb3IgKi9cbiAgICAgICAgbHVhS19jb2RlQUJDKGZzLCBPUF9URk9SQ0FMTCwgYmFzZSwgMCwgbnZhcnMpO1xuICAgICAgICBsdWFLX2ZpeGxpbmUoZnMsIGxpbmUpO1xuICAgICAgICBlbmRmb3IgPSBsdWFLX2NvZGVBc0J4KGZzLCBPUF9URk9STE9PUCwgYmFzZSArIDIsIE5PX0pVTVApO1xuICAgIH1cbiAgICBsdWFLX3BhdGNobGlzdChmcywgZW5kZm9yLCBwcmVwICsgMSk7XG4gICAgbHVhS19maXhsaW5lKGZzLCBsaW5lKTtcbn07XG5cbmNvbnN0IGZvcm51bSA9IGZ1bmN0aW9uKGxzLCB2YXJuYW1lLCBsaW5lKSB7XG4gICAgLyogZm9ybnVtIC0+IE5BTUUgPSBleHAxLGV4cDFbLGV4cDFdIGZvcmJvZHkgKi9cbiAgICBsZXQgZnMgPSBscy5mcztcbiAgICBsZXQgYmFzZSA9IGZzLmZyZWVyZWc7XG4gICAgbmV3X2xvY2FsdmFybGl0ZXJhbChscywgXCIoZm9yIGluZGV4KVwiKTtcbiAgICBuZXdfbG9jYWx2YXJsaXRlcmFsKGxzLCBcIihmb3IgbGltaXQpXCIpO1xuICAgIG5ld19sb2NhbHZhcmxpdGVyYWwobHMsIFwiKGZvciBzdGVwKVwiKTtcbiAgICBuZXdfbG9jYWx2YXIobHMsIHZhcm5hbWUpO1xuICAgIGNoZWNrbmV4dChscywgNjEgLyogKCc9JykuY2hhckNvZGVBdCgwKSAqLyk7XG4gICAgZXhwMShscyk7ICAvKiBpbml0aWFsIHZhbHVlICovXG4gICAgY2hlY2tuZXh0KGxzLCA0NCAvKiAoJywnKS5jaGFyQ29kZUF0KDApICovKTtcbiAgICBleHAxKGxzKTsgIC8qIGxpbWl0ICovXG4gICAgaWYgKHRlc3RuZXh0KGxzLCA0NCAvKiAoJywnKS5jaGFyQ29kZUF0KDApICovKSlcbiAgICAgICAgZXhwMShscyk7ICAvKiBvcHRpb25hbCBzdGVwICovXG4gICAgZWxzZSB7ICAvKiBkZWZhdWx0IHN0ZXAgPSAxICovXG4gICAgICAgIGx1YUtfY29kZWsoZnMsIGZzLmZyZWVyZWcsIGx1YUtfaW50SyhmcywgMSkpO1xuICAgICAgICBsdWFLX3Jlc2VydmVyZWdzKGZzLCAxKTtcbiAgICB9XG4gICAgZm9yYm9keShscywgYmFzZSwgbGluZSwgMSwgMSk7XG59O1xuXG5jb25zdCBmb3JsaXN0ID0gZnVuY3Rpb24obHMsIGluZGV4bmFtZSkge1xuICAgIC8qIGZvcmxpc3QgLT4gTkFNRSB7LE5BTUV9IElOIGV4cGxpc3QgZm9yYm9keSAqL1xuICAgIGxldCBmcyA9IGxzLmZzO1xuICAgIGxldCBlID0gbmV3IGV4cGRlc2MoKTtcbiAgICBsZXQgbnZhcnMgPSA0OyAgLyogZ2VuLCBzdGF0ZSwgY29udHJvbCwgcGx1cyBhdCBsZWFzdCBvbmUgZGVjbGFyZWQgdmFyICovXG4gICAgbGV0IGJhc2UgPSBmcy5mcmVlcmVnO1xuICAgIC8qIGNyZWF0ZSBjb250cm9sIHZhcmlhYmxlcyAqL1xuICAgIG5ld19sb2NhbHZhcmxpdGVyYWwobHMsIFwiKGZvciBnZW5lcmF0b3IpXCIpO1xuICAgIG5ld19sb2NhbHZhcmxpdGVyYWwobHMsIFwiKGZvciBzdGF0ZSlcIik7XG4gICAgbmV3X2xvY2FsdmFybGl0ZXJhbChscywgXCIoZm9yIGNvbnRyb2wpXCIpO1xuICAgIC8qIGNyZWF0ZSBkZWNsYXJlZCB2YXJpYWJsZXMgKi9cbiAgICBuZXdfbG9jYWx2YXIobHMsIGluZGV4bmFtZSk7XG4gICAgd2hpbGUgKHRlc3RuZXh0KGxzLCA0NCAvKiAoJywnKS5jaGFyQ29kZUF0KDApICovKSkge1xuICAgICAgICBuZXdfbG9jYWx2YXIobHMsIHN0cl9jaGVja25hbWUobHMpKTtcbiAgICAgICAgbnZhcnMrKztcbiAgICB9XG4gICAgY2hlY2tuZXh0KGxzLCBSLlRLX0lOKTtcbiAgICBsZXQgbGluZSA9IGxzLmxpbmVudW1iZXI7XG4gICAgYWRqdXN0X2Fzc2lnbihscywgMywgZXhwbGlzdChscywgZSksIGUpO1xuICAgIGx1YUtfY2hlY2tzdGFjayhmcywgMyk7ICAvKiBleHRyYSBzcGFjZSB0byBjYWxsIGdlbmVyYXRvciAqL1xuICAgIGZvcmJvZHkobHMsIGJhc2UsIGxpbmUsIG52YXJzIC0gMywgMCk7XG59O1xuXG5jb25zdCBmb3JzdGF0ID0gZnVuY3Rpb24obHMsIGxpbmUpIHtcbiAgICAvKiBmb3JzdGF0IC0+IEZPUiAoZm9ybnVtIHwgZm9ybGlzdCkgRU5EICovXG4gICAgbGV0IGZzID0gbHMuZnM7XG4gICAgbGV0IGJsID0gbmV3IEJsb2NrQ250KCk7XG4gICAgZW50ZXJibG9jayhmcywgYmwsIDEpOyAgLyogc2NvcGUgZm9yIGxvb3AgYW5kIGNvbnRyb2wgdmFyaWFibGVzICovXG4gICAgbGxleC5sdWFYX25leHQobHMpOyAgLyogc2tpcCAnZm9yJyAqL1xuICAgIGxldCB2YXJuYW1lID0gc3RyX2NoZWNrbmFtZShscyk7ICAvKiBmaXJzdCB2YXJpYWJsZSBuYW1lICovXG4gICAgc3dpdGNoIChscy50LnRva2VuKSB7XG4gICAgICAgIGNhc2UgNjEgLyogKCc9JykuY2hhckNvZGVBdCgwKSAqLzogZm9ybnVtKGxzLCB2YXJuYW1lLCBsaW5lKTsgYnJlYWs7XG4gICAgICAgIGNhc2UgNDQgLyogKCcsJykuY2hhckNvZGVBdCgwKSAqLzogY2FzZSBSLlRLX0lOOiBmb3JsaXN0KGxzLCB2YXJuYW1lKTsgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6IGxsZXgubHVhWF9zeW50YXhlcnJvcihscywgdG9fbHVhc3RyaW5nKFwiJz0nIG9yICdpbicgZXhwZWN0ZWRcIiwgdHJ1ZSkpO1xuICAgIH1cbiAgICBjaGVja19tYXRjaChscywgUi5US19FTkQsIFIuVEtfRk9SLCBsaW5lKTtcbiAgICBsZWF2ZWJsb2NrKGZzKTsgIC8qIGxvb3Agc2NvcGUgKCdicmVhaycganVtcHMgdG8gdGhpcyBwb2ludCkgKi9cbn07XG5cbmNvbnN0IHRlc3RfdGhlbl9ibG9jayA9IGZ1bmN0aW9uKGxzLCBlc2NhcGVsaXN0KSB7XG4gICAgLyogdGVzdF90aGVuX2Jsb2NrIC0+IFtJRiB8IEVMU0VJRl0gY29uZCBUSEVOIGJsb2NrICovXG4gICAgbGV0IGJsID0gbmV3IEJsb2NrQ250KCk7XG4gICAgbGV0IGZzID0gbHMuZnM7XG4gICAgbGV0IHYgPSBuZXcgZXhwZGVzYygpO1xuICAgIGxldCBqZjsgIC8qIGluc3RydWN0aW9uIHRvIHNraXAgJ3RoZW4nIGNvZGUgKGlmIGNvbmRpdGlvbiBpcyBmYWxzZSkgKi9cblxuICAgIGxsZXgubHVhWF9uZXh0KGxzKTsgIC8qIHNraXAgSUYgb3IgRUxTRUlGICovXG4gICAgZXhwcihscywgdik7ICAvKiByZWFkIGNvbmRpdGlvbiAqL1xuICAgIGNoZWNrbmV4dChscywgUi5US19USEVOKTtcblxuICAgIGlmIChscy50LnRva2VuID09PSBSLlRLX0dPVE8gfHwgbHMudC50b2tlbiA9PT0gUi5US19CUkVBSykge1xuICAgICAgICBsdWFLX2dvaWZmYWxzZShscy5mcywgdik7ICAvKiB3aWxsIGp1bXAgdG8gbGFiZWwgaWYgY29uZGl0aW9uIGlzIHRydWUgKi9cbiAgICAgICAgZW50ZXJibG9jayhmcywgYmwsIGZhbHNlKTsgIC8qIG11c3QgZW50ZXIgYmxvY2sgYmVmb3JlICdnb3RvJyAqL1xuICAgICAgICBnb3Rvc3RhdChscywgdi50KTsgICAvKiBoYW5kbGUgZ290by9icmVhayAqL1xuICAgICAgICB3aGlsZSAodGVzdG5leHQobHMsIDU5IC8qICgnOycpLmNoYXJDb2RlQXQoMCkgKi8pKTsgIC8qIHNraXAgY29sb25zICovXG4gICAgICAgIGlmIChibG9ja19mb2xsb3cobHMsIDApKSB7ICAvKiAnZ290bycgaXMgdGhlIGVudGlyZSBibG9jaz8gKi9cbiAgICAgICAgICAgIGxlYXZlYmxvY2soZnMpO1xuICAgICAgICAgICAgcmV0dXJuIGVzY2FwZWxpc3Q7ICAvKiBhbmQgdGhhdCBpcyBpdCAqL1xuICAgICAgICB9IGVsc2UgIC8qIG11c3Qgc2tpcCBvdmVyICd0aGVuJyBwYXJ0IGlmIGNvbmRpdGlvbiBpcyBmYWxzZSAqL1xuICAgICAgICAgICAgamYgPSBsdWFLX2p1bXAoZnMpO1xuICAgIH0gZWxzZSB7ICAvKiByZWd1bGFyIGNhc2UgKG5vdCBnb3RvL2JyZWFrKSAqL1xuICAgICAgICBsdWFLX2dvaWZ0cnVlKGxzLmZzLCB2KTsgIC8qIHNraXAgb3ZlciBibG9jayBpZiBjb25kaXRpb24gaXMgZmFsc2UgKi9cbiAgICAgICAgZW50ZXJibG9jayhmcywgYmwsIGZhbHNlKTtcbiAgICAgICAgamYgPSB2LmY7XG4gICAgfVxuXG4gICAgc3RhdGxpc3QobHMpOyAgLyogJ3RoZW4nIHBhcnQgKi9cbiAgICBsZWF2ZWJsb2NrKGZzKTtcbiAgICBpZiAobHMudC50b2tlbiA9PT0gUi5US19FTFNFIHx8IGxzLnQudG9rZW4gPT09IFIuVEtfRUxTRUlGKSAgLyogZm9sbG93ZWQgYnkgJ2Vsc2UnLydlbHNlaWYnPyAqL1xuICAgICAgICBlc2NhcGVsaXN0ID0gbHVhS19jb25jYXQoZnMsIGVzY2FwZWxpc3QsIGx1YUtfanVtcChmcykpOyAgLyogbXVzdCBqdW1wIG92ZXIgaXQgKi9cbiAgICBsdWFLX3BhdGNodG9oZXJlKGZzLCBqZik7XG5cbiAgICByZXR1cm4gZXNjYXBlbGlzdDtcbn07XG5cbmNvbnN0IGlmc3RhdCA9IGZ1bmN0aW9uKGxzLCBsaW5lKSB7XG4gICAgLyogaWZzdGF0IC0+IElGIGNvbmQgVEhFTiBibG9jayB7RUxTRUlGIGNvbmQgVEhFTiBibG9ja30gW0VMU0UgYmxvY2tdIEVORCAqL1xuICAgIGxldCBmcyA9IGxzLmZzO1xuICAgIGxldCBlc2NhcGVsaXN0ID0gTk9fSlVNUDsgIC8qIGV4aXQgbGlzdCBmb3IgZmluaXNoZWQgcGFydHMgKi9cbiAgICBlc2NhcGVsaXN0ID0gdGVzdF90aGVuX2Jsb2NrKGxzLCBlc2NhcGVsaXN0KTsgIC8qIElGIGNvbmQgVEhFTiBibG9jayAqL1xuICAgIHdoaWxlIChscy50LnRva2VuID09PSBSLlRLX0VMU0VJRilcbiAgICAgICAgZXNjYXBlbGlzdCA9IHRlc3RfdGhlbl9ibG9jayhscywgZXNjYXBlbGlzdCk7ICAvKiBFTFNFSUYgY29uZCBUSEVOIGJsb2NrICovXG4gICAgaWYgKHRlc3RuZXh0KGxzLCBSLlRLX0VMU0UpKVxuICAgICAgICBibG9jayhscyk7ICAvKiAnZWxzZScgcGFydCAqL1xuICAgIGNoZWNrX21hdGNoKGxzLCBSLlRLX0VORCwgUi5US19JRiwgbGluZSk7XG4gICAgbHVhS19wYXRjaHRvaGVyZShmcywgZXNjYXBlbGlzdCk7ICAvKiBwYXRjaCBlc2NhcGUgbGlzdCB0byAnaWYnIGVuZCAqL1xufTtcblxuY29uc3QgbG9jYWxmdW5jID0gZnVuY3Rpb24obHMpIHtcbiAgICBsZXQgYiA9IG5ldyBleHBkZXNjKCk7XG4gICAgbGV0IGZzID0gbHMuZnM7XG4gICAgbmV3X2xvY2FsdmFyKGxzLCBzdHJfY2hlY2tuYW1lKGxzKSk7ICAvKiBuZXcgbG9jYWwgdmFyaWFibGUgKi9cbiAgICBhZGp1c3Rsb2NhbHZhcnMobHMsIDEpOyAgLyogZW50ZXIgaXRzIHNjb3BlICovXG4gICAgYm9keShscywgYiwgMCwgbHMubGluZW51bWJlcik7ICAvKiBmdW5jdGlvbiBjcmVhdGVkIGluIG5leHQgcmVnaXN0ZXIgKi9cbiAgICAvKiBkZWJ1ZyBpbmZvcm1hdGlvbiB3aWxsIG9ubHkgc2VlIHRoZSB2YXJpYWJsZSBhZnRlciB0aGlzIHBvaW50ISAqL1xuICAgIGdldGxvY3ZhcihmcywgYi51LmluZm8pLnN0YXJ0cGMgPSBmcy5wYztcbn07XG5cbmNvbnN0IGxvY2Fsc3RhdCA9IGZ1bmN0aW9uKGxzKSB7XG4gICAgLyogc3RhdCAtPiBMT0NBTCBOQU1FIHsnLCcgTkFNRX0gWyc9JyBleHBsaXN0XSAqL1xuICAgIGxldCBudmFycyA9IDA7XG4gICAgbGV0IG5leHBzO1xuICAgIGxldCBlID0gbmV3IGV4cGRlc2MoKTtcbiAgICBkbyB7XG4gICAgICAgIG5ld19sb2NhbHZhcihscywgc3RyX2NoZWNrbmFtZShscykpO1xuICAgICAgICBudmFycysrO1xuICAgIH0gd2hpbGUgKHRlc3RuZXh0KGxzLCA0NCAvKiAoJywnKS5jaGFyQ29kZUF0KDApICovKSk7XG4gICAgaWYgKHRlc3RuZXh0KGxzLCA2MSAvKiAoJz0nKS5jaGFyQ29kZUF0KDApICovKSlcbiAgICAgICAgbmV4cHMgPSBleHBsaXN0KGxzLCBlKTtcbiAgICBlbHNlIHtcbiAgICAgICAgZS5rID0gZXhwa2luZC5WVk9JRDtcbiAgICAgICAgbmV4cHMgPSAwO1xuICAgIH1cbiAgICBhZGp1c3RfYXNzaWduKGxzLCBudmFycywgbmV4cHMsIGUpO1xuICAgIGFkanVzdGxvY2FsdmFycyhscywgbnZhcnMpO1xufTtcblxuY29uc3QgZnVuY25hbWUgPSBmdW5jdGlvbihscywgdikge1xuICAgIC8qIGZ1bmNuYW1lIC0+IE5BTUUge2ZpZWxkc2VsfSBbJzonIE5BTUVdICovXG4gICAgbGV0IGlzbWV0aG9kID0gMDtcbiAgICBzaW5nbGV2YXIobHMsIHYpO1xuICAgIHdoaWxlIChscy50LnRva2VuID09PSA0NiAvKiAoJy4nKS5jaGFyQ29kZUF0KDApICovKVxuICAgICAgICBmaWVsZHNlbChscywgdik7XG4gICAgaWYgKGxzLnQudG9rZW4gPT09IDU4IC8qICgnOicpLmNoYXJDb2RlQXQoMCkgKi8pIHtcbiAgICAgICAgaXNtZXRob2QgPSAxO1xuICAgICAgICBmaWVsZHNlbChscywgdik7XG4gICAgfVxuICAgIHJldHVybiBpc21ldGhvZDtcbn07XG5cbmNvbnN0IGZ1bmNzdGF0ID0gZnVuY3Rpb24obHMsIGxpbmUpIHtcbiAgICAvKiBmdW5jc3RhdCAtPiBGVU5DVElPTiBmdW5jbmFtZSBib2R5ICovXG4gICAgbGV0IHYgPSBuZXcgZXhwZGVzYygpO1xuICAgIGxldCBiID0gbmV3IGV4cGRlc2MoKTtcbiAgICBsbGV4Lmx1YVhfbmV4dChscyk7ICAvKiBza2lwIEZVTkNUSU9OICovXG4gICAgbGV0IGlzbWV0aG9kID0gZnVuY25hbWUobHMsIHYpO1xuICAgIGJvZHkobHMsIGIsIGlzbWV0aG9kLCBsaW5lKTtcbiAgICBsdWFLX3N0b3JldmFyKGxzLmZzLCB2LCBiKTtcbiAgICBsdWFLX2ZpeGxpbmUobHMuZnMsIGxpbmUpOyAgLyogZGVmaW5pdGlvbiBcImhhcHBlbnNcIiBpbiB0aGUgZmlyc3QgbGluZSAqL1xufTtcblxuY29uc3QgZXhwcnN0YXQ9IGZ1bmN0aW9uKGxzKSB7XG4gICAgLyogc3RhdCAtPiBmdW5jIHwgYXNzaWdubWVudCAqL1xuICAgIGxldCBmcyA9IGxzLmZzO1xuICAgIGxldCB2ID0gbmV3IExIU19hc3NpZ24oKTtcbiAgICBzdWZmaXhlZGV4cChscywgdi52KTtcbiAgICBpZiAobHMudC50b2tlbiA9PT0gNjEgLyogKCc9JykuY2hhckNvZGVBdCgwKSAqLyB8fCBscy50LnRva2VuID09PSA0NCAvKiAoJywnKS5jaGFyQ29kZUF0KDApICovKSB7IC8qIHN0YXQgLiBhc3NpZ25tZW50ID8gKi9cbiAgICAgICAgdi5wcmV2ID0gbnVsbDtcbiAgICAgICAgYXNzaWdubWVudChscywgdiwgMSk7XG4gICAgfVxuICAgIGVsc2UgeyAgLyogc3RhdCAtPiBmdW5jICovXG4gICAgICAgIGNoZWNrX2NvbmRpdGlvbihscywgdi52LmsgPT09IGV4cGtpbmQuVkNBTEwsIHRvX2x1YXN0cmluZyhcInN5bnRheCBlcnJvclwiLCB0cnVlKSk7XG4gICAgICAgIFNFVEFSR19DKGdldGluc3RydWN0aW9uKGZzLCB2LnYpLCAxKTsgIC8qIGNhbGwgc3RhdGVtZW50IHVzZXMgbm8gcmVzdWx0cyAqL1xuICAgIH1cbn07XG5cbmNvbnN0IHJldHN0YXQgPSBmdW5jdGlvbihscykge1xuICAgIC8qIHN0YXQgLT4gUkVUVVJOIFtleHBsaXN0XSBbJzsnXSAqL1xuICAgIGxldCBmcyA9IGxzLmZzO1xuICAgIGxldCBlID0gbmV3IGV4cGRlc2MoKTtcbiAgICBsZXQgZmlyc3QsIG5yZXQ7ICAvKiByZWdpc3RlcnMgd2l0aCByZXR1cm5lZCB2YWx1ZXMgKi9cbiAgICBpZiAoYmxvY2tfZm9sbG93KGxzLCAxKSB8fCBscy50LnRva2VuID09PSA1OSAvKiAoJzsnKS5jaGFyQ29kZUF0KDApICovKVxuICAgICAgICBmaXJzdCA9IG5yZXQgPSAwOyAgLyogcmV0dXJuIG5vIHZhbHVlcyAqL1xuICAgIGVsc2Uge1xuICAgICAgICBucmV0ID0gZXhwbGlzdChscywgZSk7ICAvKiBvcHRpb25hbCByZXR1cm4gdmFsdWVzICovXG4gICAgICAgIGlmIChoYXNtdWx0cmV0KGUuaykpIHtcbiAgICAgICAgICAgIGx1YUtfc2V0bXVsdHJldChmcywgZSk7XG4gICAgICAgICAgICBpZiAoZS5rID09PSBleHBraW5kLlZDQUxMICYmIG5yZXQgPT09IDEpIHsgIC8qIHRhaWwgY2FsbD8gKi9cbiAgICAgICAgICAgICAgICBTRVRfT1BDT0RFKGdldGluc3RydWN0aW9uKGZzLCBlKSwgT1BfVEFJTENBTEwpO1xuICAgICAgICAgICAgICAgIGx1YV9hc3NlcnQoZ2V0aW5zdHJ1Y3Rpb24oZnMsIGUpLkEgPT09IGZzLm5hY3R2YXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmlyc3QgPSBmcy5uYWN0dmFyO1xuICAgICAgICAgICAgbnJldCA9IExVQV9NVUxUUkVUOyAgLyogcmV0dXJuIGFsbCB2YWx1ZXMgKi9cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChucmV0ID09PSAxKSAgLyogb25seSBvbmUgc2luZ2xlIHZhbHVlPyAqL1xuICAgICAgICAgICAgICAgIGZpcnN0ID0gbHVhS19leHAyYW55cmVnKGZzLCBlKTtcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGx1YUtfZXhwMm5leHRyZWcoZnMsIGUpOyAgLyogdmFsdWVzIG11c3QgZ28gdG8gdGhlIHN0YWNrICovXG4gICAgICAgICAgICAgICAgZmlyc3QgPSBmcy5uYWN0dmFyOyAgLyogcmV0dXJuIGFsbCBhY3RpdmUgdmFsdWVzICovXG4gICAgICAgICAgICAgICAgbHVhX2Fzc2VydChucmV0ID09PSBmcy5mcmVlcmVnIC0gZmlyc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGx1YUtfcmV0KGZzLCBmaXJzdCwgbnJldCk7XG4gICAgdGVzdG5leHQobHMsIDU5IC8qICgnOycpLmNoYXJDb2RlQXQoMCkgKi8pOyAgLyogc2tpcCBvcHRpb25hbCBzZW1pY29sb24gKi9cbn07XG5cbmNvbnN0IHN0YXRlbWVudCA9IGZ1bmN0aW9uKGxzKSB7XG4gICAgbGV0IGxpbmUgPSBscy5saW5lbnVtYmVyOyAgLyogbWF5IGJlIG5lZWRlZCBmb3IgZXJyb3IgbWVzc2FnZXMgKi9cbiAgICBlbnRlcmxldmVsKGxzKTtcbiAgICBzd2l0Y2gobHMudC50b2tlbikge1xuICAgICAgICBjYXNlIDU5IC8qICgnOycpLmNoYXJDb2RlQXQoMCkgKi86IHsgIC8qIHN0YXQgLT4gJzsnIChlbXB0eSBzdGF0ZW1lbnQpICovXG4gICAgICAgICAgICBsbGV4Lmx1YVhfbmV4dChscyk7ICAvKiBza2lwICc7JyAqL1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBSLlRLX0lGOiB7ICAvKiBzdGF0IC0+IGlmc3RhdCAqL1xuICAgICAgICAgICAgaWZzdGF0KGxzLCBsaW5lKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgUi5US19XSElMRTogeyAgLyogc3RhdCAtPiB3aGlsZXN0YXQgKi9cbiAgICAgICAgICAgIHdoaWxlc3RhdChscywgbGluZSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFIuVEtfRE86IHsgIC8qIHN0YXQgLT4gRE8gYmxvY2sgRU5EICovXG4gICAgICAgICAgICBsbGV4Lmx1YVhfbmV4dChscyk7ICAvKiBza2lwIERPICovXG4gICAgICAgICAgICBibG9jayhscyk7XG4gICAgICAgICAgICBjaGVja19tYXRjaChscywgUi5US19FTkQsIFIuVEtfRE8sIGxpbmUpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBSLlRLX0ZPUjogeyAgLyogc3RhdCAtPiBmb3JzdGF0ICovXG4gICAgICAgICAgICBmb3JzdGF0KGxzLCBsaW5lKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgUi5US19SRVBFQVQ6IHsgIC8qIHN0YXQgLT4gcmVwZWF0c3RhdCAqL1xuICAgICAgICAgICAgcmVwZWF0c3RhdChscywgbGluZSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFIuVEtfRlVOQ1RJT046IHsgIC8qIHN0YXQgLT4gZnVuY3N0YXQgKi9cbiAgICAgICAgICAgIGZ1bmNzdGF0KGxzLCBsaW5lKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgUi5US19MT0NBTDogeyAgLyogc3RhdCAtPiBsb2NhbHN0YXQgKi9cbiAgICAgICAgICAgIGxsZXgubHVhWF9uZXh0KGxzKTsgIC8qIHNraXAgTE9DQUwgKi9cbiAgICAgICAgICAgIGlmICh0ZXN0bmV4dChscywgUi5US19GVU5DVElPTikpICAvKiBsb2NhbCBmdW5jdGlvbj8gKi9cbiAgICAgICAgICAgICAgICBsb2NhbGZ1bmMobHMpO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIGxvY2Fsc3RhdChscyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFIuVEtfREJDT0xPTjogeyAgLyogc3RhdCAtPiBsYWJlbCAqL1xuICAgICAgICAgICAgbGxleC5sdWFYX25leHQobHMpOyAgLyogc2tpcCBkb3VibGUgY29sb24gKi9cbiAgICAgICAgICAgIGxhYmVsc3RhdChscywgc3RyX2NoZWNrbmFtZShscyksIGxpbmUpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBSLlRLX1JFVFVSTjogeyAgLyogc2tpcCBkb3VibGUgY29sb24gKi9cbiAgICAgICAgICAgIGxsZXgubHVhWF9uZXh0KGxzKTsgIC8qIHNraXAgUkVUVVJOICovXG4gICAgICAgICAgICByZXRzdGF0KGxzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgUi5US19CUkVBSzogICAvKiBzdGF0IC0+IGJyZWFrc3RhdCAqL1xuICAgICAgICBjYXNlIFIuVEtfR09UTzogeyAgLyogc3RhdCAtPiAnZ290bycgTkFNRSAqL1xuICAgICAgICAgICAgZ290b3N0YXQobHMsIGx1YUtfanVtcChscy5mcykpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDogeyAgLyogc3RhdCAtPiBmdW5jIHwgYXNzaWdubWVudCAqL1xuICAgICAgICAgICAgZXhwcnN0YXQobHMpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbHVhX2Fzc2VydChscy5mcy5mLm1heHN0YWNrc2l6ZSA+PSBscy5mcy5mcmVlcmVnICYmIGxzLmZzLmZyZWVyZWcgPj0gbHMuZnMubmFjdHZhcik7XG4gICAgbHMuZnMuZnJlZXJlZyA9IGxzLmZzLm5hY3R2YXI7ICAvKiBmcmVlIHJlZ2lzdGVycyAqL1xuICAgIGxlYXZlbGV2ZWwobHMpO1xufTtcblxuLypcbioqIGNvbXBpbGVzIHRoZSBtYWluIGZ1bmN0aW9uLCB3aGljaCBpcyBhIHJlZ3VsYXIgdmFyYXJnIGZ1bmN0aW9uIHdpdGggYW5cbioqIHVwdmFsdWUgbmFtZWQgTFVBX0VOVlxuKi9cbmNvbnN0IG1haW5mdW5jID0gZnVuY3Rpb24obHMsIGZzKSB7XG4gICAgbGV0IGJsID0gbmV3IEJsb2NrQ250KCk7XG4gICAgbGV0IHYgPSBuZXcgZXhwZGVzYygpO1xuICAgIG9wZW5fZnVuYyhscywgZnMsIGJsKTtcbiAgICBmcy5mLmlzX3ZhcmFyZyA9IHRydWU7ICAvKiBtYWluIGZ1bmN0aW9uIGlzIGFsd2F5cyBkZWNsYXJlZCB2YXJhcmcgKi9cbiAgICBpbml0X2V4cCh2LCBleHBraW5kLlZMT0NBTCwgMCk7ICAvKiBjcmVhdGUgYW5kLi4uICovXG4gICAgbmV3dXB2YWx1ZShmcywgbHMuZW52biwgdik7ICAvKiAuLi5zZXQgZW52aXJvbm1lbnQgdXB2YWx1ZSAqL1xuICAgIGxsZXgubHVhWF9uZXh0KGxzKTsgIC8qIHJlYWQgZmlyc3QgdG9rZW4gKi9cbiAgICBzdGF0bGlzdChscyk7ICAvKiBwYXJzZSBtYWluIGJvZHkgKi9cbiAgICBjaGVjayhscywgUi5US19FT1MpO1xuICAgIGNsb3NlX2Z1bmMobHMpO1xufTtcblxuY29uc3QgbHVhWV9wYXJzZXIgPSBmdW5jdGlvbihMLCB6LCBidWZmLCBkeWQsIG5hbWUsIGZpcnN0Y2hhcikge1xuICAgIGxldCBsZXhzdGF0ZSA9IG5ldyBsbGV4LkxleFN0YXRlKCk7XG4gICAgbGV0IGZ1bmNzdGF0ZSA9IG5ldyBGdW5jU3RhdGUoKTtcbiAgICBsZXQgY2wgPSBsZnVuYy5sdWFGX25ld0xjbG9zdXJlKEwsIDEpOyAgLyogY3JlYXRlIG1haW4gY2xvc3VyZSAqL1xuICAgIGxkby5sdWFEX2luY3RvcChMKTtcbiAgICBMLnN0YWNrW0wudG9wLTFdLnNldGNsTHZhbHVlKGNsKTtcbiAgICBsZXhzdGF0ZS5oID0gbHRhYmxlLmx1YUhfbmV3KEwpOyAgLyogY3JlYXRlIHRhYmxlIGZvciBzY2FubmVyICovXG4gICAgbGRvLmx1YURfaW5jdG9wKEwpO1xuICAgIEwuc3RhY2tbTC50b3AtMV0uc2V0aHZhbHVlKGxleHN0YXRlLmgpO1xuICAgIGZ1bmNzdGF0ZS5mID0gY2wucCA9IG5ldyBQcm90byhMKTtcbiAgICBmdW5jc3RhdGUuZi5zb3VyY2UgPSBsdWFTX25ldyhMLCBuYW1lKTtcbiAgICBsZXhzdGF0ZS5idWZmID0gYnVmZjtcbiAgICBsZXhzdGF0ZS5keWQgPSBkeWQ7XG4gICAgZHlkLmFjdHZhci5uID0gZHlkLmd0Lm4gPSBkeWQubGFiZWwubiA9IDA7XG4gICAgbGxleC5sdWFYX3NldGlucHV0KEwsIGxleHN0YXRlLCB6LCBmdW5jc3RhdGUuZi5zb3VyY2UsIGZpcnN0Y2hhcik7XG4gICAgbWFpbmZ1bmMobGV4c3RhdGUsIGZ1bmNzdGF0ZSk7XG4gICAgbHVhX2Fzc2VydCghZnVuY3N0YXRlLnByZXYgJiYgZnVuY3N0YXRlLm51cHMgPT09IDEgJiYgIWxleHN0YXRlLmZzKTtcbiAgICAvKiBhbGwgc2NvcGVzIHNob3VsZCBiZSBjb3JyZWN0bHkgZmluaXNoZWQgKi9cbiAgICBsdWFfYXNzZXJ0KGR5ZC5hY3R2YXIubiA9PT0gMCAmJiBkeWQuZ3QubiA9PT0gMCAmJiBkeWQubGFiZWwubiA9PT0gMCk7XG4gICAgZGVsZXRlIEwuc3RhY2tbLS1MLnRvcF07ICAvKiByZW1vdmUgc2Nhbm5lcidzIHRhYmxlICovXG4gICAgcmV0dXJuIGNsOyAgLyogY2xvc3VyZSBpcyBvbiB0aGUgc3RhY2ssIHRvbyAqL1xufTtcblxuXG5tb2R1bGUuZXhwb3J0cy5EeW5kYXRhICAgICA9IER5bmRhdGE7XG5tb2R1bGUuZXhwb3J0cy5leHBraW5kICAgICA9IGV4cGtpbmQ7XG5tb2R1bGUuZXhwb3J0cy5leHBkZXNjICAgICA9IGV4cGRlc2M7XG5tb2R1bGUuZXhwb3J0cy5sdWFZX3BhcnNlciA9IGx1YVlfcGFyc2VyO1xubW9kdWxlLmV4cG9ydHMudmtpc2lucmVnICAgPSB2a2lzaW5yZWc7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///23\n")},function(module,exports,__webpack_require__){"use strict";eval('\n\nvar _require = __webpack_require__(2),\n    LUA_MULTRET = _require.LUA_MULTRET,\n    LUA_OK = _require.LUA_OK,\n    LUA_TFUNCTION = _require.LUA_TFUNCTION,\n    LUA_TNIL = _require.LUA_TNIL,\n    LUA_TNONE = _require.LUA_TNONE,\n    LUA_TNUMBER = _require.LUA_TNUMBER,\n    LUA_TSTRING = _require.LUA_TSTRING,\n    LUA_TTABLE = _require.LUA_TTABLE,\n    LUA_VERSION = _require.LUA_VERSION,\n    LUA_YIELD = _require.LUA_YIELD,\n    lua_call = _require.lua_call,\n    lua_callk = _require.lua_callk,\n    lua_concat = _require.lua_concat,\n    lua_error = _require.lua_error,\n    lua_getglobal = _require.lua_getglobal,\n    lua_geti = _require.lua_geti,\n    lua_getmetatable = _require.lua_getmetatable,\n    lua_gettop = _require.lua_gettop,\n    lua_insert = _require.lua_insert,\n    lua_isnil = _require.lua_isnil,\n    lua_isnone = _require.lua_isnone,\n    lua_isstring = _require.lua_isstring,\n    lua_load = _require.lua_load,\n    lua_next = _require.lua_next,\n    lua_pcallk = _require.lua_pcallk,\n    lua_pop = _require.lua_pop,\n    lua_pushboolean = _require.lua_pushboolean,\n    lua_pushcfunction = _require.lua_pushcfunction,\n    lua_pushglobaltable = _require.lua_pushglobaltable,\n    lua_pushinteger = _require.lua_pushinteger,\n    lua_pushliteral = _require.lua_pushliteral,\n    lua_pushnil = _require.lua_pushnil,\n    lua_pushstring = _require.lua_pushstring,\n    lua_pushvalue = _require.lua_pushvalue,\n    lua_rawequal = _require.lua_rawequal,\n    lua_rawget = _require.lua_rawget,\n    lua_rawlen = _require.lua_rawlen,\n    lua_rawset = _require.lua_rawset,\n    lua_remove = _require.lua_remove,\n    lua_replace = _require.lua_replace,\n    lua_rotate = _require.lua_rotate,\n    lua_setfield = _require.lua_setfield,\n    lua_setmetatable = _require.lua_setmetatable,\n    lua_settop = _require.lua_settop,\n    lua_setupvalue = _require.lua_setupvalue,\n    lua_stringtonumber = _require.lua_stringtonumber,\n    lua_toboolean = _require.lua_toboolean,\n    lua_tolstring = _require.lua_tolstring,\n    lua_tostring = _require.lua_tostring,\n    lua_type = _require.lua_type,\n    lua_typename = _require.lua_typename;\n\nvar _require2 = __webpack_require__(7),\n    luaL_argcheck = _require2.luaL_argcheck,\n    luaL_checkany = _require2.luaL_checkany,\n    luaL_checkinteger = _require2.luaL_checkinteger,\n    luaL_checkoption = _require2.luaL_checkoption,\n    luaL_checkstack = _require2.luaL_checkstack,\n    luaL_checktype = _require2.luaL_checktype,\n    luaL_error = _require2.luaL_error,\n    luaL_getmetafield = _require2.luaL_getmetafield,\n    luaL_loadbufferx = _require2.luaL_loadbufferx,\n    luaL_loadfile = _require2.luaL_loadfile,\n    luaL_loadfilex = _require2.luaL_loadfilex,\n    luaL_optinteger = _require2.luaL_optinteger,\n    luaL_optstring = _require2.luaL_optstring,\n    luaL_setfuncs = _require2.luaL_setfuncs,\n    luaL_tolstring = _require2.luaL_tolstring,\n    luaL_where = _require2.luaL_where;\n\nvar _require3 = __webpack_require__(5),\n    to_jsstring = _require3.to_jsstring,\n    to_luastring = _require3.to_luastring;\n\nvar lua_writestring;\nvar lua_writeline;\n\nif (true) {\n  if (typeof TextDecoder === "function") {\n    /* Older browsers don\'t have TextDecoder */\n    var buff = "";\n    var decoder = new TextDecoder("utf-8");\n\n    lua_writestring = function lua_writestring(s) {\n      buff += decoder.decode(s, {\n        stream: true\n      });\n    };\n\n    var empty = new Uint8Array(0);\n\n    lua_writeline = function lua_writeline() {\n      buff += decoder.decode(empty);\n      console.log(buff);\n      buff = "";\n    };\n  } else {\n    var _buff = [];\n\n    lua_writestring = function lua_writestring(s) {\n      try {\n        /* If the string is valid utf8, then we can use to_jsstring */\n        s = to_jsstring(s);\n      } catch (e) {\n        /* otherwise push copy of raw array */\n        var copy = new Uint8Array(s.length);\n        copy.set(s);\n        s = copy;\n      }\n\n      _buff.push(s);\n    };\n\n    lua_writeline = function lua_writeline() {\n      console.log.apply(console.log, _buff);\n      _buff = [];\n    };\n  }\n} else {}\n\nvar luaB_print = function luaB_print(L) {\n  var n = lua_gettop(L);\n  /* number of arguments */\n\n  lua_getglobal(L, to_luastring("tostring", true));\n\n  for (var i = 1; i <= n; i++) {\n    lua_pushvalue(L, -1);\n    /* function to be called */\n\n    lua_pushvalue(L, i);\n    /* value to print */\n\n    lua_call(L, 1, 1);\n    var s = lua_tolstring(L, -1);\n    if (s === null) return luaL_error(L, to_luastring("\'tostring\' must return a string to \'print\'"));\n    if (i > 1) lua_writestring(to_luastring("\\t"));\n    lua_writestring(s);\n    lua_pop(L, 1);\n  }\n\n  lua_writeline();\n  return 0;\n};\n\nvar luaB_tostring = function luaB_tostring(L) {\n  luaL_checkany(L, 1);\n  luaL_tolstring(L, 1);\n  return 1;\n};\n\nvar luaB_getmetatable = function luaB_getmetatable(L) {\n  luaL_checkany(L, 1);\n\n  if (!lua_getmetatable(L, 1)) {\n    lua_pushnil(L);\n    return 1;\n    /* no metatable */\n  }\n\n  luaL_getmetafield(L, 1, to_luastring("__metatable", true));\n  return 1;\n  /* returns either __metatable field (if present) or metatable */\n};\n\nvar luaB_setmetatable = function luaB_setmetatable(L) {\n  var t = lua_type(L, 2);\n  luaL_checktype(L, 1, LUA_TTABLE);\n  luaL_argcheck(L, t === LUA_TNIL || t === LUA_TTABLE, 2, "nil or table expected");\n  if (luaL_getmetafield(L, 1, to_luastring("__metatable", true)) !== LUA_TNIL) return luaL_error(L, to_luastring("cannot change a protected metatable"));\n  lua_settop(L, 2);\n  lua_setmetatable(L, 1);\n  return 1;\n};\n\nvar luaB_rawequal = function luaB_rawequal(L) {\n  luaL_checkany(L, 1);\n  luaL_checkany(L, 2);\n  lua_pushboolean(L, lua_rawequal(L, 1, 2));\n  return 1;\n};\n\nvar luaB_rawlen = function luaB_rawlen(L) {\n  var t = lua_type(L, 1);\n  luaL_argcheck(L, t === LUA_TTABLE || t === LUA_TSTRING, 1, "table or string expected");\n  lua_pushinteger(L, lua_rawlen(L, 1));\n  return 1;\n};\n\nvar luaB_rawget = function luaB_rawget(L) {\n  luaL_checktype(L, 1, LUA_TTABLE);\n  luaL_checkany(L, 2);\n  lua_settop(L, 2);\n  lua_rawget(L, 1);\n  return 1;\n};\n\nvar luaB_rawset = function luaB_rawset(L) {\n  luaL_checktype(L, 1, LUA_TTABLE);\n  luaL_checkany(L, 2);\n  luaL_checkany(L, 3);\n  lua_settop(L, 3);\n  lua_rawset(L, 1);\n  return 1;\n};\n\nvar opts = ["stop", "restart", "collect", "count", "step", "setpause", "setstepmul", "isrunning"].map(function (e) {\n  return to_luastring(e);\n});\n\nvar luaB_collectgarbage = function luaB_collectgarbage(L) {\n  luaL_checkoption(L, 1, "collect", opts);\n  luaL_optinteger(L, 2, 0);\n  luaL_error(L, to_luastring("lua_gc not implemented"));\n};\n\nvar luaB_type = function luaB_type(L) {\n  var t = lua_type(L, 1);\n  luaL_argcheck(L, t !== LUA_TNONE, 1, "value expected");\n  lua_pushstring(L, lua_typename(L, t));\n  return 1;\n};\n\nvar pairsmeta = function pairsmeta(L, method, iszero, iter) {\n  luaL_checkany(L, 1);\n\n  if (luaL_getmetafield(L, 1, method) === LUA_TNIL) {\n    /* no metamethod? */\n    lua_pushcfunction(L, iter);\n    /* will return generator, */\n\n    lua_pushvalue(L, 1);\n    /* state, */\n\n    if (iszero) lua_pushinteger(L, 0);\n    /* and initial value */\n    else lua_pushnil(L);\n  } else {\n    lua_pushvalue(L, 1);\n    /* argument \'self\' to metamethod */\n\n    lua_call(L, 1, 3);\n    /* get 3 values from metamethod */\n  }\n\n  return 3;\n};\n\nvar luaB_next = function luaB_next(L) {\n  luaL_checktype(L, 1, LUA_TTABLE);\n  lua_settop(L, 2);\n  /* create a 2nd argument if there isn\'t one */\n\n  if (lua_next(L, 1)) return 2;else {\n    lua_pushnil(L);\n    return 1;\n  }\n};\n\nvar luaB_pairs = function luaB_pairs(L) {\n  return pairsmeta(L, to_luastring("__pairs", true), 0, luaB_next);\n};\n/*\n** Traversal function for \'ipairs\'\n*/\n\n\nvar ipairsaux = function ipairsaux(L) {\n  var i = luaL_checkinteger(L, 2) + 1;\n  lua_pushinteger(L, i);\n  return lua_geti(L, 1, i) === LUA_TNIL ? 1 : 2;\n};\n/*\n** \'ipairs\' function. Returns \'ipairsaux\', given "table", 0.\n** (The given "table" may not be a table.)\n*/\n\n\nvar luaB_ipairs = function luaB_ipairs(L) {\n  // Lua 5.2\n  // return pairsmeta(L, "__ipairs", 1, ipairsaux);\n  luaL_checkany(L, 1);\n  lua_pushcfunction(L, ipairsaux);\n  /* iteration function */\n\n  lua_pushvalue(L, 1);\n  /* state */\n\n  lua_pushinteger(L, 0);\n  /* initial value */\n\n  return 3;\n};\n\nvar b_str2int = function b_str2int(s, base) {\n  try {\n    s = to_jsstring(s);\n  } catch (e) {\n    return null;\n  }\n\n  var r = /^[\\t\\v\\f \\n\\r]*([+-]?)0*([0-9A-Za-z]+)[\\t\\v\\f \\n\\r]*$/.exec(s);\n  if (!r) return null;\n  var v = parseInt(r[1] + r[2], base);\n  if (isNaN(v)) return null;\n  return v | 0;\n};\n\nvar luaB_tonumber = function luaB_tonumber(L) {\n  if (lua_type(L, 2) <= 0) {\n    /* standard conversion? */\n    luaL_checkany(L, 1);\n\n    if (lua_type(L, 1) === LUA_TNUMBER) {\n      /* already a number? */\n      lua_settop(L, 1);\n      return 1;\n    } else {\n      var s = lua_tostring(L, 1);\n      if (s !== null && lua_stringtonumber(L, s) === s.length + 1) return 1;\n      /* successful conversion to number */\n    }\n  } else {\n    var base = luaL_checkinteger(L, 2);\n    luaL_checktype(L, 1, LUA_TSTRING);\n    /* no numbers as strings */\n\n    var _s = lua_tostring(L, 1);\n\n    luaL_argcheck(L, 2 <= base && base <= 36, 2, "base out of range");\n    var n = b_str2int(_s, base);\n\n    if (n !== null) {\n      lua_pushinteger(L, n);\n      return 1;\n    }\n  }\n\n  lua_pushnil(L);\n  return 1;\n};\n\nvar luaB_error = function luaB_error(L) {\n  var level = luaL_optinteger(L, 2, 1);\n  lua_settop(L, 1);\n\n  if (lua_type(L, 1) === LUA_TSTRING && level > 0) {\n    luaL_where(L, level);\n    /* add extra information */\n\n    lua_pushvalue(L, 1);\n    lua_concat(L, 2);\n  }\n\n  return lua_error(L);\n};\n\nvar luaB_assert = function luaB_assert(L) {\n  if (lua_toboolean(L, 1))\n    /* condition is true? */\n    return lua_gettop(L);\n    /* return all arguments */\n  else {\n      luaL_checkany(L, 1);\n      /* there must be a condition */\n\n      lua_remove(L, 1);\n      /* remove it */\n\n      lua_pushliteral(L, "assertion failed!");\n      /* default message */\n\n      lua_settop(L, 1);\n      /* leave only message (default if no other one) */\n\n      return luaB_error(L);\n      /* call \'error\' */\n    }\n};\n\nvar luaB_select = function luaB_select(L) {\n  var n = lua_gettop(L);\n\n  if (lua_type(L, 1) === LUA_TSTRING && lua_tostring(L, 1)[0] === 35\n  /* \'#\'.charCodeAt(0) */\n  ) {\n      lua_pushinteger(L, n - 1);\n      return 1;\n    } else {\n    var i = luaL_checkinteger(L, 1);\n    if (i < 0) i = n + i;else if (i > n) i = n;\n    luaL_argcheck(L, 1 <= i, 1, "index out of range");\n    return n - i;\n  }\n};\n/*\n** Continuation function for \'pcall\' and \'xpcall\'. Both functions\n** already pushed a \'true\' before doing the call, so in case of success\n** \'finishpcall\' only has to return everything in the stack minus\n** \'extra\' values (where \'extra\' is exactly the number of items to be\n** ignored).\n*/\n\n\nvar finishpcall = function finishpcall(L, status, extra) {\n  if (status !== LUA_OK && status !== LUA_YIELD) {\n    /* error? */\n    lua_pushboolean(L, 0);\n    /* first result (false) */\n\n    lua_pushvalue(L, -2);\n    /* error message */\n\n    return 2;\n    /* return false, msg */\n  } else return lua_gettop(L) - extra;\n};\n\nvar luaB_pcall = function luaB_pcall(L) {\n  luaL_checkany(L, 1);\n  lua_pushboolean(L, 1);\n  /* first result if no errors */\n\n  lua_insert(L, 1);\n  /* put it in place */\n\n  var status = lua_pcallk(L, lua_gettop(L) - 2, LUA_MULTRET, 0, 0, finishpcall);\n  return finishpcall(L, status, 0);\n};\n/*\n** Do a protected call with error handling. After \'lua_rotate\', the\n** stack will have <f, err, true, f, [args...]>; so, the function passes\n** 2 to \'finishpcall\' to skip the 2 first values when returning results.\n*/\n\n\nvar luaB_xpcall = function luaB_xpcall(L) {\n  var n = lua_gettop(L);\n  luaL_checktype(L, 2, LUA_TFUNCTION);\n  /* check error function */\n\n  lua_pushboolean(L, 1);\n  /* first result */\n\n  lua_pushvalue(L, 1);\n  /* function */\n\n  lua_rotate(L, 3, 2);\n  /* move them below function\'s arguments */\n\n  var status = lua_pcallk(L, n - 2, LUA_MULTRET, 2, 2, finishpcall);\n  return finishpcall(L, status, 2);\n};\n\nvar load_aux = function load_aux(L, status, envidx) {\n  if (status === LUA_OK) {\n    if (envidx !== 0) {\n      /* \'env\' parameter? */\n      lua_pushvalue(L, envidx);\n      /* environment for loaded function */\n\n      if (!lua_setupvalue(L, -2, 1))\n        /* set it as 1st upvalue */\n        lua_pop(L, 1);\n      /* remove \'env\' if not used by previous call */\n    }\n\n    return 1;\n  } else {\n    /* error (message is on top of the stack) */\n    lua_pushnil(L);\n    lua_insert(L, -2);\n    /* put before error message */\n\n    return 2;\n    /* return nil plus error message */\n  }\n};\n/*\n** reserved slot, above all arguments, to hold a copy of the returned\n** string to avoid it being collected while parsed. \'load\' has four\n** optional arguments (chunk, source name, mode, and environment).\n*/\n\n\nvar RESERVEDSLOT = 5;\n/*\n** Reader for generic \'load\' function: \'lua_load\' uses the\n** stack for internal stuff, so the reader cannot change the\n** stack top. Instead, it keeps its resulting string in a\n** reserved slot inside the stack.\n*/\n\nvar generic_reader = function generic_reader(L, ud) {\n  luaL_checkstack(L, 2, "too many nested functions");\n  lua_pushvalue(L, 1);\n  /* get function */\n\n  lua_call(L, 0, 1);\n  /* call it */\n\n  if (lua_isnil(L, -1)) {\n    lua_pop(L, 1);\n    /* pop result */\n\n    return null;\n  } else if (!lua_isstring(L, -1)) luaL_error(L, to_luastring("reader function must return a string"));\n\n  lua_replace(L, RESERVEDSLOT);\n  /* save string in reserved slot */\n\n  return lua_tostring(L, RESERVEDSLOT);\n};\n\nvar luaB_load = function luaB_load(L) {\n  var s = lua_tostring(L, 1);\n  var mode = luaL_optstring(L, 3, "bt");\n  var env = !lua_isnone(L, 4) ? 4 : 0;\n  /* \'env\' index or 0 if no \'env\' */\n\n  var status;\n\n  if (s !== null) {\n    /* loading a string? */\n    var chunkname = luaL_optstring(L, 2, s);\n    status = luaL_loadbufferx(L, s, s.length, chunkname, mode);\n  } else {\n    /* loading from a reader function */\n    var _chunkname = luaL_optstring(L, 2, "=(load)");\n\n    luaL_checktype(L, 1, LUA_TFUNCTION);\n    lua_settop(L, RESERVEDSLOT);\n    /* create reserved slot */\n\n    status = lua_load(L, generic_reader, null, _chunkname, mode);\n  }\n\n  return load_aux(L, status, env);\n};\n\nvar luaB_loadfile = function luaB_loadfile(L) {\n  var fname = luaL_optstring(L, 1, null);\n  var mode = luaL_optstring(L, 2, null);\n  var env = !lua_isnone(L, 3) ? 3 : 0;\n  /* \'env\' index or 0 if no \'env\' */\n\n  var status = luaL_loadfilex(L, fname, mode);\n  return load_aux(L, status, env);\n};\n\nvar dofilecont = function dofilecont(L, d1, d2) {\n  return lua_gettop(L) - 1;\n};\n\nvar luaB_dofile = function luaB_dofile(L) {\n  var fname = luaL_optstring(L, 1, null);\n  lua_settop(L, 1);\n  if (luaL_loadfile(L, fname) !== LUA_OK) return lua_error(L);\n  lua_callk(L, 0, LUA_MULTRET, 0, dofilecont);\n  return dofilecont(L, 0, 0);\n};\n\nvar base_funcs = {\n  "assert": luaB_assert,\n  "collectgarbage": luaB_collectgarbage,\n  "dofile": luaB_dofile,\n  "error": luaB_error,\n  "getmetatable": luaB_getmetatable,\n  "ipairs": luaB_ipairs,\n  "load": luaB_load,\n  "loadfile": luaB_loadfile,\n  "next": luaB_next,\n  "pairs": luaB_pairs,\n  "pcall": luaB_pcall,\n  "print": luaB_print,\n  "rawequal": luaB_rawequal,\n  "rawget": luaB_rawget,\n  "rawlen": luaB_rawlen,\n  "rawset": luaB_rawset,\n  "select": luaB_select,\n  "setmetatable": luaB_setmetatable,\n  "tonumber": luaB_tonumber,\n  "tostring": luaB_tostring,\n  "type": luaB_type,\n  "xpcall": luaB_xpcall\n};\n\nvar luaopen_base = function luaopen_base(L) {\n  /* open lib into global table */\n  lua_pushglobaltable(L);\n  luaL_setfuncs(L, base_funcs, 0);\n  /* set global _G */\n\n  lua_pushvalue(L, -1);\n  lua_setfield(L, -2, to_luastring("_G"));\n  /* set global _VERSION */\n\n  lua_pushliteral(L, LUA_VERSION);\n  lua_setfield(L, -2, to_luastring("_VERSION"));\n  return 1;\n};\n\nmodule.exports.luaopen_base = luaopen_base;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///24\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nvar _require = __webpack_require__(2),\n    LUA_OK = _require.LUA_OK,\n    LUA_TFUNCTION = _require.LUA_TFUNCTION,\n    LUA_TSTRING = _require.LUA_TSTRING,\n    LUA_YIELD = _require.LUA_YIELD,\n    lua_Debug = _require.lua_Debug,\n    lua_checkstack = _require.lua_checkstack,\n    lua_concat = _require.lua_concat,\n    lua_error = _require.lua_error,\n    lua_getstack = _require.lua_getstack,\n    lua_gettop = _require.lua_gettop,\n    lua_insert = _require.lua_insert,\n    lua_isyieldable = _require.lua_isyieldable,\n    lua_newthread = _require.lua_newthread,\n    lua_pop = _require.lua_pop,\n    lua_pushboolean = _require.lua_pushboolean,\n    lua_pushcclosure = _require.lua_pushcclosure,\n    lua_pushliteral = _require.lua_pushliteral,\n    lua_pushthread = _require.lua_pushthread,\n    lua_pushvalue = _require.lua_pushvalue,\n    lua_resume = _require.lua_resume,\n    lua_status = _require.lua_status,\n    lua_tothread = _require.lua_tothread,\n    lua_type = _require.lua_type,\n    lua_upvalueindex = _require.lua_upvalueindex,\n    lua_xmove = _require.lua_xmove,\n    lua_yield = _require.lua_yield;\n\nvar _require2 = __webpack_require__(7),\n    luaL_argcheck = _require2.luaL_argcheck,\n    luaL_checktype = _require2.luaL_checktype,\n    luaL_newlib = _require2.luaL_newlib,\n    luaL_where = _require2.luaL_where;\n\nvar getco = function getco(L) {\n  var co = lua_tothread(L, 1);\n  luaL_argcheck(L, co, 1, "thread expected");\n  return co;\n};\n\nvar auxresume = function auxresume(L, co, narg) {\n  if (!lua_checkstack(co, narg)) {\n    lua_pushliteral(L, "too many arguments to resume");\n    return -1;\n    /* error flag */\n  }\n\n  if (lua_status(co) === LUA_OK && lua_gettop(co) === 0) {\n    lua_pushliteral(L, "cannot resume dead coroutine");\n    return -1;\n    /* error flag */\n  }\n\n  lua_xmove(L, co, narg);\n  var status = lua_resume(co, L, narg);\n\n  if (status === LUA_OK || status === LUA_YIELD) {\n    var nres = lua_gettop(co);\n\n    if (!lua_checkstack(L, nres + 1)) {\n      lua_pop(co, nres);\n      /* remove results anyway */\n\n      lua_pushliteral(L, "too many results to resume");\n      return -1;\n      /* error flag */\n    }\n\n    lua_xmove(co, L, nres);\n    /* move yielded values */\n\n    return nres;\n  } else {\n    lua_xmove(co, L, 1);\n    /* move error message */\n\n    return -1;\n    /* error flag */\n  }\n};\n\nvar luaB_coresume = function luaB_coresume(L) {\n  var co = getco(L);\n  var r = auxresume(L, co, lua_gettop(L) - 1);\n\n  if (r < 0) {\n    lua_pushboolean(L, 0);\n    lua_insert(L, -2);\n    return 2;\n    /* return false + error message */\n  } else {\n    lua_pushboolean(L, 1);\n    lua_insert(L, -(r + 1));\n    return r + 1;\n    /* return true + \'resume\' returns */\n  }\n};\n\nvar luaB_auxwrap = function luaB_auxwrap(L) {\n  var co = lua_tothread(L, lua_upvalueindex(1));\n  var r = auxresume(L, co, lua_gettop(L));\n\n  if (r < 0) {\n    if (lua_type(L, -1) === LUA_TSTRING) {\n      /* error object is a string? */\n      luaL_where(L, 1);\n      /* add extra info */\n\n      lua_insert(L, -2);\n      lua_concat(L, 2);\n    }\n\n    return lua_error(L);\n    /* propagate error */\n  }\n\n  return r;\n};\n\nvar luaB_cocreate = function luaB_cocreate(L) {\n  luaL_checktype(L, 1, LUA_TFUNCTION);\n  var NL = lua_newthread(L);\n  lua_pushvalue(L, 1);\n  /* move function to top */\n\n  lua_xmove(L, NL, 1);\n  /* move function from L to NL */\n\n  return 1;\n};\n\nvar luaB_cowrap = function luaB_cowrap(L) {\n  luaB_cocreate(L);\n  lua_pushcclosure(L, luaB_auxwrap, 1);\n  return 1;\n};\n\nvar luaB_yield = function luaB_yield(L) {\n  return lua_yield(L, lua_gettop(L));\n};\n\nvar luaB_costatus = function luaB_costatus(L) {\n  var co = getco(L);\n  if (L === co) lua_pushliteral(L, "running");else {\n    switch (lua_status(co)) {\n      case LUA_YIELD:\n        lua_pushliteral(L, "suspended");\n        break;\n\n      case LUA_OK:\n        {\n          var ar = new lua_Debug();\n          if (lua_getstack(co, 0, ar) > 0)\n            /* does it have frames? */\n            lua_pushliteral(L, "normal");\n            /* it is running */\n          else if (lua_gettop(co) === 0) lua_pushliteral(L, "dead");else lua_pushliteral(L, "suspended");\n          /* initial state */\n\n          break;\n        }\n\n      default:\n        /* some error occurred */\n        lua_pushliteral(L, "dead");\n        break;\n    }\n  }\n  return 1;\n};\n\nvar luaB_yieldable = function luaB_yieldable(L) {\n  lua_pushboolean(L, lua_isyieldable(L));\n  return 1;\n};\n\nvar luaB_corunning = function luaB_corunning(L) {\n  lua_pushboolean(L, lua_pushthread(L));\n  return 2;\n};\n\nvar co_funcs = {\n  "create": luaB_cocreate,\n  "isyieldable": luaB_yieldable,\n  "resume": luaB_coresume,\n  "running": luaB_corunning,\n  "status": luaB_costatus,\n  "wrap": luaB_cowrap,\n  "yield": luaB_yield\n};\n\nvar luaopen_coroutine = function luaopen_coroutine(L) {\n  luaL_newlib(L, co_funcs);\n  return 1;\n};\n\nmodule.exports.luaopen_coroutine = luaopen_coroutine;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///25\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nvar _require = __webpack_require__(3),\n    LUA_MAXINTEGER = _require.LUA_MAXINTEGER;\n\nvar _require2 = __webpack_require__(2),\n    LUA_OPEQ = _require2.LUA_OPEQ,\n    LUA_OPLT = _require2.LUA_OPLT,\n    LUA_TFUNCTION = _require2.LUA_TFUNCTION,\n    LUA_TNIL = _require2.LUA_TNIL,\n    LUA_TTABLE = _require2.LUA_TTABLE,\n    lua_call = _require2.lua_call,\n    lua_checkstack = _require2.lua_checkstack,\n    lua_compare = _require2.lua_compare,\n    lua_createtable = _require2.lua_createtable,\n    lua_geti = _require2.lua_geti,\n    lua_getmetatable = _require2.lua_getmetatable,\n    lua_gettop = _require2.lua_gettop,\n    lua_insert = _require2.lua_insert,\n    lua_isnil = _require2.lua_isnil,\n    lua_isnoneornil = _require2.lua_isnoneornil,\n    lua_isstring = _require2.lua_isstring,\n    lua_pop = _require2.lua_pop,\n    lua_pushinteger = _require2.lua_pushinteger,\n    lua_pushnil = _require2.lua_pushnil,\n    lua_pushstring = _require2.lua_pushstring,\n    lua_pushvalue = _require2.lua_pushvalue,\n    lua_rawget = _require2.lua_rawget,\n    lua_setfield = _require2.lua_setfield,\n    lua_seti = _require2.lua_seti,\n    lua_settop = _require2.lua_settop,\n    lua_toboolean = _require2.lua_toboolean,\n    lua_type = _require2.lua_type;\n\nvar _require3 = __webpack_require__(7),\n    luaL_Buffer = _require3.luaL_Buffer,\n    luaL_addlstring = _require3.luaL_addlstring,\n    luaL_addvalue = _require3.luaL_addvalue,\n    luaL_argcheck = _require3.luaL_argcheck,\n    luaL_buffinit = _require3.luaL_buffinit,\n    luaL_checkinteger = _require3.luaL_checkinteger,\n    luaL_checktype = _require3.luaL_checktype,\n    luaL_error = _require3.luaL_error,\n    luaL_len = _require3.luaL_len,\n    luaL_newlib = _require3.luaL_newlib,\n    luaL_opt = _require3.luaL_opt,\n    luaL_optinteger = _require3.luaL_optinteger,\n    luaL_optlstring = _require3.luaL_optlstring,\n    luaL_pushresult = _require3.luaL_pushresult,\n    luaL_typename = _require3.luaL_typename;\n\nvar lualib = __webpack_require__(17);\n\nvar _require4 = __webpack_require__(5),\n    to_luastring = _require4.to_luastring;\n/*\n** Operations that an object must define to mimic a table\n** (some functions only need some of them)\n*/\n\n\nvar TAB_R = 1;\n/* read */\n\nvar TAB_W = 2;\n/* write */\n\nvar TAB_L = 4;\n/* length */\n\nvar TAB_RW = TAB_R | TAB_W;\n/* read/write */\n\nvar checkfield = function checkfield(L, key, n) {\n  lua_pushstring(L, key);\n  return lua_rawget(L, -n) !== LUA_TNIL;\n};\n/*\n** Check that \'arg\' either is a table or can behave like one (that is,\n** has a metatable with the required metamethods)\n*/\n\n\nvar checktab = function checktab(L, arg, what) {\n  if (lua_type(L, arg) !== LUA_TTABLE) {\n    /* is it not a table? */\n    var n = 1;\n\n    if (lua_getmetatable(L, arg) && (\n    /* must have metatable */\n    !(what & TAB_R) || checkfield(L, to_luastring("__index", true), ++n)) && (!(what & TAB_W) || checkfield(L, to_luastring("__newindex", true), ++n)) && (!(what & TAB_L) || checkfield(L, to_luastring("__len", true), ++n))) {\n      lua_pop(L, n);\n      /* pop metatable and tested metamethods */\n    } else luaL_checktype(L, arg, LUA_TTABLE);\n    /* force an error */\n\n  }\n};\n\nvar aux_getn = function aux_getn(L, n, w) {\n  checktab(L, n, w | TAB_L);\n  return luaL_len(L, n);\n};\n\nvar addfield = function addfield(L, b, i) {\n  lua_geti(L, 1, i);\n  if (!lua_isstring(L, -1)) luaL_error(L, to_luastring("invalid value (%s) at index %d in table for \'concat\'"), luaL_typename(L, -1), i);\n  luaL_addvalue(b);\n};\n\nvar tinsert = function tinsert(L) {\n  var e = aux_getn(L, 1, TAB_RW) + 1;\n  /* first empty element */\n\n  var pos;\n\n  switch (lua_gettop(L)) {\n    case 2:\n      pos = e;\n      break;\n\n    case 3:\n      {\n        pos = luaL_checkinteger(L, 2);\n        /* 2nd argument is the position */\n\n        luaL_argcheck(L, 1 <= pos && pos <= e, 2, "position out of bounds");\n\n        for (var i = e; i > pos; i--) {\n          /* move up elements */\n          lua_geti(L, 1, i - 1);\n          lua_seti(L, 1, i);\n          /* t[i] = t[i - 1] */\n        }\n\n        break;\n      }\n\n    default:\n      {\n        return luaL_error(L, "wrong number of arguments to \'insert\'");\n      }\n  }\n\n  lua_seti(L, 1, pos);\n  /* t[pos] = v */\n\n  return 0;\n};\n\nvar tremove = function tremove(L) {\n  var size = aux_getn(L, 1, TAB_RW);\n  var pos = luaL_optinteger(L, 2, size);\n  if (pos !== size)\n    /* validate \'pos\' if given */\n    luaL_argcheck(L, 1 <= pos && pos <= size + 1, 1, "position out of bounds");\n  lua_geti(L, 1, pos);\n  /* result = t[pos] */\n\n  for (; pos < size; pos++) {\n    lua_geti(L, 1, pos + 1);\n    lua_seti(L, 1, pos);\n    /* t[pos] = t[pos + 1] */\n  }\n\n  lua_pushnil(L);\n  lua_seti(L, 1, pos);\n  /* t[pos] = nil */\n\n  return 1;\n};\n/*\n** Copy elements (1[f], ..., 1[e]) into (tt[t], tt[t+1], ...). Whenever\n** possible, copy in increasing order, which is better for rehashing.\n** "possible" means destination after original range, or smaller\n** than origin, or copying to another table.\n*/\n\n\nvar tmove = function tmove(L) {\n  var f = luaL_checkinteger(L, 2);\n  var e = luaL_checkinteger(L, 3);\n  var t = luaL_checkinteger(L, 4);\n  var tt = !lua_isnoneornil(L, 5) ? 5 : 1;\n  /* destination table */\n\n  checktab(L, 1, TAB_R);\n  checktab(L, tt, TAB_W);\n\n  if (e >= f) {\n    /* otherwise, nothing to move */\n    luaL_argcheck(L, f > 0 || e < LUA_MAXINTEGER + f, 3, "too many elements to move");\n    var n = e - f + 1;\n    /* number of elements to move */\n\n    luaL_argcheck(L, t <= LUA_MAXINTEGER - n + 1, 4, "destination wrap around");\n\n    if (t > e || t <= f || tt !== 1 && lua_compare(L, 1, tt, LUA_OPEQ) !== 1) {\n      for (var i = 0; i < n; i++) {\n        lua_geti(L, 1, f + i);\n        lua_seti(L, tt, t + i);\n      }\n    } else {\n      for (var _i = n - 1; _i >= 0; _i--) {\n        lua_geti(L, 1, f + _i);\n        lua_seti(L, tt, t + _i);\n      }\n    }\n  }\n\n  lua_pushvalue(L, tt);\n  /* return destination table */\n\n  return 1;\n};\n\nvar tconcat = function tconcat(L) {\n  var last = aux_getn(L, 1, TAB_R);\n  var sep = luaL_optlstring(L, 2, "");\n  var lsep = sep.length;\n  var i = luaL_optinteger(L, 3, 1);\n  last = luaL_optinteger(L, 4, last);\n  var b = new luaL_Buffer();\n  luaL_buffinit(L, b);\n\n  for (; i < last; i++) {\n    addfield(L, b, i);\n    luaL_addlstring(b, sep, lsep);\n  }\n\n  if (i === last) addfield(L, b, i);\n  luaL_pushresult(b);\n  return 1;\n};\n\nvar pack = function pack(L) {\n  var n = lua_gettop(L);\n  /* number of elements to pack */\n\n  lua_createtable(L, n, 1);\n  /* create result table */\n\n  lua_insert(L, 1);\n  /* put it at index 1 */\n\n  for (var i = n; i >= 1; i--) {\n    /* assign elements */\n    lua_seti(L, 1, i);\n  }\n\n  lua_pushinteger(L, n);\n  lua_setfield(L, 1, to_luastring("n"));\n  /* t.n = number of elements */\n\n  return 1;\n  /* return table */\n};\n\nvar unpack = function unpack(L) {\n  var i = luaL_optinteger(L, 2, 1);\n  var e = luaL_opt(L, luaL_checkinteger, 3, luaL_len(L, 1));\n  if (i > e) return 0;\n  /* empty range */\n\n  var n = e - i;\n  /* number of elements minus 1 (avoid overflows) */\n\n  if (n >= Number.MAX_SAFE_INTEGER || !lua_checkstack(L, ++n)) return luaL_error(L, to_luastring("too many results to unpack"));\n\n  for (; i < e; i++) {\n    /* push arg[i..e - 1] (to avoid overflows) */\n    lua_geti(L, 1, i);\n  }\n\n  lua_geti(L, 1, e);\n  /* push last element */\n\n  return n;\n};\n\nvar l_randomizePivot = function l_randomizePivot() {\n  return Math.floor(Math.random() * 0x100000000);\n};\n\nvar RANLIMIT = 100;\n\nvar set2 = function set2(L, i, j) {\n  lua_seti(L, 1, i);\n  lua_seti(L, 1, j);\n};\n\nvar sort_comp = function sort_comp(L, a, b) {\n  if (lua_isnil(L, 2))\n    /* no function? */\n    return lua_compare(L, a, b, LUA_OPLT);\n    /* a < b */\n  else {\n      /* function */\n      lua_pushvalue(L, 2);\n      /* push function */\n\n      lua_pushvalue(L, a - 1);\n      /* -1 to compensate function */\n\n      lua_pushvalue(L, b - 2);\n      /* -2 to compensate function and \'a\' */\n\n      lua_call(L, 2, 1);\n      /* call function */\n\n      var res = lua_toboolean(L, -1);\n      /* get result */\n\n      lua_pop(L, 1);\n      /* pop result */\n\n      return res;\n    }\n};\n\nvar partition = function partition(L, lo, up) {\n  var i = lo;\n  /* will be incremented before first use */\n\n  var j = up - 1;\n  /* will be decremented before first use */\n\n  /* loop invariant: a[lo .. i] <= P <= a[j .. up] */\n\n  for (;;) {\n    /* next loop: repeat ++i while a[i] < P */\n    while (lua_geti(L, 1, ++i), sort_comp(L, -1, -2)) {\n      if (i == up - 1)\n        /* a[i] < P  but a[up - 1] == P  ?? */\n        luaL_error(L, to_luastring("invalid order function for sorting"));\n      lua_pop(L, 1);\n      /* remove a[i] */\n    }\n    /* after the loop, a[i] >= P and a[lo .. i - 1] < P */\n\n    /* next loop: repeat --j while P < a[j] */\n\n\n    while (lua_geti(L, 1, --j), sort_comp(L, -3, -1)) {\n      if (j < i)\n        /* j < i  but  a[j] > P ?? */\n        luaL_error(L, to_luastring("invalid order function for sorting"));\n      lua_pop(L, 1);\n      /* remove a[j] */\n    }\n    /* after the loop, a[j] <= P and a[j + 1 .. up] >= P */\n\n\n    if (j < i) {\n      /* no elements out of place? */\n\n      /* a[lo .. i - 1] <= P <= a[j + 1 .. i .. up] */\n      lua_pop(L, 1);\n      /* pop a[j] */\n\n      /* swap pivot (a[up - 1]) with a[i] to satisfy pos-condition */\n\n      set2(L, up - 1, i);\n      return i;\n    }\n    /* otherwise, swap a[i] - a[j] to restore invariant and repeat */\n\n\n    set2(L, i, j);\n  }\n};\n\nvar choosePivot = function choosePivot(lo, up, rnd) {\n  var r4 = Math.floor((up - lo) / 4);\n  /* range/4 */\n\n  var p = rnd % (r4 * 2) + (lo + r4);\n  lualib.lua_assert(lo + r4 <= p && p <= up - r4);\n  return p;\n};\n\nvar auxsort = function auxsort(L, lo, up, rnd) {\n  while (lo < up) {\n    /* loop for tail recursion */\n\n    /* sort elements \'lo\', \'p\', and \'up\' */\n    lua_geti(L, 1, lo);\n    lua_geti(L, 1, up);\n    if (sort_comp(L, -1, -2))\n      /* a[up] < a[lo]? */\n      set2(L, lo, up);\n      /* swap a[lo] - a[up] */\n    else lua_pop(L, 2);\n    /* remove both values */\n\n    if (up - lo == 1)\n      /* only 2 elements? */\n      return;\n    /* already sorted */\n\n    var p = void 0;\n    /* Pivot index */\n\n    if (up - lo < RANLIMIT || rnd === 0)\n      /* small interval or no randomize? */\n      p = Math.floor((lo + up) / 2);\n      /* middle element is a good pivot */\n    else\n      /* for larger intervals, it is worth a random pivot */\n      p = choosePivot(lo, up, rnd);\n    lua_geti(L, 1, p);\n    lua_geti(L, 1, lo);\n    if (sort_comp(L, -2, -1))\n      /* a[p] < a[lo]? */\n      set2(L, p, lo);\n      /* swap a[p] - a[lo] */\n    else {\n        lua_pop(L, 1);\n        /* remove a[lo] */\n\n        lua_geti(L, 1, up);\n        if (sort_comp(L, -1, -2))\n          /* a[up] < a[p]? */\n          set2(L, p, up);\n          /* swap a[up] - a[p] */\n        else lua_pop(L, 2);\n      }\n    if (up - lo == 2)\n      /* only 3 elements? */\n      return;\n    /* already sorted */\n\n    lua_geti(L, 1, p);\n    /* get middle element (Pivot) */\n\n    lua_pushvalue(L, -1);\n    /* push Pivot */\n\n    lua_geti(L, 1, up - 1);\n    /* push a[up - 1] */\n\n    set2(L, p, up - 1);\n    /* swap Pivot (a[p]) with a[up - 1] */\n\n    p = partition(L, lo, up);\n    var n = void 0;\n    /* a[lo .. p - 1] <= a[p] == P <= a[p + 1 .. up] */\n\n    if (p - lo < up - p) {\n      /* lower interval is smaller? */\n      auxsort(L, lo, p - 1, rnd);\n      /* call recursively for lower interval */\n\n      n = p - lo;\n      /* size of smaller interval */\n\n      lo = p + 1;\n      /* tail call for [p + 1 .. up] (upper interval) */\n    } else {\n      auxsort(L, p + 1, up, rnd);\n      /* call recursively for upper interval */\n\n      n = up - p;\n      /* size of smaller interval */\n\n      up = p - 1;\n      /* tail call for [lo .. p - 1]  (lower interval) */\n    }\n\n    if ((up - lo) / 128 > n)\n      /* partition too imbalanced? */\n      rnd = l_randomizePivot();\n    /* try a new randomization */\n  }\n  /* tail call auxsort(L, lo, up, rnd) */\n\n};\n\nvar sort = function sort(L) {\n  var n = aux_getn(L, 1, TAB_RW);\n\n  if (n > 1) {\n    /* non-trivial interval? */\n    luaL_argcheck(L, n < LUA_MAXINTEGER, 1, "array too big");\n    if (!lua_isnoneornil(L, 2))\n      /* is there a 2nd argument? */\n      luaL_checktype(L, 2, LUA_TFUNCTION);\n    /* must be a function */\n\n    lua_settop(L, 2);\n    /* make sure there are two arguments */\n\n    auxsort(L, 1, n, 0);\n  }\n\n  return 0;\n};\n\nvar tab_funcs = {\n  "concat": tconcat,\n  "insert": tinsert,\n  "move": tmove,\n  "pack": pack,\n  "remove": tremove,\n  "sort": sort,\n  "unpack": unpack\n};\n\nvar luaopen_table = function luaopen_table(L) {\n  luaL_newlib(L, tab_funcs);\n  return 1;\n};\n\nmodule.exports.luaopen_table = luaopen_table;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///26\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nvar _require = __webpack_require__(2),\n    LUA_TNIL = _require.LUA_TNIL,\n    LUA_TTABLE = _require.LUA_TTABLE,\n    lua_close = _require.lua_close,\n    lua_createtable = _require.lua_createtable,\n    lua_getfield = _require.lua_getfield,\n    lua_isboolean = _require.lua_isboolean,\n    lua_isnoneornil = _require.lua_isnoneornil,\n    lua_pop = _require.lua_pop,\n    lua_pushboolean = _require.lua_pushboolean,\n    lua_pushfstring = _require.lua_pushfstring,\n    lua_pushinteger = _require.lua_pushinteger,\n    lua_pushliteral = _require.lua_pushliteral,\n    lua_pushnil = _require.lua_pushnil,\n    lua_pushnumber = _require.lua_pushnumber,\n    lua_pushstring = _require.lua_pushstring,\n    lua_setfield = _require.lua_setfield,\n    lua_settop = _require.lua_settop,\n    lua_toboolean = _require.lua_toboolean,\n    lua_tointegerx = _require.lua_tointegerx;\n\nvar _require2 = __webpack_require__(7),\n    luaL_Buffer = _require2.luaL_Buffer,\n    luaL_addchar = _require2.luaL_addchar,\n    luaL_addstring = _require2.luaL_addstring,\n    luaL_argerror = _require2.luaL_argerror,\n    luaL_buffinit = _require2.luaL_buffinit,\n    luaL_checkinteger = _require2.luaL_checkinteger,\n    luaL_checkstring = _require2.luaL_checkstring,\n    luaL_checktype = _require2.luaL_checktype,\n    luaL_error = _require2.luaL_error,\n    luaL_execresult = _require2.luaL_execresult,\n    luaL_fileresult = _require2.luaL_fileresult,\n    luaL_newlib = _require2.luaL_newlib,\n    luaL_optinteger = _require2.luaL_optinteger,\n    luaL_optlstring = _require2.luaL_optlstring,\n    luaL_optstring = _require2.luaL_optstring,\n    luaL_pushresult = _require2.luaL_pushresult;\n\nvar _require3 = __webpack_require__(5),\n    luastring_eq = _require3.luastring_eq,\n    to_jsstring = _require3.to_jsstring,\n    to_luastring = _require3.to_luastring;\n/* options for ANSI C 89 (only 1-char options) */\n// const L_STRFTIMEC89 = to_luastring("aAbBcdHIjmMpSUwWxXyYZ%");\n// const LUA_STRFTIMEOPTIONS = L_STRFTIMEC89;\n\n/* options for ISO C 99 and POSIX */\n// const L_STRFTIMEC99 = to_luastring("aAbBcCdDeFgGhHIjmMnprRStTuUVwWxXyYzZ%||EcECExEXEyEYOdOeOHOIOmOMOSOuOUOVOwOWOy");  /* two-char options */\n// const LUA_STRFTIMEOPTIONS = L_STRFTIMEC99;\n\n/* options for Windows */\n// const L_STRFTIMEWIN = to_luastring("aAbBcdHIjmMpSUwWxXyYzZ%||#c#x#d#H#I#j#m#M#S#U#w#W#y#Y");  /* two-char options */\n// const LUA_STRFTIMEOPTIONS = L_STRFTIMEWIN;\n\n/* options for our own strftime implementation\n  - should be superset of C89 options for compat\n  - missing from C99:\n      - ISO 8601 week specifiers: gGV\n      - > single char specifiers\n  - beyond C99:\n      - %k: TZ extension: space-padded 24-hour\n      - %l: TZ extension: space-padded 12-hour\n      - %P: GNU extension: lower-case am/pm\n*/\n\n\nvar LUA_STRFTIMEOPTIONS = to_luastring("aAbBcCdDeFhHIjklmMnpPrRStTuUwWxXyYzZ%");\n\nvar setfield = function setfield(L, key, value) {\n  lua_pushinteger(L, value);\n  lua_setfield(L, -2, to_luastring(key, true));\n};\n\nvar setallfields = function setallfields(L, time, utc) {\n  setfield(L, "sec", utc ? time.getUTCSeconds() : time.getSeconds());\n  setfield(L, "min", utc ? time.getUTCMinutes() : time.getMinutes());\n  setfield(L, "hour", utc ? time.getUTCHours() : time.getHours());\n  setfield(L, "day", utc ? time.getUTCDate() : time.getDate());\n  setfield(L, "month", (utc ? time.getUTCMonth() : time.getMonth()) + 1);\n  setfield(L, "year", utc ? time.getUTCFullYear() : time.getFullYear());\n  setfield(L, "wday", (utc ? time.getUTCDay() : time.getDay()) + 1);\n  setfield(L, "yday", Math.floor((time - new Date(time.getFullYear(), 0, 0\n  /* shortcut to correct day by one */\n  )) / 86400000)); // setboolfield(L, "isdst", time.get);\n};\n\nvar L_MAXDATEFIELD = Number.MAX_SAFE_INTEGER / 2;\n\nvar getfield = function getfield(L, key, d, delta) {\n  var t = lua_getfield(L, -1, to_luastring(key, true));\n  /* get field and its type */\n\n  var res = lua_tointegerx(L, -1);\n\n  if (res === false) {\n    /* field is not an integer? */\n    if (t !== LUA_TNIL)\n      /* some other value? */\n      return luaL_error(L, to_luastring("field \'%s\' is not an integer"), key);else if (d < 0)\n      /* absent field; no default? */\n      return luaL_error(L, to_luastring("field \'%s\' missing in date table"), key);\n    res = d;\n  } else {\n    if (!(-L_MAXDATEFIELD <= res && res <= L_MAXDATEFIELD)) return luaL_error(L, to_luastring("field \'%s\' is out-of-bound"), key);\n    res -= delta;\n  }\n\n  lua_pop(L, 1);\n  return res;\n};\n\nvar locale = {\n  days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"].map(function (s) {\n    return to_luastring(s);\n  }),\n  shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"].map(function (s) {\n    return to_luastring(s);\n  }),\n  months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"].map(function (s) {\n    return to_luastring(s);\n  }),\n  shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"].map(function (s) {\n    return to_luastring(s);\n  }),\n  AM: to_luastring("AM"),\n  PM: to_luastring("PM"),\n  am: to_luastring("am"),\n  pm: to_luastring("pm"),\n  formats: {\n    c: to_luastring("%a %b %e %H:%M:%S %Y"),\n    D: to_luastring("%m/%d/%y"),\n    F: to_luastring("%Y-%m-%d"),\n    R: to_luastring("%H:%M"),\n    r: to_luastring("%I:%M:%S %p"),\n    T: to_luastring("%H:%M:%S"),\n    X: to_luastring("%T"),\n    x: to_luastring("%D")\n  }\n};\n\nvar week_number = function week_number(date, start_of_week) {\n  // This works by shifting the weekday back by one day if we\n  // are treating Monday as the first day of the week.\n  var weekday = date.getDay();\n\n  if (start_of_week === \'monday\') {\n    if (weekday === 0) // Sunday\n      weekday = 6;else weekday--;\n  }\n\n  var yday = (date - new Date(date.getFullYear(), 0, 1)) / 86400000;\n  return Math.floor((yday + 7 - weekday) / 7);\n};\n\nvar push_pad_2 = function push_pad_2(b, n, pad) {\n  if (n < 10) luaL_addchar(b, pad);\n  luaL_addstring(b, to_luastring(String(n)));\n};\n\nvar strftime = function strftime(L, b, s, date) {\n  var i = 0;\n\n  while (i < s.length) {\n    if (s[i] !== 37\n    /* % */\n    ) {\n        /* not a conversion specifier? */\n        luaL_addchar(b, s[i++]);\n      } else {\n      i++;\n      /* skip \'%\' */\n\n      var len = checkoption(L, s, i);\n      /* each `case` has an example output above it for the UTC epoch */\n\n      switch (s[i]) {\n        // \'%\'\n        case 37\n        /* % */\n        :\n          luaL_addchar(b, 37);\n          break;\n        // \'Thursday\'\n\n        case 65\n        /* A */\n        :\n          luaL_addstring(b, locale.days[date.getDay()]);\n          break;\n        // \'January\'\n\n        case 66\n        /* B */\n        :\n          luaL_addstring(b, locale.months[date.getMonth()]);\n          break;\n        // \'19\'\n\n        case 67\n        /* C */\n        :\n          push_pad_2(b, Math.floor(date.getFullYear() / 100), 48\n          /* 0 */\n          );\n          break;\n        // \'01/01/70\'\n\n        case 68\n        /* D */\n        :\n          strftime(L, b, locale.formats.D, date);\n          break;\n        // \'1970-01-01\'\n\n        case 70\n        /* F */\n        :\n          strftime(L, b, locale.formats.F, date);\n          break;\n        // \'00\'\n\n        case 72\n        /* H */\n        :\n          push_pad_2(b, date.getHours(), 48\n          /* 0 */\n          );\n          break;\n        // \'12\'\n\n        case 73\n        /* I */\n        :\n          push_pad_2(b, (date.getHours() + 11) % 12 + 1, 48\n          /* 0 */\n          );\n          break;\n        // \'00\'\n\n        case 77\n        /* M */\n        :\n          push_pad_2(b, date.getMinutes(), 48\n          /* 0 */\n          );\n          break;\n        // \'am\'\n\n        case 80\n        /* P */\n        :\n          luaL_addstring(b, date.getHours() < 12 ? locale.am : locale.pm);\n          break;\n        // \'00:00\'\n\n        case 82\n        /* R */\n        :\n          strftime(L, b, locale.formats.R, date);\n          break;\n        // \'00\'\n\n        case 83\n        /* S */\n        :\n          push_pad_2(b, date.getSeconds(), 48\n          /* 0 */\n          );\n          break;\n        // \'00:00:00\'\n\n        case 84\n        /* T */\n        :\n          strftime(L, b, locale.formats.T, date);\n          break;\n        // \'00\'\n\n        case 85\n        /* U */\n        :\n          push_pad_2(b, week_number(date, "sunday"), 48\n          /* 0 */\n          );\n          break;\n        // \'00\'\n\n        case 87\n        /* W */\n        :\n          push_pad_2(b, week_number(date, "monday"), 48\n          /* 0 */\n          );\n          break;\n        // \'16:00:00\'\n\n        case 88\n        /* X */\n        :\n          strftime(L, b, locale.formats.X, date);\n          break;\n        // \'1970\'\n\n        case 89\n        /* Y */\n        :\n          luaL_addstring(b, to_luastring(String(date.getFullYear())));\n          break;\n        // \'GMT\'\n\n        case 90\n        /* Z */\n        :\n          {\n            var tzString = date.toString().match(/\\(([\\w\\s]+)\\)/);\n            if (tzString) luaL_addstring(b, to_luastring(tzString[1]));\n            break;\n          }\n        // \'Thu\'\n\n        case 97\n        /* a */\n        :\n          luaL_addstring(b, locale.shortDays[date.getDay()]);\n          break;\n        // \'Jan\'\n\n        case 98\n        /* b */\n        :\n        case 104\n        /* h */\n        :\n          luaL_addstring(b, locale.shortMonths[date.getMonth()]);\n          break;\n        // \'\'\n\n        case 99\n        /* c */\n        :\n          strftime(L, b, locale.formats.c, date);\n          break;\n        // \'01\'\n\n        case 100\n        /* d */\n        :\n          push_pad_2(b, date.getDate(), 48\n          /* 0 */\n          );\n          break;\n        // \' 1\'\n\n        case 101\n        /* e */\n        :\n          push_pad_2(b, date.getDate(), 32\n          /* space */\n          );\n          break;\n        // \'000\'\n\n        case 106\n        /* j */\n        :\n          {\n            var yday = Math.floor((date - new Date(date.getFullYear(), 0, 1)) / 86400000);\n\n            if (yday < 100) {\n              if (yday < 10) luaL_addchar(b, 48\n              /* 0 */\n              );\n              luaL_addchar(b, 48\n              /* 0 */\n              );\n            }\n\n            luaL_addstring(b, to_luastring(String(yday)));\n            break;\n          }\n        // \' 0\'\n\n        case 107\n        /* k */\n        :\n          push_pad_2(b, date.getHours(), 32\n          /* space */\n          );\n          break;\n        // \'12\'\n\n        case 108\n        /* l */\n        :\n          push_pad_2(b, (date.getHours() + 11) % 12 + 1, 32\n          /* space */\n          );\n          break;\n        // \'01\'\n\n        case 109\n        /* m */\n        :\n          push_pad_2(b, date.getMonth() + 1, 48\n          /* 0 */\n          );\n          break;\n        // \'\\n\'\n\n        case 110\n        /* n */\n        :\n          luaL_addchar(b, 10);\n          break;\n        // \'AM\'\n\n        case 112\n        /* p */\n        :\n          luaL_addstring(b, date.getHours() < 12 ? locale.AM : locale.PM);\n          break;\n        // \'12:00:00 AM\'\n\n        case 114\n        /* r */\n        :\n          strftime(L, b, locale.formats.r, date);\n          break;\n        // \'0\'\n\n        case 115\n        /* s */\n        :\n          luaL_addstring(b, to_luastring(String(Math.floor(date / 1000))));\n          break;\n        // \'\\t\'\n\n        case 116\n        /* t */\n        :\n          luaL_addchar(b, 8);\n          break;\n        // \'4\'\n\n        case 117\n        /* u */\n        :\n          {\n            var day = date.getDay();\n            luaL_addstring(b, to_luastring(String(day === 0 ? 7 : day)));\n            break;\n          }\n        // \'4\'\n\n        case 119\n        /* w */\n        :\n          luaL_addstring(b, to_luastring(String(date.getDay())));\n          break;\n        // \'12/31/69\'\n\n        case 120\n        /* x */\n        :\n          strftime(L, b, locale.formats.x, date);\n          break;\n        // \'70\'\n\n        case 121\n        /* y */\n        :\n          push_pad_2(b, date.getFullYear() % 100, 48\n          /* 0 */\n          );\n          break;\n        // \'+0000\'\n\n        case 122\n        /* z */\n        :\n          {\n            var off = date.getTimezoneOffset();\n\n            if (off > 0) {\n              luaL_addchar(b, 45\n              /* - */\n              );\n            } else {\n              off = -off;\n              luaL_addchar(b, 43\n              /* + */\n              );\n            }\n\n            push_pad_2(b, Math.floor(off / 60), 48\n            /* 0 */\n            );\n            push_pad_2(b, off % 60, 48\n            /* 0 */\n            );\n            break;\n          }\n      }\n\n      i += len;\n    }\n  }\n};\n\nvar checkoption = function checkoption(L, conv, i) {\n  var option = LUA_STRFTIMEOPTIONS;\n  var o = 0;\n  var oplen = 1;\n  /* length of options being checked */\n\n  for (; o < option.length && oplen <= conv.length - i; o += oplen) {\n    if (option[o] === \'|\'.charCodeAt(0))\n      /* next block? */\n      oplen++;\n      /* will check options with next length (+1) */\n    else if (luastring_eq(conv.subarray(i, i + oplen), option.subarray(o, o + oplen))) {\n        /* match? */\n        return oplen;\n        /* return length */\n      }\n  }\n\n  luaL_argerror(L, 1, lua_pushfstring(L, to_luastring("invalid conversion specifier \'%%%s\'"), conv));\n};\n/* maximum size for an individual \'strftime\' item */\n// const SIZETIMEFMT = 250;\n\n\nvar os_date = function os_date(L) {\n  var s = luaL_optlstring(L, 1, "%c");\n  var stm = lua_isnoneornil(L, 2) ? new Date() : new Date(l_checktime(L, 2) * 1000);\n  var utc = false;\n  var i = 0;\n\n  if (s[i] === \'!\'.charCodeAt(0)) {\n    /* UTC? */\n    utc = true;\n    i++;\n    /* skip \'!\' */\n  }\n\n  if (s[i] === "*".charCodeAt(0) && s[i + 1] === "t".charCodeAt(0)) {\n    lua_createtable(L, 0, 9);\n    /* 9 = number of fields */\n\n    setallfields(L, stm, utc);\n  } else {\n    var cc = new Uint8Array(4);\n    cc[0] = "%".charCodeAt(0);\n    var b = new luaL_Buffer();\n    luaL_buffinit(L, b);\n    strftime(L, b, s, stm);\n    luaL_pushresult(b);\n  }\n\n  return 1;\n};\n\nvar os_time = function os_time(L) {\n  var t;\n  if (lua_isnoneornil(L, 1))\n    /* called without args? */\n    t = new Date();\n    /* get current time */\n  else {\n      luaL_checktype(L, 1, LUA_TTABLE);\n      lua_settop(L, 1);\n      /* make sure table is at the top */\n\n      t = new Date(getfield(L, "year", -1, 0), getfield(L, "month", -1, 1), getfield(L, "day", -1, 0), getfield(L, "hour", 12, 0), getfield(L, "min", 0, 0), getfield(L, "sec", 0, 0));\n      setallfields(L, t);\n    }\n  lua_pushinteger(L, Math.floor(t / 1000));\n  return 1;\n};\n\nvar l_checktime = function l_checktime(L, arg) {\n  var t = luaL_checkinteger(L, arg); // luaL_argcheck(L, t, arg, "time out-of-bounds");\n\n  return t;\n};\n\nvar os_difftime = function os_difftime(L) {\n  var t1 = l_checktime(L, 1);\n  var t2 = l_checktime(L, 2);\n  lua_pushnumber(L, t1 - t2);\n  return 1;\n};\n\nvar syslib = {\n  "date": os_date,\n  "difftime": os_difftime,\n  "time": os_time\n};\n\nif (true) {\n  syslib.clock = function (L) {\n    lua_pushnumber(L, performance.now() / 1000);\n    return 1;\n  };\n} else { var lua_tmpname, child_process, tmp, fs; }\n\nvar luaopen_os = function luaopen_os(L) {\n  luaL_newlib(L, syslib);\n  return 1;\n};\n\nmodule.exports.luaopen_os = luaopen_os;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///27\n')},function(module,exports,__webpack_require__){"use strict";eval("\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar _require = __webpack_require__(38),\n    sprintf = _require.sprintf;\n\nvar _require2 = __webpack_require__(3),\n    LUA_INTEGER_FMT = _require2.LUA_INTEGER_FMT,\n    LUA_INTEGER_FRMLEN = _require2.LUA_INTEGER_FRMLEN,\n    LUA_MININTEGER = _require2.LUA_MININTEGER,\n    LUA_NUMBER_FMT = _require2.LUA_NUMBER_FMT,\n    LUA_NUMBER_FRMLEN = _require2.LUA_NUMBER_FRMLEN,\n    frexp = _require2.frexp,\n    lua_getlocaledecpoint = _require2.lua_getlocaledecpoint;\n\nvar _require3 = __webpack_require__(2),\n    LUA_TBOOLEAN = _require3.LUA_TBOOLEAN,\n    LUA_TFUNCTION = _require3.LUA_TFUNCTION,\n    LUA_TNIL = _require3.LUA_TNIL,\n    LUA_TNUMBER = _require3.LUA_TNUMBER,\n    LUA_TSTRING = _require3.LUA_TSTRING,\n    LUA_TTABLE = _require3.LUA_TTABLE,\n    lua_call = _require3.lua_call,\n    lua_createtable = _require3.lua_createtable,\n    lua_dump = _require3.lua_dump,\n    lua_gettable = _require3.lua_gettable,\n    lua_gettop = _require3.lua_gettop,\n    lua_isinteger = _require3.lua_isinteger,\n    lua_isstring = _require3.lua_isstring,\n    lua_pop = _require3.lua_pop,\n    lua_pushcclosure = _require3.lua_pushcclosure,\n    lua_pushinteger = _require3.lua_pushinteger,\n    lua_pushlightuserdata = _require3.lua_pushlightuserdata,\n    lua_pushliteral = _require3.lua_pushliteral,\n    lua_pushlstring = _require3.lua_pushlstring,\n    lua_pushnil = _require3.lua_pushnil,\n    lua_pushnumber = _require3.lua_pushnumber,\n    lua_pushstring = _require3.lua_pushstring,\n    lua_pushvalue = _require3.lua_pushvalue,\n    lua_remove = _require3.lua_remove,\n    lua_setfield = _require3.lua_setfield,\n    lua_setmetatable = _require3.lua_setmetatable,\n    lua_settop = _require3.lua_settop,\n    lua_toboolean = _require3.lua_toboolean,\n    lua_tointeger = _require3.lua_tointeger,\n    lua_tonumber = _require3.lua_tonumber,\n    lua_tostring = _require3.lua_tostring,\n    lua_touserdata = _require3.lua_touserdata,\n    lua_type = _require3.lua_type,\n    lua_upvalueindex = _require3.lua_upvalueindex;\n\nvar _require4 = __webpack_require__(7),\n    luaL_Buffer = _require4.luaL_Buffer,\n    luaL_addchar = _require4.luaL_addchar,\n    luaL_addlstring = _require4.luaL_addlstring,\n    luaL_addsize = _require4.luaL_addsize,\n    luaL_addstring = _require4.luaL_addstring,\n    luaL_addvalue = _require4.luaL_addvalue,\n    luaL_argcheck = _require4.luaL_argcheck,\n    luaL_argerror = _require4.luaL_argerror,\n    luaL_buffinit = _require4.luaL_buffinit,\n    luaL_buffinitsize = _require4.luaL_buffinitsize,\n    luaL_checkinteger = _require4.luaL_checkinteger,\n    luaL_checknumber = _require4.luaL_checknumber,\n    luaL_checkstack = _require4.luaL_checkstack,\n    luaL_checkstring = _require4.luaL_checkstring,\n    luaL_checktype = _require4.luaL_checktype,\n    luaL_error = _require4.luaL_error,\n    luaL_newlib = _require4.luaL_newlib,\n    luaL_optinteger = _require4.luaL_optinteger,\n    luaL_optstring = _require4.luaL_optstring,\n    luaL_prepbuffsize = _require4.luaL_prepbuffsize,\n    luaL_pushresult = _require4.luaL_pushresult,\n    luaL_pushresultsize = _require4.luaL_pushresultsize,\n    luaL_tolstring = _require4.luaL_tolstring,\n    luaL_typename = _require4.luaL_typename;\n\nvar lualib = __webpack_require__(17);\n\nvar _require5 = __webpack_require__(5),\n    luastring_eq = _require5.luastring_eq,\n    luastring_indexOf = _require5.luastring_indexOf,\n    to_jsstring = _require5.to_jsstring,\n    to_luastring = _require5.to_luastring;\n\nvar sL_ESC = '%';\nvar L_ESC = sL_ESC.charCodeAt(0);\n/*\n** maximum number of captures that a pattern can do during\n** pattern-matching. This limit is arbitrary, but must fit in\n** an unsigned char.\n*/\n\nvar LUA_MAXCAPTURES = 32; // (sizeof(size_t) < sizeof(int) ? MAX_SIZET : (size_t)(INT_MAX))\n\nvar MAXSIZE = 2147483647;\n/* Give natural (i.e. strings end at the first \\0) length of a string represented by an array of bytes */\n\nvar strlen = function strlen(s) {\n  var len = luastring_indexOf(s, 0);\n  return len > -1 ? len : s.length;\n};\n/* translate a relative string position: negative means back from end */\n\n\nvar posrelat = function posrelat(pos, len) {\n  if (pos >= 0) return pos;else if (0 - pos > len) return 0;else return len + pos + 1;\n};\n\nvar str_sub = function str_sub(L) {\n  var s = luaL_checkstring(L, 1);\n  var l = s.length;\n  var start = posrelat(luaL_checkinteger(L, 2), l);\n  var end = posrelat(luaL_optinteger(L, 3, -1), l);\n  if (start < 1) start = 1;\n  if (end > l) end = l;\n  if (start <= end) lua_pushstring(L, s.subarray(start - 1, start - 1 + (end - start + 1)));else lua_pushliteral(L, \"\");\n  return 1;\n};\n\nvar str_len = function str_len(L) {\n  lua_pushinteger(L, luaL_checkstring(L, 1).length);\n  return 1;\n};\n\nvar str_char = function str_char(L) {\n  var n = lua_gettop(L);\n  /* number of arguments */\n\n  var b = new luaL_Buffer();\n  var p = luaL_buffinitsize(L, b, n);\n\n  for (var i = 1; i <= n; i++) {\n    var c = luaL_checkinteger(L, i);\n    luaL_argcheck(L, c >= 0 && c <= 255, \"value out of range\"); // Strings are 8-bit clean\n\n    p[i - 1] = c;\n  }\n\n  luaL_pushresultsize(b, n);\n  return 1;\n};\n\nvar writer = function writer(L, b, size, B) {\n  luaL_addlstring(B, b, size);\n  return 0;\n};\n\nvar str_dump = function str_dump(L) {\n  var b = new luaL_Buffer();\n  var strip = lua_toboolean(L, 2);\n  luaL_checktype(L, 1, LUA_TFUNCTION);\n  lua_settop(L, 1);\n  luaL_buffinit(L, b);\n  if (lua_dump(L, writer, b, strip) !== 0) return luaL_error(L, to_luastring(\"unable to dump given function\"));\n  luaL_pushresult(b);\n  return 1;\n};\n\nvar SIZELENMOD = LUA_NUMBER_FRMLEN.length + 1;\nvar L_NBFD = 1;\n\nvar num2straux = function num2straux(x) {\n  /* if 'inf' or 'NaN', format it like '%g' */\n  if (Object.is(x, Infinity)) return to_luastring('inf');else if (Object.is(x, -Infinity)) return to_luastring('-inf');else if (Number.isNaN(x)) return to_luastring('nan');else if (x === 0) {\n    /* can be -0... */\n\n    /* create \"0\" or \"-0\" followed by exponent */\n    var zero = sprintf(LUA_NUMBER_FMT + \"x0p+0\", x);\n    if (Object.is(x, -0)) zero = \"-\" + zero;\n    return to_luastring(zero);\n  } else {\n    var buff = \"\";\n    var fe = frexp(x);\n    /* 'x' fraction and exponent */\n\n    var m = fe[0];\n    var e = fe[1];\n\n    if (m < 0) {\n      /* is number negative? */\n      buff += '-';\n      /* add signal */\n\n      m = -m;\n      /* make it positive */\n    }\n\n    buff += \"0x\";\n    /* add \"0x\" */\n\n    buff += (m * (1 << L_NBFD)).toString(16);\n    e -= L_NBFD;\n    /* this digit goes before the radix point */\n\n    buff += sprintf(\"p%+d\", e);\n    /* add exponent */\n\n    return to_luastring(buff);\n  }\n};\n\nvar lua_number2strx = function lua_number2strx(L, fmt, x) {\n  var buff = num2straux(x);\n\n  if (fmt[SIZELENMOD] === 65\n  /* 'A'.charCodeAt(0) */\n  ) {\n      for (var i = 0; i < buff.length; i++) {\n        var c = buff[i];\n        if (c >= 97)\n          /* toupper */\n          buff[i] = c & 0xdf;\n      }\n    } else if (fmt[SIZELENMOD] !== 97\n  /* 'a'.charCodeAt(0) */\n  ) luaL_error(L, to_luastring(\"modifiers for format '%%a'/'%%A' not implemented\"));\n\n  return buff;\n};\n/*\n** Maximum size of each formatted item. This maximum size is produced\n** by format('%.99f', -maxfloat), and is equal to 99 + 3 ('-', '.',\n** and '\\0') + number of decimal digits to represent maxfloat (which\n** is maximum exponent + 1). (99+3+1 then rounded to 120 for \"extra\n** expenses\", such as locale-dependent stuff)\n*/\n// const MAX_ITEM   = 120;// TODO: + l_mathlim(MAX_10_EXP);\n\n/* valid flags in a format specification */\n\n\nvar FLAGS = to_luastring(\"-+ #0\");\n/*\n** maximum size of each format specification (such as \"%-099.99d\")\n*/\n// const MAX_FORMAT = 32;\n\nvar isalpha = function isalpha(e) {\n  return 97 <= e && e <= 122 || 65 <= e && e <= 90;\n};\n\nvar isdigit = function isdigit(e) {\n  return 48 <= e && e <= 57;\n};\n\nvar iscntrl = function iscntrl(e) {\n  return 0x00 <= e && e <= 0x1f || e === 0x7f;\n};\n\nvar isgraph = function isgraph(e) {\n  return 33 <= e && e <= 126;\n};\n\nvar islower = function islower(e) {\n  return 97 <= e && e <= 122;\n};\n\nvar isupper = function isupper(e) {\n  return 65 <= e && e <= 90;\n};\n\nvar isalnum = function isalnum(e) {\n  return 97 <= e && e <= 122 || 65 <= e && e <= 90 || 48 <= e && e <= 57;\n};\n\nvar ispunct = function ispunct(e) {\n  return isgraph(e) && !isalnum(e);\n};\n\nvar isspace = function isspace(e) {\n  return e === 32 || e >= 9 && e <= 13;\n};\n\nvar isxdigit = function isxdigit(e) {\n  return 48 <= e && e <= 57 || 65 <= e && e <= 70 || 97 <= e && e <= 102;\n};\n\nvar addquoted = function addquoted(b, s, len) {\n  luaL_addchar(b, 34\n  /* '\"'.charCodeAt(0) */\n  );\n  var i = 0;\n\n  while (len--) {\n    if (s[i] === 34\n    /* '\"'.charCodeAt(0) */\n    || s[i] === 92\n    /* '\\\\'.charCodeAt(0) */\n    || s[i] === 10\n    /* '\\n'.charCodeAt(0) */\n    ) {\n        luaL_addchar(b, 92\n        /* '\\\\'.charCodeAt(0) */\n        );\n        luaL_addchar(b, s[i]);\n      } else if (iscntrl(s[i])) {\n      var buff = '' + s[i];\n      if (isdigit(s[i + 1])) buff = '0'.repeat(3 - buff.length) + buff;\n      /* pad to 3 '0's */\n\n      luaL_addstring(b, to_luastring(\"\\\\\" + buff));\n    } else luaL_addchar(b, s[i]);\n\n    i++;\n  }\n\n  luaL_addchar(b, 34\n  /* '\"'.charCodeAt(0) */\n  );\n};\n/*\n** Ensures the 'buff' string uses a dot as the radix character.\n*/\n\n\nvar checkdp = function checkdp(buff) {\n  if (luastring_indexOf(buff, 46\n  /* ('.').charCodeAt(0) */\n  ) < 0) {\n    /* no dot? */\n    var point = lua_getlocaledecpoint();\n    /* try locale point */\n\n    var ppoint = luastring_indexOf(buff, point);\n    if (ppoint) buff[ppoint] = 46\n    /* ('.').charCodeAt(0) */\n    ;\n    /* change it to a dot */\n  }\n};\n\nvar addliteral = function addliteral(L, b, arg) {\n  switch (lua_type(L, arg)) {\n    case LUA_TSTRING:\n      {\n        var s = lua_tostring(L, arg);\n        addquoted(b, s, s.length);\n        break;\n      }\n\n    case LUA_TNUMBER:\n      {\n        var buff;\n\n        if (!lua_isinteger(L, arg)) {\n          /* float? */\n          var n = lua_tonumber(L, arg);\n          /* write as hexa ('%a') */\n\n          buff = lua_number2strx(L, to_luastring(\"%\".concat(LUA_INTEGER_FRMLEN, \"a\")), n);\n          checkdp(buff);\n          /* ensure it uses a dot */\n        } else {\n          /* integers */\n          var _n = lua_tointeger(L, arg);\n\n          var format = _n === LUA_MININTEGER ?\n          /* corner case? */\n          \"0x%\" + LUA_INTEGER_FRMLEN + \"x\"\n          /* use hexa */\n          : LUA_INTEGER_FMT;\n          /* else use default format */\n\n          buff = to_luastring(sprintf(format, _n));\n        }\n\n        luaL_addstring(b, buff);\n        break;\n      }\n\n    case LUA_TNIL:\n    case LUA_TBOOLEAN:\n      {\n        luaL_tolstring(L, arg);\n        luaL_addvalue(b);\n        break;\n      }\n\n    default:\n      {\n        luaL_argerror(L, arg, to_luastring(\"value has no literal form\"));\n      }\n  }\n};\n\nvar scanformat = function scanformat(L, strfrmt, i, form) {\n  var p = i;\n\n  while (strfrmt[p] !== 0 && luastring_indexOf(FLAGS, strfrmt[p]) >= 0) {\n    p++;\n  }\n  /* skip flags */\n\n\n  if (p - i >= FLAGS.length) luaL_error(L, to_luastring(\"invalid format (repeated flags)\"));\n  if (isdigit(strfrmt[p])) p++;\n  /* skip width */\n\n  if (isdigit(strfrmt[p])) p++;\n  /* (2 digits at most) */\n\n  if (strfrmt[p] === 46\n  /* '.'.charCodeAt(0) */\n  ) {\n      p++;\n      if (isdigit(strfrmt[p])) p++;\n      /* skip precision */\n\n      if (isdigit(strfrmt[p])) p++;\n      /* (2 digits at most) */\n    }\n\n  if (isdigit(strfrmt[p])) luaL_error(L, to_luastring(\"invalid format (width or precision too long)\"));\n  form[0] = 37\n  /* \"%\".charCodeAt(0) */\n  ;\n\n  for (var j = 0; j < p - i + 1; j++) {\n    form[j + 1] = strfrmt[i + j];\n  }\n\n  return p;\n};\n/*\n** add length modifier into formats\n*/\n\n\nvar addlenmod = function addlenmod(form, lenmod) {\n  var l = form.length;\n  var lm = lenmod.length;\n  var spec = form[l - 1];\n\n  for (var i = 0; i < lm; i++) {\n    form[i + l - 1] = lenmod[i];\n  }\n\n  form[l + lm - 1] = spec; // form[l + lm] = 0;\n};\n\nvar str_format = function str_format(L) {\n  var top = lua_gettop(L);\n  var arg = 1;\n  var strfrmt = luaL_checkstring(L, arg);\n  var i = 0;\n  var b = new luaL_Buffer();\n  luaL_buffinit(L, b);\n\n  while (i < strfrmt.length) {\n    if (strfrmt[i] !== L_ESC) {\n      luaL_addchar(b, strfrmt[i++]);\n    } else if (strfrmt[++i] === L_ESC) {\n      luaL_addchar(b, strfrmt[i++]);\n      /* %% */\n    } else {\n      /* format item */\n      var form = [];\n      /* to store the format ('%...') */\n\n      if (++arg > top) luaL_argerror(L, arg, to_luastring(\"no value\"));\n      i = scanformat(L, strfrmt, i, form);\n\n      switch (String.fromCharCode(strfrmt[i++])) {\n        case 'c':\n          {\n            // sprintf(String.fromCharCode(...form), luaL_checkinteger(L, arg));\n            luaL_addchar(b, luaL_checkinteger(L, arg));\n            break;\n          }\n\n        case 'd':\n        case 'i':\n        case 'o':\n        case 'u':\n        case 'x':\n        case 'X':\n          {\n            var n = luaL_checkinteger(L, arg);\n            addlenmod(form, to_luastring(LUA_INTEGER_FRMLEN, true));\n            luaL_addstring(b, to_luastring(sprintf(String.fromCharCode.apply(String, form), n)));\n            break;\n          }\n\n        case 'a':\n        case 'A':\n          {\n            addlenmod(form, to_luastring(LUA_INTEGER_FRMLEN, true));\n            luaL_addstring(b, lua_number2strx(L, form, luaL_checknumber(L, arg)));\n            break;\n          }\n\n        case 'e':\n        case 'E':\n        case 'f':\n        case 'g':\n        case 'G':\n          {\n            var _n2 = luaL_checknumber(L, arg);\n\n            addlenmod(form, to_luastring(LUA_INTEGER_FRMLEN, true));\n            luaL_addstring(b, to_luastring(sprintf(String.fromCharCode.apply(String, form), _n2)));\n            break;\n          }\n\n        case 'q':\n          {\n            addliteral(L, b, arg);\n            break;\n          }\n\n        case 's':\n          {\n            var s = luaL_tolstring(L, arg);\n\n            if (form.length <= 2 || form[2] === 0) {\n              /* no modifiers? */\n              luaL_addvalue(b);\n              /* keep entire string */\n            } else {\n              luaL_argcheck(L, s.length === strlen(s), arg, \"string contains zeros\");\n\n              if (luastring_indexOf(form, 46\n              /* '.'.charCodeAt(0) */\n              ) < 0 && s.length >= 100) {\n                /* no precision and string is too long to be formatted */\n                luaL_addvalue(b);\n                /* keep entire string */\n              } else {\n                /* format the string into 'buff' */\n                // TODO: will fail if s is not valid UTF-8\n                luaL_addstring(b, to_luastring(sprintf(String.fromCharCode.apply(String, form), to_jsstring(s))));\n                lua_pop(L, 1);\n                /* remove result from 'luaL_tolstring' */\n              }\n            }\n\n            break;\n          }\n\n        default:\n          {\n            /* also treat cases 'pnLlh' */\n            return luaL_error(L, to_luastring(\"invalid option '%%%c' to 'format'\"), strfrmt[i - 1]);\n          }\n      }\n    }\n  }\n\n  luaL_pushresult(b);\n  return 1;\n};\n/* value used for padding */\n\n\nvar LUAL_PACKPADBYTE = 0x00;\n/* maximum size for the binary representation of an integer */\n\nvar MAXINTSIZE = 16;\nvar SZINT = 4; // Size of lua_Integer\n\n/* number of bits in a character */\n\nvar NB = 8;\n/* mask for one character (NB 1's) */\n\nvar MC = (1 << NB) - 1;\nvar MAXALIGN = 8;\n/*\n** information to pack/unpack stuff\n*/\n\nvar Header = function Header(L) {\n  _classCallCheck(this, Header);\n\n  this.L = L;\n  this.islittle = true;\n  this.maxalign = 1;\n};\n/*\n** options for pack/unpack\n*/\n\n\nvar Kint = 0;\n/* signed integers */\n\nvar Kuint = 1;\n/* unsigned integers */\n\nvar Kfloat = 2;\n/* floating-point numbers */\n\nvar Kchar = 3;\n/* fixed-length strings */\n\nvar Kstring = 4;\n/* strings with prefixed length */\n\nvar Kzstr = 5;\n/* zero-terminated strings */\n\nvar Kpadding = 6;\n/* padding */\n\nvar Kpaddalign = 7;\n/* padding for alignment */\n\nvar Knop = 8;\n/* no-op (configuration or spaces) */\n\nvar digit = isdigit;\n\nvar getnum = function getnum(fmt, df) {\n  if (fmt.off >= fmt.s.length || !digit(fmt.s[fmt.off]))\n    /* no number? */\n    return df;\n    /* return default value */\n  else {\n      var a = 0;\n\n      do {\n        a = a * 10 + (fmt.s[fmt.off++] - 48\n        /* '0'.charCodeAt(0) */\n        );\n      } while (fmt.off < fmt.s.length && digit(fmt.s[fmt.off]) && a <= (MAXSIZE - 9) / 10);\n\n      return a;\n    }\n};\n/*\n** Read an integer numeral and raises an error if it is larger\n** than the maximum size for integers.\n*/\n\n\nvar getnumlimit = function getnumlimit(h, fmt, df) {\n  var sz = getnum(fmt, df);\n  if (sz > MAXINTSIZE || sz <= 0) luaL_error(h.L, to_luastring(\"integral size (%d) out of limits [1,%d]\"), sz, MAXINTSIZE);\n  return sz;\n};\n/*\n** Read and classify next option. 'size' is filled with option's size.\n*/\n\n\nvar getoption = function getoption(h, fmt) {\n  var r = {\n    opt: fmt.s[fmt.off++],\n    size: 0\n    /* default */\n\n  };\n\n  switch (r.opt) {\n    case 98\n    /*'b'*/\n    :\n      r.size = 1;\n      r.opt = Kint;\n      return r;\n    // sizeof(char): 1\n\n    case 66\n    /*'B'*/\n    :\n      r.size = 1;\n      r.opt = Kuint;\n      return r;\n\n    case 104\n    /*'h'*/\n    :\n      r.size = 2;\n      r.opt = Kint;\n      return r;\n    // sizeof(short): 2\n\n    case 72\n    /*'H'*/\n    :\n      r.size = 2;\n      r.opt = Kuint;\n      return r;\n\n    case 108\n    /*'l'*/\n    :\n      r.size = 4;\n      r.opt = Kint;\n      return r;\n    // sizeof(long): 4\n\n    case 76\n    /*'L'*/\n    :\n      r.size = 4;\n      r.opt = Kuint;\n      return r;\n\n    case 106\n    /*'j'*/\n    :\n      r.size = 4;\n      r.opt = Kint;\n      return r;\n    // sizeof(lua_Integer): 4\n\n    case 74\n    /*'J'*/\n    :\n      r.size = 4;\n      r.opt = Kuint;\n      return r;\n\n    case 84\n    /*'T'*/\n    :\n      r.size = 4;\n      r.opt = Kuint;\n      return r;\n    // sizeof(size_t): 4\n\n    case 102\n    /*'f'*/\n    :\n      r.size = 4;\n      r.opt = Kfloat;\n      return r;\n    // sizeof(float): 4\n\n    case 100\n    /*'d'*/\n    :\n      r.size = 8;\n      r.opt = Kfloat;\n      return r;\n    // sizeof(double): 8\n\n    case 110\n    /*'n'*/\n    :\n      r.size = 8;\n      r.opt = Kfloat;\n      return r;\n    // sizeof(lua_Number): 8\n\n    case 105\n    /*'i'*/\n    :\n      r.size = getnumlimit(h, fmt, 4);\n      r.opt = Kint;\n      return r;\n    // sizeof(int): 4\n\n    case 73\n    /*'I'*/\n    :\n      r.size = getnumlimit(h, fmt, 4);\n      r.opt = Kuint;\n      return r;\n\n    case 115\n    /*'s'*/\n    :\n      r.size = getnumlimit(h, fmt, 4);\n      r.opt = Kstring;\n      return r;\n\n    case 99\n    /*'c'*/\n    :\n      {\n        r.size = getnum(fmt, -1);\n        if (r.size === -1) luaL_error(h.L, to_luastring(\"missing size for format option 'c'\"));\n        r.opt = Kchar;\n        return r;\n      }\n\n    case 122\n    /*'z'*/\n    :\n      r.opt = Kzstr;\n      return r;\n\n    case 120\n    /*'x'*/\n    :\n      r.size = 1;\n      r.opt = Kpadding;\n      return r;\n\n    case 88\n    /*'X'*/\n    :\n      r.opt = Kpaddalign;\n      return r;\n\n    case 32\n    /*' '*/\n    :\n      break;\n\n    case 60\n    /*'<'*/\n    :\n      h.islittle = true;\n      break;\n\n    case 62\n    /*'>'*/\n    :\n      h.islittle = false;\n      break;\n\n    case 61\n    /*'='*/\n    :\n      h.islittle = true;\n      break;\n\n    case 33\n    /*'!'*/\n    :\n      h.maxalign = getnumlimit(h, fmt, MAXALIGN);\n      break;\n\n    default:\n      luaL_error(h.L, to_luastring(\"invalid format option '%c'\"), r.opt);\n  }\n\n  r.opt = Knop;\n  return r;\n};\n/*\n** Read, classify, and fill other details about the next option.\n** 'psize' is filled with option's size, 'notoalign' with its\n** alignment requirements.\n** Local variable 'size' gets the size to be aligned. (Kpadal option\n** always gets its full alignment, other options are limited by\n** the maximum alignment ('maxalign'). Kchar option needs no alignment\n** despite its size.\n*/\n\n\nvar getdetails = function getdetails(h, totalsize, fmt) {\n  var r = {\n    opt: NaN,\n    size: NaN,\n    ntoalign: NaN\n  };\n  var opt = getoption(h, fmt);\n  r.size = opt.size;\n  r.opt = opt.opt;\n  var align = r.size;\n  /* usually, alignment follows size */\n\n  if (r.opt === Kpaddalign) {\n    /* 'X' gets alignment from following option */\n    if (fmt.off >= fmt.s.length || fmt.s[fmt.off] === 0) luaL_argerror(h.L, 1, to_luastring(\"invalid next option for option 'X'\"));else {\n      var o = getoption(h, fmt);\n      align = o.size;\n      o = o.opt;\n      if (o === Kchar || align === 0) luaL_argerror(h.L, 1, to_luastring(\"invalid next option for option 'X'\"));\n    }\n  }\n\n  if (align <= 1 || r.opt === Kchar)\n    /* need no alignment? */\n    r.ntoalign = 0;else {\n    if (align > h.maxalign)\n      /* enforce maximum alignment */\n      align = h.maxalign;\n    if ((align & align - 1) !== 0)\n      /* is 'align' not a power of 2? */\n      luaL_argerror(h.L, 1, to_luastring(\"format asks for alignment not power of 2\"));\n    r.ntoalign = align - (totalsize & align - 1) & align - 1;\n  }\n  return r;\n};\n/*\n** Pack integer 'n' with 'size' bytes and 'islittle' endianness.\n** The final 'if' handles the case when 'size' is larger than\n** the size of a Lua integer, correcting the extra sign-extension\n** bytes if necessary (by default they would be zeros).\n*/\n\n\nvar packint = function packint(b, n, islittle, size, neg) {\n  var buff = luaL_prepbuffsize(b, size);\n  buff[islittle ? 0 : size - 1] = n & MC;\n  /* first byte */\n\n  for (var i = 1; i < size; i++) {\n    n >>= NB;\n    buff[islittle ? i : size - 1 - i] = n & MC;\n  }\n\n  if (neg && size > SZINT) {\n    /* negative number need sign extension? */\n    for (var _i = SZINT; _i < size; _i++) {\n      /* correct extra bytes */\n      buff[islittle ? _i : size - 1 - _i] = MC;\n    }\n  }\n\n  luaL_addsize(b, size);\n  /* add result to buffer */\n};\n\nvar str_pack = function str_pack(L) {\n  var b = new luaL_Buffer();\n  var h = new Header(L);\n  var fmt = {\n    s: luaL_checkstring(L, 1),\n\n    /* format string */\n    off: 0\n  };\n  var arg = 1;\n  /* current argument to pack */\n\n  var totalsize = 0;\n  /* accumulate total size of result */\n\n  lua_pushnil(L);\n  /* mark to separate arguments from string buffer */\n\n  luaL_buffinit(L, b);\n\n  while (fmt.off < fmt.s.length) {\n    var details = getdetails(h, totalsize, fmt);\n    var opt = details.opt;\n    var size = details.size;\n    var ntoalign = details.ntoalign;\n    totalsize += ntoalign + size;\n\n    while (ntoalign-- > 0) {\n      luaL_addchar(b, LUAL_PACKPADBYTE);\n    }\n    /* fill alignment */\n\n\n    arg++;\n\n    switch (opt) {\n      case Kint:\n        {\n          /* signed integers */\n          var n = luaL_checkinteger(L, arg);\n\n          if (size < SZINT) {\n            /* need overflow check? */\n            var lim = 1 << size * 8 - 1;\n            luaL_argcheck(L, -lim <= n && n < lim, arg, \"integer overflow\");\n          }\n\n          packint(b, n, h.islittle, size, n < 0);\n          break;\n        }\n\n      case Kuint:\n        {\n          /* unsigned integers */\n          var _n3 = luaL_checkinteger(L, arg);\n\n          if (size < SZINT) luaL_argcheck(L, _n3 >>> 0 < 1 << size * NB, arg, \"unsigned overflow\");\n          packint(b, _n3 >>> 0, h.islittle, size, false);\n          break;\n        }\n\n      case Kfloat:\n        {\n          /* floating-point options */\n          var buff = luaL_prepbuffsize(b, size);\n\n          var _n4 = luaL_checknumber(L, arg);\n          /* get argument */\n\n\n          var dv = new DataView(buff.buffer, buff.byteOffset, buff.byteLength);\n          if (size === 4) dv.setFloat32(0, _n4, h.islittle);else dv.setFloat64(0, _n4, h.islittle);\n          luaL_addsize(b, size);\n          break;\n        }\n\n      case Kchar:\n        {\n          /* fixed-size string */\n          var s = luaL_checkstring(L, arg);\n          var len = s.length;\n          luaL_argcheck(L, len <= size, arg, \"string longer than given size\");\n          luaL_addlstring(b, s, len);\n          /* add string */\n\n          while (len++ < size) {\n            /* pad extra space */\n            luaL_addchar(b, LUAL_PACKPADBYTE);\n          }\n\n          break;\n        }\n\n      case Kstring:\n        {\n          /* strings with length count */\n          var _s = luaL_checkstring(L, arg);\n\n          var _len = _s.length;\n          luaL_argcheck(L, size >= 4\n          /* sizeof(size_t) */\n          || _len < 1 << size * NB, arg, \"string length does not fit in given size\");\n          packint(b, _len, h.islittle, size, 0);\n          /* pack length */\n\n          luaL_addlstring(b, _s, _len);\n          totalsize += _len;\n          break;\n        }\n\n      case Kzstr:\n        {\n          /* zero-terminated string */\n          var _s2 = luaL_checkstring(L, arg);\n\n          var _len2 = _s2.length;\n          luaL_argcheck(L, luastring_indexOf(_s2, 0) < 0, arg, \"strings contains zeros\");\n          luaL_addlstring(b, _s2, _len2);\n          luaL_addchar(b, 0);\n          /* add zero at the end */\n\n          totalsize += _len2 + 1;\n          break;\n        }\n\n      case Kpadding:\n        luaL_addchar(b, LUAL_PACKPADBYTE);\n\n      /* fall through */\n\n      case Kpaddalign:\n      case Knop:\n        arg--;\n        /* undo increment */\n\n        break;\n    }\n  }\n\n  luaL_pushresult(b);\n  return 1;\n};\n\nvar str_reverse = function str_reverse(L) {\n  var s = luaL_checkstring(L, 1);\n  var l = s.length;\n  var r = new Uint8Array(l);\n\n  for (var i = 0; i < l; i++) {\n    r[i] = s[l - 1 - i];\n  }\n\n  lua_pushstring(L, r);\n  return 1;\n};\n\nvar str_lower = function str_lower(L) {\n  var s = luaL_checkstring(L, 1);\n  var l = s.length;\n  var r = new Uint8Array(l);\n\n  for (var i = 0; i < l; i++) {\n    var c = s[i];\n    if (isupper(c)) c = c | 0x20;\n    r[i] = c;\n  }\n\n  lua_pushstring(L, r);\n  return 1;\n};\n\nvar str_upper = function str_upper(L) {\n  var s = luaL_checkstring(L, 1);\n  var l = s.length;\n  var r = new Uint8Array(l);\n\n  for (var i = 0; i < l; i++) {\n    var c = s[i];\n    if (islower(c)) c = c & 0xdf;\n    r[i] = c;\n  }\n\n  lua_pushstring(L, r);\n  return 1;\n};\n\nvar str_rep = function str_rep(L) {\n  var s = luaL_checkstring(L, 1);\n  var l = s.length;\n  var n = luaL_checkinteger(L, 2);\n  var sep = luaL_optstring(L, 3, \"\");\n  var lsep = sep.length;\n  if (n <= 0) lua_pushliteral(L, \"\");else if (l + lsep < l || l + lsep > MAXSIZE / n)\n    /* may overflow? */\n    return luaL_error(L, to_luastring(\"resulting string too large\"));else {\n    var totallen = n * l + (n - 1) * lsep;\n    var b = new luaL_Buffer();\n    var p = luaL_buffinitsize(L, b, totallen);\n    var pi = 0;\n\n    while (n-- > 1) {\n      /* first n-1 copies (followed by separator) */\n      p.set(s, pi);\n      pi += l;\n\n      if (lsep > 0) {\n        /* empty 'memcpy' is not that cheap */\n        p.set(sep, pi);\n        pi += lsep;\n      }\n    }\n\n    p.set(s, pi);\n    /* last copy (not followed by separator) */\n\n    luaL_pushresultsize(b, totallen);\n  }\n  return 1;\n};\n\nvar str_byte = function str_byte(L) {\n  var s = luaL_checkstring(L, 1);\n  var l = s.length;\n  var posi = posrelat(luaL_optinteger(L, 2, 1), l);\n  var pose = posrelat(luaL_optinteger(L, 3, posi), l);\n  if (posi < 1) posi = 1;\n  if (pose > l) pose = l;\n  if (posi > pose) return 0;\n  /* empty interval; return no values */\n\n  if (pose - posi >= Number.MAX_SAFE_INTEGER)\n    /* arithmetic overflow? */\n    return luaL_error(L, \"string slice too long\");\n  var n = pose - posi + 1;\n  luaL_checkstack(L, n, \"string slice too long\");\n\n  for (var i = 0; i < n; i++) {\n    lua_pushinteger(L, s[posi + i - 1]);\n  }\n\n  return n;\n};\n\nvar str_packsize = function str_packsize(L) {\n  var h = new Header(L);\n  var fmt = {\n    s: luaL_checkstring(L, 1),\n    off: 0\n  };\n  var totalsize = 0;\n  /* accumulate total size of result */\n\n  while (fmt.off < fmt.s.length) {\n    var details = getdetails(h, totalsize, fmt);\n    var opt = details.opt;\n    var size = details.size;\n    var ntoalign = details.ntoalign;\n    size += ntoalign;\n    /* total space used by option */\n\n    luaL_argcheck(L, totalsize <= MAXSIZE - size, 1, \"format result too large\");\n    totalsize += size;\n\n    switch (opt) {\n      case Kstring:\n      /* strings with length count */\n\n      case Kzstr:\n        /* zero-terminated string */\n        luaL_argerror(L, 1, \"variable-length format\");\n\n      /* call never return, but to avoid warnings: */\n\n      /* fall through */\n\n      default:\n        break;\n    }\n  }\n\n  lua_pushinteger(L, totalsize);\n  return 1;\n};\n/*\n** Unpack an integer with 'size' bytes and 'islittle' endianness.\n** If size is smaller than the size of a Lua integer and integer\n** is signed, must do sign extension (propagating the sign to the\n** higher bits); if size is larger than the size of a Lua integer,\n** it must check the unread bytes to see whether they do not cause an\n** overflow.\n*/\n\n\nvar unpackint = function unpackint(L, str, islittle, size, issigned) {\n  var res = 0;\n  var limit = size <= SZINT ? size : SZINT;\n\n  for (var i = limit - 1; i >= 0; i--) {\n    res <<= NB;\n    res |= str[islittle ? i : size - 1 - i];\n  }\n\n  if (size < SZINT) {\n    /* real size smaller than lua_Integer? */\n    if (issigned) {\n      /* needs sign extension? */\n      var mask = 1 << size * NB - 1;\n      res = (res ^ mask) - mask;\n      /* do sign extension */\n    }\n  } else if (size > SZINT) {\n    /* must check unread bytes */\n    var _mask = !issigned || res >= 0 ? 0 : MC;\n\n    for (var _i2 = limit; _i2 < size; _i2++) {\n      if (str[islittle ? _i2 : size - 1 - _i2] !== _mask) luaL_error(L, to_luastring(\"%d-byte integer does not fit into Lua Integer\"), size);\n    }\n  }\n\n  return res;\n};\n\nvar unpacknum = function unpacknum(L, b, islittle, size) {\n  lualib.lua_assert(b.length >= size);\n  var dv = new DataView(new ArrayBuffer(size));\n\n  for (var i = 0; i < size; i++) {\n    dv.setUint8(i, b[i], islittle);\n  }\n\n  if (size == 4) return dv.getFloat32(0, islittle);else return dv.getFloat64(0, islittle);\n};\n\nvar str_unpack = function str_unpack(L) {\n  var h = new Header(L);\n  var fmt = {\n    s: luaL_checkstring(L, 1),\n    off: 0\n  };\n  var data = luaL_checkstring(L, 2);\n  var ld = data.length;\n  var pos = posrelat(luaL_optinteger(L, 3, 1), ld) - 1;\n  var n = 0;\n  /* number of results */\n\n  luaL_argcheck(L, pos <= ld && pos >= 0, 3, \"initial position out of string\");\n\n  while (fmt.off < fmt.s.length) {\n    var details = getdetails(h, pos, fmt);\n    var opt = details.opt;\n    var size = details.size;\n    var ntoalign = details.ntoalign;\n    if (\n    /*ntoalign + size > ~pos ||*/\n    pos + ntoalign + size > ld) luaL_argerror(L, 2, to_luastring(\"data string too short\"));\n    pos += ntoalign;\n    /* skip alignment */\n\n    /* stack space for item + next position */\n\n    luaL_checkstack(L, 2, \"too many results\");\n    n++;\n\n    switch (opt) {\n      case Kint:\n      case Kuint:\n        {\n          var res = unpackint(L, data.subarray(pos), h.islittle, size, opt === Kint);\n          lua_pushinteger(L, res);\n          break;\n        }\n\n      case Kfloat:\n        {\n          var _res = unpacknum(L, data.subarray(pos), h.islittle, size);\n\n          lua_pushnumber(L, _res);\n          break;\n        }\n\n      case Kchar:\n        {\n          lua_pushstring(L, data.subarray(pos, pos + size));\n          break;\n        }\n\n      case Kstring:\n        {\n          var len = unpackint(L, data.subarray(pos), h.islittle, size, 0);\n          luaL_argcheck(L, pos + len + size <= ld, 2, \"data string too short\");\n          lua_pushstring(L, data.subarray(pos + size, pos + size + len));\n          pos += len;\n          /* skip string */\n\n          break;\n        }\n\n      case Kzstr:\n        {\n          var e = luastring_indexOf(data, 0, pos);\n          if (e === -1) e = data.length - pos;\n          lua_pushstring(L, data.subarray(pos, e));\n          pos = e + 1;\n          /* skip string plus final '\\0' */\n\n          break;\n        }\n\n      case Kpaddalign:\n      case Kpadding:\n      case Knop:\n        n--;\n        /* undo increment */\n\n        break;\n    }\n\n    pos += size;\n  }\n\n  lua_pushinteger(L, pos + 1);\n  /* next position */\n\n  return n + 1;\n};\n\nvar CAP_UNFINISHED = -1;\nvar CAP_POSITION = -2;\nvar MAXCCALLS = 200;\nvar SPECIALS = to_luastring(\"^$*+?.([%-\");\n\nvar MatchState = function MatchState(L) {\n  _classCallCheck(this, MatchState);\n\n  this.src = null;\n  /* unmodified source string */\n\n  this.src_init = null;\n  /* init of source string */\n\n  this.src_end = null;\n  /* end ('\\0') of source string */\n\n  this.p = null;\n  /* unmodified pattern string */\n\n  this.p_end = null;\n  /* end ('\\0') of pattern */\n\n  this.L = L;\n  this.matchdepth = NaN;\n  /* control for recursive depth */\n\n  this.level = NaN;\n  /* total number of captures (finished or unfinished) */\n\n  this.capture = [];\n};\n\nvar check_capture = function check_capture(ms, l) {\n  l = l - 49\n  /* '1'.charCodeAt(0) */\n  ;\n  if (l < 0 || l >= ms.level || ms.capture[l].len === CAP_UNFINISHED) return luaL_error(ms.L, to_luastring(\"invalid capture index %%%d\"), l + 1);\n  return l;\n};\n\nvar capture_to_close = function capture_to_close(ms) {\n  var level = ms.level;\n\n  for (level--; level >= 0; level--) {\n    if (ms.capture[level].len === CAP_UNFINISHED) return level;\n  }\n\n  return luaL_error(ms.L, to_luastring(\"invalid pattern capture\"));\n};\n\nvar classend = function classend(ms, p) {\n  switch (ms.p[p++]) {\n    case L_ESC:\n      {\n        if (p === ms.p_end) luaL_error(ms.L, to_luastring(\"malformed pattern (ends with '%%')\"));\n        return p + 1;\n      }\n\n    case 91\n    /* '['.charCodeAt(0) */\n    :\n      {\n        if (ms.p[p] === 94\n        /* '^'.charCodeAt(0) */\n        ) p++;\n\n        do {\n          /* look for a ']' */\n          if (p === ms.p_end) luaL_error(ms.L, to_luastring(\"malformed pattern (missing ']')\"));\n          if (ms.p[p++] === L_ESC && p < ms.p_end) p++;\n          /* skip escapes (e.g. '%]') */\n        } while (ms.p[p] !== 93\n        /* ']'.charCodeAt(0) */\n        );\n\n        return p + 1;\n      }\n\n    default:\n      {\n        return p;\n      }\n  }\n};\n\nvar match_class = function match_class(c, cl) {\n  switch (cl) {\n    case 97\n    /* 'a'.charCodeAt(0) */\n    :\n      return isalpha(c);\n\n    case 65\n    /* 'A'.charCodeAt(0) */\n    :\n      return !isalpha(c);\n\n    case 99\n    /* 'c'.charCodeAt(0) */\n    :\n      return iscntrl(c);\n\n    case 67\n    /* 'C'.charCodeAt(0) */\n    :\n      return !iscntrl(c);\n\n    case 100\n    /* 'd'.charCodeAt(0) */\n    :\n      return isdigit(c);\n\n    case 68\n    /* 'D'.charCodeAt(0) */\n    :\n      return !isdigit(c);\n\n    case 103\n    /* 'g'.charCodeAt(0) */\n    :\n      return isgraph(c);\n\n    case 71\n    /* 'G'.charCodeAt(0) */\n    :\n      return !isgraph(c);\n\n    case 108\n    /* 'l'.charCodeAt(0) */\n    :\n      return islower(c);\n\n    case 76\n    /* 'L'.charCodeAt(0) */\n    :\n      return !islower(c);\n\n    case 112\n    /* 'p'.charCodeAt(0) */\n    :\n      return ispunct(c);\n\n    case 80\n    /* 'P'.charCodeAt(0) */\n    :\n      return !ispunct(c);\n\n    case 115\n    /* 's'.charCodeAt(0) */\n    :\n      return isspace(c);\n\n    case 83\n    /* 'S'.charCodeAt(0) */\n    :\n      return !isspace(c);\n\n    case 117\n    /* 'u'.charCodeAt(0) */\n    :\n      return isupper(c);\n\n    case 85\n    /* 'U'.charCodeAt(0) */\n    :\n      return !isupper(c);\n\n    case 119\n    /* 'w'.charCodeAt(0) */\n    :\n      return isalnum(c);\n\n    case 87\n    /* 'W'.charCodeAt(0) */\n    :\n      return !isalnum(c);\n\n    case 120\n    /* 'x'.charCodeAt(0) */\n    :\n      return isxdigit(c);\n\n    case 88\n    /* 'X'.charCodeAt(0) */\n    :\n      return !isxdigit(c);\n\n    case 122\n    /* 'z'.charCodeAt(0) */\n    :\n      return c === 0;\n\n    /* deprecated option */\n\n    case 90\n    /* 'z'.charCodeAt(0) */\n    :\n      return c !== 0;\n\n    /* deprecated option */\n\n    default:\n      return cl === c;\n  }\n};\n\nvar matchbracketclass = function matchbracketclass(ms, c, p, ec) {\n  var sig = true;\n\n  if (ms.p[p + 1] === 94\n  /* '^'.charCodeAt(0) */\n  ) {\n      sig = false;\n      p++;\n      /* skip the '^' */\n    }\n\n  while (++p < ec) {\n    if (ms.p[p] === L_ESC) {\n      p++;\n      if (match_class(c, ms.p[p])) return sig;\n    } else if (ms.p[p + 1] === 45\n    /* '-'.charCodeAt(0) */\n    && p + 2 < ec) {\n      p += 2;\n      if (ms.p[p - 2] <= c && c <= ms.p[p]) return sig;\n    } else if (ms.p[p] === c) return sig;\n  }\n\n  return !sig;\n};\n\nvar singlematch = function singlematch(ms, s, p, ep) {\n  if (s >= ms.src_end) return false;else {\n    var c = ms.src[s];\n\n    switch (ms.p[p]) {\n      case 46\n      /* '.'.charCodeAt(0) */\n      :\n        return true;\n\n      /* matches any char */\n\n      case L_ESC:\n        return match_class(c, ms.p[p + 1]);\n\n      case 91\n      /* '['.charCodeAt(0) */\n      :\n        return matchbracketclass(ms, c, p, ep - 1);\n\n      default:\n        return ms.p[p] === c;\n    }\n  }\n};\n\nvar matchbalance = function matchbalance(ms, s, p) {\n  if (p >= ms.p_end - 1) luaL_error(ms.L, to_luastring(\"malformed pattern (missing arguments to '%%b'\"));\n  if (ms.src[s] !== ms.p[p]) return null;else {\n    var b = ms.p[p];\n    var e = ms.p[p + 1];\n    var cont = 1;\n\n    while (++s < ms.src_end) {\n      if (ms.src[s] === e) {\n        if (--cont === 0) return s + 1;\n      } else if (ms.src[s] === b) cont++;\n    }\n  }\n  return null;\n  /* string ends out of balance */\n};\n\nvar max_expand = function max_expand(ms, s, p, ep) {\n  var i = 0;\n  /* counts maximum expand for item */\n\n  while (singlematch(ms, s + i, p, ep)) {\n    i++;\n  }\n  /* keeps trying to match with the maximum repetitions */\n\n\n  while (i >= 0) {\n    var res = match(ms, s + i, ep + 1);\n    if (res) return res;\n    i--;\n    /* else didn't match; reduce 1 repetition to try again */\n  }\n\n  return null;\n};\n\nvar min_expand = function min_expand(ms, s, p, ep) {\n  for (;;) {\n    var res = match(ms, s, ep + 1);\n    if (res !== null) return res;else if (singlematch(ms, s, p, ep)) s++;\n    /* try with one more repetition */\n    else return null;\n  }\n};\n\nvar start_capture = function start_capture(ms, s, p, what) {\n  var level = ms.level;\n  if (level >= LUA_MAXCAPTURES) luaL_error(ms.L, to_luastring(\"too many captures\"));\n  ms.capture[level] = ms.capture[level] ? ms.capture[level] : {};\n  ms.capture[level].init = s;\n  ms.capture[level].len = what;\n  ms.level = level + 1;\n  var res;\n  if ((res = match(ms, s, p)) === null)\n    /* match failed? */\n    ms.level--;\n  /* undo capture */\n\n  return res;\n};\n\nvar end_capture = function end_capture(ms, s, p) {\n  var l = capture_to_close(ms);\n  ms.capture[l].len = s - ms.capture[l].init;\n  /* close capture */\n\n  var res;\n  if ((res = match(ms, s, p)) === null)\n    /* match failed? */\n    ms.capture[l].len = CAP_UNFINISHED;\n  /* undo capture */\n\n  return res;\n};\n/* Compare the elements of arrays 'a' and 'b' to see if they contain the same elements */\n\n\nvar array_cmp = function array_cmp(a, ai, b, bi, len) {\n  return luastring_eq(a.subarray(ai, ai + len), b.subarray(bi, bi + len));\n};\n\nvar match_capture = function match_capture(ms, s, l) {\n  l = check_capture(ms, l);\n  var len = ms.capture[l].len;\n  if (ms.src_end - s >= len && array_cmp(ms.src, ms.capture[l].init, ms.src, s, len)) return s + len;else return null;\n};\n\nvar match = function match(ms, s, p) {\n  var gotodefault = false;\n  var gotoinit = true;\n  if (ms.matchdepth-- === 0) luaL_error(ms.L, to_luastring(\"pattern too complex\"));\n\n  while (gotoinit || gotodefault) {\n    gotoinit = false;\n\n    if (p !== ms.p_end) {\n      /* end of pattern? */\n      switch (gotodefault ? void 0 : ms.p[p]) {\n        case 40\n        /* '('.charCodeAt(0) */\n        :\n          {\n            /* start capture */\n            if (ms.p[p + 1] === 41\n            /* ')'.charCodeAt(0) */\n            )\n              /* position capture? */\n              s = start_capture(ms, s, p + 2, CAP_POSITION);else s = start_capture(ms, s, p + 1, CAP_UNFINISHED);\n            break;\n          }\n\n        case 41\n        /* ')'.charCodeAt(0) */\n        :\n          {\n            /* end capture */\n            s = end_capture(ms, s, p + 1);\n            break;\n          }\n\n        case 36\n        /* '$'.charCodeAt(0) */\n        :\n          {\n            if (p + 1 !== ms.p_end) {\n              /* is the '$' the last char in pattern? */\n              gotodefault = true;\n              /* no; go to default */\n\n              break;\n            }\n\n            s = ms.src.length - s === 0 ? s : null;\n            /* check end of string */\n\n            break;\n          }\n\n        case L_ESC:\n          {\n            /* escaped sequences not in the format class[*+?-]? */\n            switch (ms.p[p + 1]) {\n              case 98\n              /* 'b'.charCodeAt(0) */\n              :\n                {\n                  /* balanced string? */\n                  s = matchbalance(ms, s, p + 2);\n\n                  if (s !== null) {\n                    p += 4;\n                    gotoinit = true;\n                  }\n\n                  break;\n                }\n\n              case 102\n              /* 'f'.charCodeAt(0) */\n              :\n                {\n                  /* frontier? */\n                  p += 2;\n                  if (ms.p[p] !== 91\n                  /* '['.charCodeAt(0) */\n                  ) luaL_error(ms.L, to_luastring(\"missing '[' after '%%f' in pattern\"));\n                  var ep = classend(ms, p);\n                  /* points to what is next */\n\n                  var previous = s === ms.src_init ? 0 : ms.src[s - 1];\n\n                  if (!matchbracketclass(ms, previous, p, ep - 1) && matchbracketclass(ms, s === ms.src_end ? 0 : ms.src[s], p, ep - 1)) {\n                    p = ep;\n                    gotoinit = true;\n                    break;\n                  }\n\n                  s = null;\n                  /* match failed */\n\n                  break;\n                }\n\n              case 48:\n              case 49:\n              case 50:\n              case 51:\n              case 52:\n              case 53:\n              case 54:\n              case 55:\n              case 56:\n              case 57:\n                {\n                  /* capture results (%0-%9)? */\n                  s = match_capture(ms, s, ms.p[p + 1]);\n\n                  if (s !== null) {\n                    p += 2;\n                    gotoinit = true;\n                  }\n\n                  break;\n                }\n\n              default:\n                gotodefault = true;\n            }\n\n            break;\n          }\n\n        default:\n          {\n            /* pattern class plus optional suffix */\n            gotodefault = false;\n\n            var _ep = classend(ms, p);\n            /* points to optional suffix */\n\n            /* does not match at least once? */\n\n\n            if (!singlematch(ms, s, p, _ep)) {\n              if (ms.p[_ep] === 42\n              /* '*'.charCodeAt(0) */\n              || ms.p[_ep] === 63\n              /* '?'.charCodeAt(0) */\n              || ms.p[_ep] === 45\n              /* '-'.charCodeAt(0) */\n              ) {\n                  /* accept empty? */\n                  p = _ep + 1;\n                  gotoinit = true;\n                  break;\n                } else\n                /* '+' or no suffix */\n                s = null;\n              /* fail */\n\n            } else {\n              /* matched once */\n              switch (ms.p[_ep]) {\n                /* handle optional suffix */\n                case 63\n                /* '?'.charCodeAt(0) */\n                :\n                  {\n                    /* optional */\n                    var res = void 0;\n                    if ((res = match(ms, s + 1, _ep + 1)) !== null) s = res;else {\n                      p = _ep + 1;\n                      gotoinit = true;\n                    }\n                    break;\n                  }\n\n                case 43\n                /* '+'.charCodeAt(0) */\n                :\n                  /* 1 or more repetitions */\n                  s++;\n\n                /* 1 match already done */\n\n                /* fall through */\n\n                case 42\n                /* '*'.charCodeAt(0) */\n                :\n                  /* 0 or more repetitions */\n                  s = max_expand(ms, s, p, _ep);\n                  break;\n\n                case 45\n                /* '-'.charCodeAt(0) */\n                :\n                  /* 0 or more repetitions (minimum) */\n                  s = min_expand(ms, s, p, _ep);\n                  break;\n\n                default:\n                  /* no suffix */\n                  s++;\n                  p = _ep;\n                  gotoinit = true;\n              }\n            }\n\n            break;\n          }\n      }\n    }\n  }\n\n  ms.matchdepth++;\n  return s;\n};\n\nvar push_onecapture = function push_onecapture(ms, i, s, e) {\n  if (i >= ms.level) {\n    if (i === 0) lua_pushlstring(ms.L, ms.src.subarray(s, e), e - s);\n    /* add whole match */\n    else luaL_error(ms.L, to_luastring(\"invalid capture index %%%d\"), i + 1);\n  } else {\n    var l = ms.capture[i].len;\n    if (l === CAP_UNFINISHED) luaL_error(ms.L, to_luastring(\"unfinished capture\"));\n    if (l === CAP_POSITION) lua_pushinteger(ms.L, ms.capture[i].init - ms.src_init + 1);else lua_pushlstring(ms.L, ms.src.subarray(ms.capture[i].init), l);\n  }\n};\n\nvar push_captures = function push_captures(ms, s, e) {\n  var nlevels = ms.level === 0 && ms.src.subarray(s) ? 1 : ms.level;\n  luaL_checkstack(ms.L, nlevels, \"too many captures\");\n\n  for (var i = 0; i < nlevels; i++) {\n    push_onecapture(ms, i, s, e);\n  }\n\n  return nlevels;\n  /* number of strings pushed */\n};\n\nvar nospecials = function nospecials(p, l) {\n  for (var i = 0; i < l; i++) {\n    if (luastring_indexOf(SPECIALS, p[i]) !== -1) return false;\n  }\n\n  return true;\n};\n\nvar prepstate = function prepstate(ms, L, s, ls, p, lp) {\n  ms.L = L;\n  ms.matchdepth = MAXCCALLS;\n  ms.src = s;\n  ms.src_init = 0;\n  ms.src_end = ls;\n  ms.p = p;\n  ms.p_end = lp;\n};\n\nvar reprepstate = function reprepstate(ms) {\n  ms.level = 0;\n  lualib.lua_assert(ms.matchdepth === MAXCCALLS);\n};\n\nvar find_subarray = function find_subarray(arr, subarr, from_index) {\n  var i = from_index >>> 0,\n      sl = subarr.length;\n  if (sl === 0) return i;\n\n  for (; (i = arr.indexOf(subarr[0], i)) !== -1; i++) {\n    if (luastring_eq(arr.subarray(i, i + sl), subarr)) return i;\n  }\n\n  return -1;\n};\n\nvar str_find_aux = function str_find_aux(L, find) {\n  var s = luaL_checkstring(L, 1);\n  var p = luaL_checkstring(L, 2);\n  var ls = s.length;\n  var lp = p.length;\n  var init = posrelat(luaL_optinteger(L, 3, 1), ls);\n  if (init < 1) init = 1;else if (init > ls + 1) {\n    /* start after string's end? */\n    lua_pushnil(L);\n    /* cannot find anything */\n\n    return 1;\n  }\n  /* explicit request or no special characters? */\n\n  if (find && (lua_toboolean(L, 4) || nospecials(p, lp))) {\n    /* do a plain search */\n    var f = find_subarray(s.subarray(init - 1), p, 0);\n\n    if (f > -1) {\n      lua_pushinteger(L, init + f);\n      lua_pushinteger(L, init + f + lp - 1);\n      return 2;\n    }\n  } else {\n    var ms = new MatchState(L);\n    var s1 = init - 1;\n    var anchor = p[0] === 94\n    /* '^'.charCodeAt(0) */\n    ;\n\n    if (anchor) {\n      p = p.subarray(1);\n      lp--;\n      /* skip anchor character */\n    }\n\n    prepstate(ms, L, s, ls, p, lp);\n\n    do {\n      var res = void 0;\n      reprepstate(ms);\n\n      if ((res = match(ms, s1, 0)) !== null) {\n        if (find) {\n          lua_pushinteger(L, s1 + 1);\n          /* start */\n\n          lua_pushinteger(L, res);\n          /* end */\n\n          return push_captures(ms, null, 0) + 2;\n        } else return push_captures(ms, s1, res);\n      }\n    } while (s1++ < ms.src_end && !anchor);\n  }\n\n  lua_pushnil(L);\n  /* not found */\n\n  return 1;\n};\n\nvar str_find = function str_find(L) {\n  return str_find_aux(L, 1);\n};\n\nvar str_match = function str_match(L) {\n  return str_find_aux(L, 0);\n};\n/* state for 'gmatch' */\n\n\nvar GMatchState = function GMatchState() {\n  _classCallCheck(this, GMatchState);\n\n  this.src = NaN;\n  /* current position */\n\n  this.p = NaN;\n  /* pattern */\n\n  this.lastmatch = NaN;\n  /* end of last match */\n\n  this.ms = new MatchState();\n  /* match state */\n};\n\nvar gmatch_aux = function gmatch_aux(L) {\n  var gm = lua_touserdata(L, lua_upvalueindex(3));\n  gm.ms.L = L;\n\n  for (var src = gm.src; src <= gm.ms.src_end; src++) {\n    reprepstate(gm.ms);\n    var e = void 0;\n\n    if ((e = match(gm.ms, src, gm.p)) !== null && e !== gm.lastmatch) {\n      gm.src = gm.lastmatch = e;\n      return push_captures(gm.ms, src, e);\n    }\n  }\n\n  return 0;\n  /* not found */\n};\n\nvar str_gmatch = function str_gmatch(L) {\n  var s = luaL_checkstring(L, 1);\n  var p = luaL_checkstring(L, 2);\n  var ls = s.length;\n  var lp = p.length;\n  lua_settop(L, 2);\n  /* keep them on closure to avoid being collected */\n\n  var gm = new GMatchState();\n  lua_pushlightuserdata(L, gm);\n  prepstate(gm.ms, L, s, ls, p, lp);\n  gm.src = 0;\n  gm.p = 0;\n  gm.lastmatch = null;\n  lua_pushcclosure(L, gmatch_aux, 3);\n  return 1;\n};\n\nvar add_s = function add_s(ms, b, s, e) {\n  var L = ms.L;\n  var news = lua_tostring(L, 3);\n  var l = news.length;\n\n  for (var i = 0; i < l; i++) {\n    if (news[i] !== L_ESC) luaL_addchar(b, news[i]);else {\n      i++;\n      /* skip ESC */\n\n      if (!isdigit(news[i])) {\n        if (news[i] !== L_ESC) luaL_error(L, to_luastring(\"invalid use of '%c' in replacement string\"), L_ESC);\n        luaL_addchar(b, news[i]);\n      } else if (news[i] === 48\n      /* '0'.charCodeAt(0) */\n      ) luaL_addlstring(b, ms.src.subarray(s, e), e - s);else {\n        push_onecapture(ms, news[i] - 49\n        /* '1'.charCodeAt(0) */\n        , s, e);\n        luaL_tolstring(L, -1);\n        lua_remove(L, -2);\n        /* remove original value */\n\n        luaL_addvalue(b);\n        /* add capture to accumulated result */\n      }\n    }\n  }\n};\n\nvar add_value = function add_value(ms, b, s, e, tr) {\n  var L = ms.L;\n\n  switch (tr) {\n    case LUA_TFUNCTION:\n      {\n        lua_pushvalue(L, 3);\n        var n = push_captures(ms, s, e);\n        lua_call(L, n, 1);\n        break;\n      }\n\n    case LUA_TTABLE:\n      {\n        push_onecapture(ms, 0, s, e);\n        lua_gettable(L, 3);\n        break;\n      }\n\n    default:\n      {\n        /* LUA_TNUMBER or LUA_TSTRING */\n        add_s(ms, b, s, e);\n        return;\n      }\n  }\n\n  if (!lua_toboolean(L, -1)) {\n    /* nil or false? */\n    lua_pop(L, 1);\n    lua_pushlstring(L, ms.src.subarray(s, e), e - s);\n    /* keep original text */\n  } else if (!lua_isstring(L, -1)) luaL_error(L, to_luastring(\"invalid replacement value (a %s)\"), luaL_typename(L, -1));\n\n  luaL_addvalue(b);\n  /* add result to accumulator */\n};\n\nvar str_gsub = function str_gsub(L) {\n  var src = luaL_checkstring(L, 1);\n  /* subject */\n\n  var srcl = src.length;\n  var p = luaL_checkstring(L, 2);\n  /* pattern */\n\n  var lp = p.length;\n  var lastmatch = null;\n  /* end of last match */\n\n  var tr = lua_type(L, 3);\n  /* replacement type */\n\n  var max_s = luaL_optinteger(L, 4, srcl + 1);\n  /* max replacements */\n\n  var anchor = p[0] === 94\n  /* '^'.charCodeAt(0) */\n  ;\n  var n = 0;\n  /* replacement count */\n\n  var ms = new MatchState(L);\n  var b = new luaL_Buffer();\n  luaL_argcheck(L, tr === LUA_TNUMBER || tr === LUA_TSTRING || tr === LUA_TFUNCTION || tr === LUA_TTABLE, 3, \"string/function/table expected\");\n  luaL_buffinit(L, b);\n\n  if (anchor) {\n    p = p.subarray(1);\n    lp--;\n    /* skip anchor character */\n  }\n\n  prepstate(ms, L, src, srcl, p, lp);\n  src = 0;\n  p = 0;\n\n  while (n < max_s) {\n    var e = void 0;\n    reprepstate(ms);\n\n    if ((e = match(ms, src, p)) !== null && e !== lastmatch) {\n      /* match? */\n      n++;\n      add_value(ms, b, src, e, tr);\n      /* add replacement to buffer */\n\n      src = lastmatch = e;\n    } else if (src < ms.src_end)\n      /* otherwise, skip one character */\n      luaL_addchar(b, ms.src[src++]);else break;\n    /* end of subject */\n\n\n    if (anchor) break;\n  }\n\n  luaL_addlstring(b, ms.src.subarray(src, ms.src_end), ms.src_end - src);\n  luaL_pushresult(b);\n  lua_pushinteger(L, n);\n  /* number of substitutions */\n\n  return 2;\n};\n\nvar strlib = {\n  \"byte\": str_byte,\n  \"char\": str_char,\n  \"dump\": str_dump,\n  \"find\": str_find,\n  \"format\": str_format,\n  \"gmatch\": str_gmatch,\n  \"gsub\": str_gsub,\n  \"len\": str_len,\n  \"lower\": str_lower,\n  \"match\": str_match,\n  \"pack\": str_pack,\n  \"packsize\": str_packsize,\n  \"rep\": str_rep,\n  \"reverse\": str_reverse,\n  \"sub\": str_sub,\n  \"unpack\": str_unpack,\n  \"upper\": str_upper\n};\n\nvar createmetatable = function createmetatable(L) {\n  lua_createtable(L, 0, 1);\n  /* table to be metatable for strings */\n\n  lua_pushliteral(L, \"\");\n  /* dummy string */\n\n  lua_pushvalue(L, -2);\n  /* copy table */\n\n  lua_setmetatable(L, -2);\n  /* set table as metatable for strings */\n\n  lua_pop(L, 1);\n  /* pop dummy string */\n\n  lua_pushvalue(L, -2);\n  /* get string library */\n\n  lua_setfield(L, -2, to_luastring(\"__index\", true));\n  /* metatable.__index = string */\n\n  lua_pop(L, 1);\n  /* pop metatable */\n};\n\nvar luaopen_string = function luaopen_string(L) {\n  luaL_newlib(L, strlib);\n  createmetatable(L);\n  return 1;\n};\n\nmodule.exports.luaopen_string = luaopen_string;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///28\n")},function(module,exports,__webpack_require__){"use strict";eval('\n\nvar _require = __webpack_require__(2),\n    lua_gettop = _require.lua_gettop,\n    lua_pushcfunction = _require.lua_pushcfunction,\n    lua_pushfstring = _require.lua_pushfstring,\n    lua_pushinteger = _require.lua_pushinteger,\n    lua_pushnil = _require.lua_pushnil,\n    lua_pushstring = _require.lua_pushstring,\n    lua_pushvalue = _require.lua_pushvalue,\n    lua_setfield = _require.lua_setfield,\n    lua_tointeger = _require.lua_tointeger;\n\nvar _require2 = __webpack_require__(7),\n    luaL_Buffer = _require2.luaL_Buffer,\n    luaL_addvalue = _require2.luaL_addvalue,\n    luaL_argcheck = _require2.luaL_argcheck,\n    luaL_buffinit = _require2.luaL_buffinit,\n    luaL_checkinteger = _require2.luaL_checkinteger,\n    luaL_checkstack = _require2.luaL_checkstack,\n    luaL_checkstring = _require2.luaL_checkstring,\n    luaL_error = _require2.luaL_error,\n    luaL_newlib = _require2.luaL_newlib,\n    luaL_optinteger = _require2.luaL_optinteger,\n    luaL_pushresult = _require2.luaL_pushresult;\n\nvar _require3 = __webpack_require__(5),\n    luastring_of = _require3.luastring_of,\n    to_luastring = _require3.to_luastring;\n\nvar MAXUNICODE = 0x10FFFF;\n\nvar iscont = function iscont(p) {\n  var c = p & 0xC0;\n  return c === 0x80;\n};\n/* translate a relative string position: negative means back from end */\n\n\nvar u_posrelat = function u_posrelat(pos, len) {\n  if (pos >= 0) return pos;else if (0 - pos > len) return 0;else return len + pos + 1;\n};\n/*\n** Decode one UTF-8 sequence, returning NULL if byte sequence is invalid.\n*/\n\n\nvar limits = [0xFF, 0x7F, 0x7FF, 0xFFFF];\n\nvar utf8_decode = function utf8_decode(s, pos) {\n  var c = s[pos];\n  var res = 0;\n  /* final result */\n\n  if (c < 0x80)\n    /* ascii? */\n    res = c;else {\n    var count = 0;\n    /* to count number of continuation bytes */\n\n    while (c & 0x40) {\n      /* still have continuation bytes? */\n      var cc = s[pos + ++count];\n      /* read next byte */\n\n      if ((cc & 0xC0) !== 0x80)\n        /* not a continuation byte? */\n        return null;\n      /* invalid byte sequence */\n\n      res = res << 6 | cc & 0x3F;\n      /* add lower 6 bits from cont. byte */\n\n      c <<= 1;\n      /* to test next bit */\n    }\n\n    res |= (c & 0x7F) << count * 5;\n    /* add first byte */\n\n    if (count > 3 || res > MAXUNICODE || res <= limits[count]) return null;\n    /* invalid byte sequence */\n\n    pos += count;\n    /* skip continuation bytes read */\n  }\n  return {\n    code: res,\n    pos: pos + 1\n  };\n};\n/*\n** utf8len(s [, i [, j]]) --\x3e number of characters that start in the\n** range [i,j], or nil + current position if \'s\' is not well formed in\n** that interval\n*/\n\n\nvar utflen = function utflen(L) {\n  var n = 0;\n  var s = luaL_checkstring(L, 1);\n  var len = s.length;\n  var posi = u_posrelat(luaL_optinteger(L, 2, 1), len);\n  var posj = u_posrelat(luaL_optinteger(L, 3, -1), len);\n  luaL_argcheck(L, 1 <= posi && --posi <= len, 2, "initial position out of string");\n  luaL_argcheck(L, --posj < len, 3, "final position out of string");\n\n  while (posi <= posj) {\n    var dec = utf8_decode(s, posi);\n\n    if (dec === null) {\n      /* conversion error? */\n      lua_pushnil(L);\n      /* return nil ... */\n\n      lua_pushinteger(L, posi + 1);\n      /* ... and current position */\n\n      return 2;\n    }\n\n    posi = dec.pos;\n    n++;\n  }\n\n  lua_pushinteger(L, n);\n  return 1;\n};\n\nvar p_U = to_luastring("%U");\n\nvar pushutfchar = function pushutfchar(L, arg) {\n  var code = luaL_checkinteger(L, arg);\n  luaL_argcheck(L, 0 <= code && code <= MAXUNICODE, arg, "value out of range");\n  lua_pushfstring(L, p_U, code);\n};\n/*\n** utfchar(n1, n2, ...)  -> char(n1)..char(n2)...\n*/\n\n\nvar utfchar = function utfchar(L) {\n  var n = lua_gettop(L);\n  /* number of arguments */\n\n  if (n === 1)\n    /* optimize common case of single char */\n    pushutfchar(L, 1);else {\n    var b = new luaL_Buffer();\n    luaL_buffinit(L, b);\n\n    for (var i = 1; i <= n; i++) {\n      pushutfchar(L, i);\n      luaL_addvalue(b);\n    }\n\n    luaL_pushresult(b);\n  }\n  return 1;\n};\n/*\n** offset(s, n, [i])  -> index where n-th character counting from\n**   position \'i\' starts; 0 means character at \'i\'.\n*/\n\n\nvar byteoffset = function byteoffset(L) {\n  var s = luaL_checkstring(L, 1);\n  var n = luaL_checkinteger(L, 2);\n  var posi = n >= 0 ? 1 : s.length + 1;\n  posi = u_posrelat(luaL_optinteger(L, 3, posi), s.length);\n  luaL_argcheck(L, 1 <= posi && --posi <= s.length, 3, "position out of range");\n\n  if (n === 0) {\n    /* find beginning of current byte sequence */\n    while (posi > 0 && iscont(s[posi])) {\n      posi--;\n    }\n  } else {\n    if (iscont(s[posi])) luaL_error(L, "initial position is a continuation byte");\n\n    if (n < 0) {\n      while (n < 0 && posi > 0) {\n        /* move back */\n        do {\n          /* find beginning of previous character */\n          posi--;\n        } while (posi > 0 && iscont(s[posi]));\n\n        n++;\n      }\n    } else {\n      n--;\n      /* do not move for 1st character */\n\n      while (n > 0 && posi < s.length) {\n        do {\n          /* find beginning of next character */\n          posi++;\n        } while (iscont(s[posi]));\n        /* (cannot pass final \'\\0\') */\n\n\n        n--;\n      }\n    }\n  }\n\n  if (n === 0)\n    /* did it find given character? */\n    lua_pushinteger(L, posi + 1);else\n    /* no such character */\n    lua_pushnil(L);\n  return 1;\n};\n/*\n** codepoint(s, [i, [j]])  -> returns codepoints for all characters\n** that start in the range [i,j]\n*/\n\n\nvar codepoint = function codepoint(L) {\n  var s = luaL_checkstring(L, 1);\n  var posi = u_posrelat(luaL_optinteger(L, 2, 1), s.length);\n  var pose = u_posrelat(luaL_optinteger(L, 3, posi), s.length);\n  luaL_argcheck(L, posi >= 1, 2, "out of range");\n  luaL_argcheck(L, pose <= s.length, 3, "out of range");\n  if (posi > pose) return 0;\n  /* empty interval; return no values */\n\n  if (pose - posi >= Number.MAX_SAFE_INTEGER) return luaL_error(L, "string slice too long");\n  var n = pose - posi + 1;\n  luaL_checkstack(L, n, "string slice too long");\n  n = 0;\n\n  for (posi -= 1; posi < pose;) {\n    var dec = utf8_decode(s, posi);\n    if (dec === null) return luaL_error(L, "invalid UTF-8 code");\n    lua_pushinteger(L, dec.code);\n    posi = dec.pos;\n    n++;\n  }\n\n  return n;\n};\n\nvar iter_aux = function iter_aux(L) {\n  var s = luaL_checkstring(L, 1);\n  var len = s.length;\n  var n = lua_tointeger(L, 2) - 1;\n  if (n < 0)\n    /* first iteration? */\n    n = 0;\n    /* start from here */\n  else if (n < len) {\n      n++;\n      /* skip current byte */\n\n      while (iscont(s[n])) {\n        n++;\n      }\n      /* and its continuations */\n\n    }\n  if (n >= len) return 0;\n  /* no more codepoints */\n  else {\n      var dec = utf8_decode(s, n);\n      if (dec === null || iscont(s[dec.pos])) return luaL_error(L, to_luastring("invalid UTF-8 code"));\n      lua_pushinteger(L, n + 1);\n      lua_pushinteger(L, dec.code);\n      return 2;\n    }\n};\n\nvar iter_codes = function iter_codes(L) {\n  luaL_checkstring(L, 1);\n  lua_pushcfunction(L, iter_aux);\n  lua_pushvalue(L, 1);\n  lua_pushinteger(L, 0);\n  return 3;\n};\n\nvar funcs = {\n  "char": utfchar,\n  "codepoint": codepoint,\n  "codes": iter_codes,\n  "len": utflen,\n  "offset": byteoffset\n};\n/* pattern to match a single UTF-8 character */\n\nvar UTF8PATT = luastring_of(91, 0, 45, 127, 194, 45, 244, 93, 91, 128, 45, 191, 93, 42);\n\nvar luaopen_utf8 = function luaopen_utf8(L) {\n  luaL_newlib(L, funcs);\n  lua_pushstring(L, UTF8PATT);\n  lua_setfield(L, -2, to_luastring("charpattern", true));\n  return 1;\n};\n\nmodule.exports.luaopen_utf8 = luaopen_utf8;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///29\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nvar _require = __webpack_require__(2),\n    LUA_OPLT = _require.LUA_OPLT,\n    LUA_TNUMBER = _require.LUA_TNUMBER,\n    lua_compare = _require.lua_compare,\n    lua_gettop = _require.lua_gettop,\n    lua_isinteger = _require.lua_isinteger,\n    lua_isnoneornil = _require.lua_isnoneornil,\n    lua_pushboolean = _require.lua_pushboolean,\n    lua_pushinteger = _require.lua_pushinteger,\n    lua_pushliteral = _require.lua_pushliteral,\n    lua_pushnil = _require.lua_pushnil,\n    lua_pushnumber = _require.lua_pushnumber,\n    lua_pushvalue = _require.lua_pushvalue,\n    lua_setfield = _require.lua_setfield,\n    lua_settop = _require.lua_settop,\n    lua_tointeger = _require.lua_tointeger,\n    lua_tointegerx = _require.lua_tointegerx,\n    lua_type = _require.lua_type;\n\nvar _require2 = __webpack_require__(7),\n    luaL_argcheck = _require2.luaL_argcheck,\n    luaL_argerror = _require2.luaL_argerror,\n    luaL_checkany = _require2.luaL_checkany,\n    luaL_checkinteger = _require2.luaL_checkinteger,\n    luaL_checknumber = _require2.luaL_checknumber,\n    luaL_error = _require2.luaL_error,\n    luaL_newlib = _require2.luaL_newlib,\n    luaL_optnumber = _require2.luaL_optnumber;\n\nvar _require3 = __webpack_require__(3),\n    LUA_MAXINTEGER = _require3.LUA_MAXINTEGER,\n    LUA_MININTEGER = _require3.LUA_MININTEGER,\n    lua_numbertointeger = _require3.lua_numbertointeger;\n\nvar _require4 = __webpack_require__(5),\n    to_luastring = _require4.to_luastring;\n\nvar rand_state;\n/* use same parameters as glibc LCG */\n\nvar l_rand = function l_rand() {\n  rand_state = 1103515245 * rand_state + 12345 & 0x7fffffff;\n  return rand_state;\n};\n\nvar l_srand = function l_srand(x) {\n  rand_state = x | 0;\n  if (rand_state === 0) rand_state = 1;\n};\n\nvar math_random = function math_random(L) {\n  var low, up;\n  /* use Math.random until randomseed is called */\n\n  var r = rand_state === void 0 ? Math.random() : l_rand() / 0x80000000;\n\n  switch (lua_gettop(L)) {\n    /* check number of arguments */\n    case 0:\n      lua_pushnumber(L, r);\n      /* Number between 0 and 1 */\n\n      return 1;\n\n    case 1:\n      {\n        low = 1;\n        up = luaL_checkinteger(L, 1);\n        break;\n      }\n\n    case 2:\n      {\n        low = luaL_checkinteger(L, 1);\n        up = luaL_checkinteger(L, 2);\n        break;\n      }\n\n    default:\n      return luaL_error(L, "wrong number of arguments");\n  }\n  /* random integer in the interval [low, up] */\n\n\n  luaL_argcheck(L, low <= up, 1, "interval is empty");\n  luaL_argcheck(L, low >= 0 || up <= LUA_MAXINTEGER + low, 1, "interval too large");\n  r *= up - low + 1;\n  lua_pushinteger(L, Math.floor(r) + low);\n  return 1;\n};\n\nvar math_randomseed = function math_randomseed(L) {\n  l_srand(luaL_checknumber(L, 1));\n  l_rand();\n  /* discard first value to avoid undesirable correlations */\n\n  return 0;\n};\n\nvar math_abs = function math_abs(L) {\n  if (lua_isinteger(L, 1)) {\n    var n = lua_tointeger(L, 1);\n    if (n < 0) n = -n | 0;\n    lua_pushinteger(L, n);\n  } else lua_pushnumber(L, Math.abs(luaL_checknumber(L, 1)));\n\n  return 1;\n};\n\nvar math_sin = function math_sin(L) {\n  lua_pushnumber(L, Math.sin(luaL_checknumber(L, 1)));\n  return 1;\n};\n\nvar math_cos = function math_cos(L) {\n  lua_pushnumber(L, Math.cos(luaL_checknumber(L, 1)));\n  return 1;\n};\n\nvar math_tan = function math_tan(L) {\n  lua_pushnumber(L, Math.tan(luaL_checknumber(L, 1)));\n  return 1;\n};\n\nvar math_asin = function math_asin(L) {\n  lua_pushnumber(L, Math.asin(luaL_checknumber(L, 1)));\n  return 1;\n};\n\nvar math_acos = function math_acos(L) {\n  lua_pushnumber(L, Math.acos(luaL_checknumber(L, 1)));\n  return 1;\n};\n\nvar math_atan = function math_atan(L) {\n  var y = luaL_checknumber(L, 1);\n  var x = luaL_optnumber(L, 2, 1);\n  lua_pushnumber(L, Math.atan2(y, x));\n  return 1;\n};\n\nvar math_toint = function math_toint(L) {\n  var n = lua_tointegerx(L, 1);\n  if (n !== false) lua_pushinteger(L, n);else {\n    luaL_checkany(L, 1);\n    lua_pushnil(L);\n    /* value is not convertible to integer */\n  }\n  return 1;\n};\n\nvar pushnumint = function pushnumint(L, d) {\n  var n = lua_numbertointeger(d);\n  if (n !== false)\n    /* does \'d\' fit in an integer? */\n    lua_pushinteger(L, n);\n    /* result is integer */\n  else lua_pushnumber(L, d);\n  /* result is float */\n};\n\nvar math_floor = function math_floor(L) {\n  if (lua_isinteger(L, 1)) lua_settop(L, 1);else pushnumint(L, Math.floor(luaL_checknumber(L, 1)));\n  return 1;\n};\n\nvar math_ceil = function math_ceil(L) {\n  if (lua_isinteger(L, 1)) lua_settop(L, 1);else pushnumint(L, Math.ceil(luaL_checknumber(L, 1)));\n  return 1;\n};\n\nvar math_sqrt = function math_sqrt(L) {\n  lua_pushnumber(L, Math.sqrt(luaL_checknumber(L, 1)));\n  return 1;\n};\n\nvar math_ult = function math_ult(L) {\n  var a = luaL_checkinteger(L, 1);\n  var b = luaL_checkinteger(L, 2);\n  lua_pushboolean(L, a >= 0 ? b < 0 || a < b : b < 0 && a < b);\n  return 1;\n};\n\nvar math_log = function math_log(L) {\n  var x = luaL_checknumber(L, 1);\n  var res;\n  if (lua_isnoneornil(L, 2)) res = Math.log(x);else {\n    var base = luaL_checknumber(L, 2);\n    if (base === 2) res = Math.log2(x);else if (base === 10) res = Math.log10(x);else res = Math.log(x) / Math.log(base);\n  }\n  lua_pushnumber(L, res);\n  return 1;\n};\n\nvar math_exp = function math_exp(L) {\n  lua_pushnumber(L, Math.exp(luaL_checknumber(L, 1)));\n  return 1;\n};\n\nvar math_deg = function math_deg(L) {\n  lua_pushnumber(L, luaL_checknumber(L, 1) * (180 / Math.PI));\n  return 1;\n};\n\nvar math_rad = function math_rad(L) {\n  lua_pushnumber(L, luaL_checknumber(L, 1) * (Math.PI / 180));\n  return 1;\n};\n\nvar math_min = function math_min(L) {\n  var n = lua_gettop(L);\n  /* number of arguments */\n\n  var imin = 1;\n  /* index of current minimum value */\n\n  luaL_argcheck(L, n >= 1, 1, "value expected");\n\n  for (var i = 2; i <= n; i++) {\n    if (lua_compare(L, i, imin, LUA_OPLT)) imin = i;\n  }\n\n  lua_pushvalue(L, imin);\n  return 1;\n};\n\nvar math_max = function math_max(L) {\n  var n = lua_gettop(L);\n  /* number of arguments */\n\n  var imax = 1;\n  /* index of current minimum value */\n\n  luaL_argcheck(L, n >= 1, 1, "value expected");\n\n  for (var i = 2; i <= n; i++) {\n    if (lua_compare(L, imax, i, LUA_OPLT)) imax = i;\n  }\n\n  lua_pushvalue(L, imax);\n  return 1;\n};\n\nvar math_type = function math_type(L) {\n  if (lua_type(L, 1) === LUA_TNUMBER) {\n    if (lua_isinteger(L, 1)) lua_pushliteral(L, "integer");else lua_pushliteral(L, "float");\n  } else {\n    luaL_checkany(L, 1);\n    lua_pushnil(L);\n  }\n\n  return 1;\n};\n\nvar math_fmod = function math_fmod(L) {\n  if (lua_isinteger(L, 1) && lua_isinteger(L, 2)) {\n    var d = lua_tointeger(L, 2);\n    /* no special case needed for -1 in javascript */\n\n    if (d === 0) {\n      luaL_argerror(L, 2, "zero");\n    } else lua_pushinteger(L, lua_tointeger(L, 1) % d | 0);\n  } else {\n    var a = luaL_checknumber(L, 1);\n    var b = luaL_checknumber(L, 2);\n    lua_pushnumber(L, a % b);\n  }\n\n  return 1;\n};\n\nvar math_modf = function math_modf(L) {\n  if (lua_isinteger(L, 1)) {\n    lua_settop(L, 1);\n    /* number is its own integer part */\n\n    lua_pushnumber(L, 0);\n    /* no fractional part */\n  } else {\n    var n = luaL_checknumber(L, 1);\n    var ip = n < 0 ? Math.ceil(n) : Math.floor(n);\n    pushnumint(L, ip);\n    lua_pushnumber(L, n === ip ? 0 : n - ip);\n  }\n\n  return 2;\n};\n\nvar mathlib = {\n  "abs": math_abs,\n  "acos": math_acos,\n  "asin": math_asin,\n  "atan": math_atan,\n  "ceil": math_ceil,\n  "cos": math_cos,\n  "deg": math_deg,\n  "exp": math_exp,\n  "floor": math_floor,\n  "fmod": math_fmod,\n  "log": math_log,\n  "max": math_max,\n  "min": math_min,\n  "modf": math_modf,\n  "rad": math_rad,\n  "random": math_random,\n  "randomseed": math_randomseed,\n  "sin": math_sin,\n  "sqrt": math_sqrt,\n  "tan": math_tan,\n  "tointeger": math_toint,\n  "type": math_type,\n  "ult": math_ult\n};\n\nvar luaopen_math = function luaopen_math(L) {\n  luaL_newlib(L, mathlib);\n  lua_pushnumber(L, Math.PI);\n  lua_setfield(L, -2, to_luastring("pi", true));\n  lua_pushnumber(L, Infinity);\n  lua_setfield(L, -2, to_luastring("huge", true));\n  lua_pushinteger(L, LUA_MAXINTEGER);\n  lua_setfield(L, -2, to_luastring("maxinteger", true));\n  lua_pushinteger(L, LUA_MININTEGER);\n  lua_setfield(L, -2, to_luastring("mininteger", true));\n  return 1;\n};\n\nmodule.exports.luaopen_math = luaopen_math;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///30\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nvar _require = __webpack_require__(2),\n    LUA_MASKCALL = _require.LUA_MASKCALL,\n    LUA_MASKCOUNT = _require.LUA_MASKCOUNT,\n    LUA_MASKLINE = _require.LUA_MASKLINE,\n    LUA_MASKRET = _require.LUA_MASKRET,\n    LUA_REGISTRYINDEX = _require.LUA_REGISTRYINDEX,\n    LUA_TFUNCTION = _require.LUA_TFUNCTION,\n    LUA_TNIL = _require.LUA_TNIL,\n    LUA_TTABLE = _require.LUA_TTABLE,\n    LUA_TUSERDATA = _require.LUA_TUSERDATA,\n    lua_Debug = _require.lua_Debug,\n    lua_call = _require.lua_call,\n    lua_checkstack = _require.lua_checkstack,\n    lua_gethook = _require.lua_gethook,\n    lua_gethookcount = _require.lua_gethookcount,\n    lua_gethookmask = _require.lua_gethookmask,\n    lua_getinfo = _require.lua_getinfo,\n    lua_getlocal = _require.lua_getlocal,\n    lua_getmetatable = _require.lua_getmetatable,\n    lua_getstack = _require.lua_getstack,\n    lua_getupvalue = _require.lua_getupvalue,\n    lua_getuservalue = _require.lua_getuservalue,\n    lua_insert = _require.lua_insert,\n    lua_iscfunction = _require.lua_iscfunction,\n    lua_isfunction = _require.lua_isfunction,\n    lua_isnoneornil = _require.lua_isnoneornil,\n    lua_isthread = _require.lua_isthread,\n    lua_newtable = _require.lua_newtable,\n    lua_pcall = _require.lua_pcall,\n    lua_pop = _require.lua_pop,\n    lua_pushboolean = _require.lua_pushboolean,\n    lua_pushfstring = _require.lua_pushfstring,\n    lua_pushinteger = _require.lua_pushinteger,\n    lua_pushlightuserdata = _require.lua_pushlightuserdata,\n    lua_pushliteral = _require.lua_pushliteral,\n    lua_pushnil = _require.lua_pushnil,\n    lua_pushstring = _require.lua_pushstring,\n    lua_pushvalue = _require.lua_pushvalue,\n    lua_rawgetp = _require.lua_rawgetp,\n    lua_rawsetp = _require.lua_rawsetp,\n    lua_rotate = _require.lua_rotate,\n    lua_setfield = _require.lua_setfield,\n    lua_sethook = _require.lua_sethook,\n    lua_setlocal = _require.lua_setlocal,\n    lua_setmetatable = _require.lua_setmetatable,\n    lua_settop = _require.lua_settop,\n    lua_setupvalue = _require.lua_setupvalue,\n    lua_setuservalue = _require.lua_setuservalue,\n    lua_tojsstring = _require.lua_tojsstring,\n    lua_toproxy = _require.lua_toproxy,\n    lua_tostring = _require.lua_tostring,\n    lua_tothread = _require.lua_tothread,\n    lua_touserdata = _require.lua_touserdata,\n    lua_type = _require.lua_type,\n    lua_upvalueid = _require.lua_upvalueid,\n    lua_upvaluejoin = _require.lua_upvaluejoin,\n    lua_xmove = _require.lua_xmove;\n\nvar _require2 = __webpack_require__(7),\n    luaL_argcheck = _require2.luaL_argcheck,\n    luaL_argerror = _require2.luaL_argerror,\n    luaL_checkany = _require2.luaL_checkany,\n    luaL_checkinteger = _require2.luaL_checkinteger,\n    luaL_checkstring = _require2.luaL_checkstring,\n    luaL_checktype = _require2.luaL_checktype,\n    luaL_error = _require2.luaL_error,\n    luaL_loadbuffer = _require2.luaL_loadbuffer,\n    luaL_newlib = _require2.luaL_newlib,\n    luaL_optinteger = _require2.luaL_optinteger,\n    luaL_optstring = _require2.luaL_optstring,\n    luaL_traceback = _require2.luaL_traceback,\n    lua_writestringerror = _require2.lua_writestringerror;\n\nvar lualib = __webpack_require__(17);\n\nvar _require3 = __webpack_require__(5),\n    luastring_indexOf = _require3.luastring_indexOf,\n    to_luastring = _require3.to_luastring;\n/*\n** If L1 != L, L1 can be in any state, and therefore there are no\n** guarantees about its stack space; any push in L1 must be\n** checked.\n*/\n\n\nvar checkstack = function checkstack(L, L1, n) {\n  if (L !== L1 && !lua_checkstack(L1, n)) luaL_error(L, to_luastring("stack overflow", true));\n};\n\nvar db_getregistry = function db_getregistry(L) {\n  lua_pushvalue(L, LUA_REGISTRYINDEX);\n  return 1;\n};\n\nvar db_getmetatable = function db_getmetatable(L) {\n  luaL_checkany(L, 1);\n\n  if (!lua_getmetatable(L, 1)) {\n    lua_pushnil(L);\n    /* no metatable */\n  }\n\n  return 1;\n};\n\nvar db_setmetatable = function db_setmetatable(L) {\n  var t = lua_type(L, 2);\n  luaL_argcheck(L, t == LUA_TNIL || t == LUA_TTABLE, 2, "nil or table expected");\n  lua_settop(L, 2);\n  lua_setmetatable(L, 1);\n  return 1;\n  /* return 1st argument */\n};\n\nvar db_getuservalue = function db_getuservalue(L) {\n  if (lua_type(L, 1) !== LUA_TUSERDATA) lua_pushnil(L);else lua_getuservalue(L, 1);\n  return 1;\n};\n\nvar db_setuservalue = function db_setuservalue(L) {\n  luaL_checktype(L, 1, LUA_TUSERDATA);\n  luaL_checkany(L, 2);\n  lua_settop(L, 2);\n  lua_setuservalue(L, 1);\n  return 1;\n};\n/*\n** Auxiliary function used by several library functions: check for\n** an optional thread as function\'s first argument and set \'arg\' with\n** 1 if this argument is present (so that functions can skip it to\n** access their other arguments)\n*/\n\n\nvar getthread = function getthread(L) {\n  if (lua_isthread(L, 1)) {\n    return {\n      arg: 1,\n      thread: lua_tothread(L, 1)\n    };\n  } else {\n    return {\n      arg: 0,\n      thread: L\n    };\n    /* function will operate over current thread */\n  }\n};\n/*\n** Variations of \'lua_settable\', used by \'db_getinfo\' to put results\n** from \'lua_getinfo\' into result table. Key is always a string;\n** value can be a string, an int, or a boolean.\n*/\n\n\nvar settabss = function settabss(L, k, v) {\n  lua_pushstring(L, v);\n  lua_setfield(L, -2, k);\n};\n\nvar settabsi = function settabsi(L, k, v) {\n  lua_pushinteger(L, v);\n  lua_setfield(L, -2, k);\n};\n\nvar settabsb = function settabsb(L, k, v) {\n  lua_pushboolean(L, v);\n  lua_setfield(L, -2, k);\n};\n/*\n** In function \'db_getinfo\', the call to \'lua_getinfo\' may push\n** results on the stack; later it creates the result table to put\n** these objects. Function \'treatstackoption\' puts the result from\n** \'lua_getinfo\' on top of the result table so that it can call\n** \'lua_setfield\'.\n*/\n\n\nvar treatstackoption = function treatstackoption(L, L1, fname) {\n  if (L == L1) lua_rotate(L, -2, 1);\n  /* exchange object and table */\n  else lua_xmove(L1, L, 1);\n  /* move object to the "main" stack */\n\n  lua_setfield(L, -2, fname);\n  /* put object into table */\n};\n/*\n** Calls \'lua_getinfo\' and collects all results in a new table.\n** L1 needs stack space for an optional input (function) plus\n** two optional outputs (function and line table) from function\n** \'lua_getinfo\'.\n*/\n\n\nvar db_getinfo = function db_getinfo(L) {\n  var ar = new lua_Debug();\n  var thread = getthread(L);\n  var arg = thread.arg;\n  var L1 = thread.thread;\n  var options = luaL_optstring(L, arg + 2, "flnStu");\n  checkstack(L, L1, 3);\n\n  if (lua_isfunction(L, arg + 1)) {\n    /* info about a function? */\n    options = lua_pushfstring(L, to_luastring(">%s"), options);\n    /* add \'>\' to \'options\' */\n\n    lua_pushvalue(L, arg + 1);\n    /* move function to \'L1\' stack */\n\n    lua_xmove(L, L1, 1);\n  } else {\n    /* stack level */\n    if (!lua_getstack(L1, luaL_checkinteger(L, arg + 1), ar)) {\n      lua_pushnil(L);\n      /* level out of range */\n\n      return 1;\n    }\n  }\n\n  if (!lua_getinfo(L1, options, ar)) luaL_argerror(L, arg + 2, "invalid option");\n  lua_newtable(L);\n  /* table to collect results */\n\n  if (luastring_indexOf(options, 83\n  /* \'S\'.charCodeAt(0) */\n  ) > -1) {\n    settabss(L, to_luastring("source", true), ar.source);\n    settabss(L, to_luastring("short_src", true), ar.short_src);\n    settabsi(L, to_luastring("linedefined", true), ar.linedefined);\n    settabsi(L, to_luastring("lastlinedefined", true), ar.lastlinedefined);\n    settabss(L, to_luastring("what", true), ar.what);\n  }\n\n  if (luastring_indexOf(options, 108\n  /* \'l\'.charCodeAt(0) */\n  ) > -1) settabsi(L, to_luastring("currentline", true), ar.currentline);\n\n  if (luastring_indexOf(options, 117\n  /* \'u\'.charCodeAt(0) */\n  ) > -1) {\n    settabsi(L, to_luastring("nups", true), ar.nups);\n    settabsi(L, to_luastring("nparams", true), ar.nparams);\n    settabsb(L, to_luastring("isvararg", true), ar.isvararg);\n  }\n\n  if (luastring_indexOf(options, 110\n  /* \'n\'.charCodeAt(0) */\n  ) > -1) {\n    settabss(L, to_luastring("name", true), ar.name);\n    settabss(L, to_luastring("namewhat", true), ar.namewhat);\n  }\n\n  if (luastring_indexOf(options, 116\n  /* \'t\'.charCodeAt(0) */\n  ) > -1) settabsb(L, to_luastring("istailcall", true), ar.istailcall);\n  if (luastring_indexOf(options, 76\n  /* \'L\'.charCodeAt(0) */\n  ) > -1) treatstackoption(L, L1, to_luastring("activelines", true));\n  if (luastring_indexOf(options, 102\n  /* \'f\'.charCodeAt(0) */\n  ) > -1) treatstackoption(L, L1, to_luastring("func", true));\n  return 1;\n  /* return table */\n};\n\nvar db_getlocal = function db_getlocal(L) {\n  var thread = getthread(L);\n  var L1 = thread.thread;\n  var arg = thread.arg;\n  var ar = new lua_Debug();\n  var nvar = luaL_checkinteger(L, arg + 2);\n  /* local-variable index */\n\n  if (lua_isfunction(L, arg + 1)) {\n    lua_pushvalue(L, arg + 1);\n    /* push function */\n\n    lua_pushstring(L, lua_getlocal(L, null, nvar));\n    /* push local name */\n\n    return 1;\n    /* return only name (there is no value) */\n  } else {\n    /* stack-level argument */\n    var level = luaL_checkinteger(L, arg + 1);\n    if (!lua_getstack(L1, level, ar))\n      /* out of range? */\n      return luaL_argerror(L, arg + 1, "level out of range");\n    checkstack(L, L1, 1);\n    var name = lua_getlocal(L1, ar, nvar);\n\n    if (name) {\n      lua_xmove(L1, L, 1);\n      /* move local value */\n\n      lua_pushstring(L, name);\n      /* push name */\n\n      lua_rotate(L, -2, 1);\n      /* re-order */\n\n      return 2;\n    } else {\n      lua_pushnil(L);\n      /* no name (nor value) */\n\n      return 1;\n    }\n  }\n};\n\nvar db_setlocal = function db_setlocal(L) {\n  var thread = getthread(L);\n  var L1 = thread.thread;\n  var arg = thread.arg;\n  var ar = new lua_Debug();\n  var level = luaL_checkinteger(L, arg + 1);\n  var nvar = luaL_checkinteger(L, arg + 2);\n  if (!lua_getstack(L1, level, ar))\n    /* out of range? */\n    return luaL_argerror(L, arg + 1, "level out of range");\n  luaL_checkany(L, arg + 3);\n  lua_settop(L, arg + 3);\n  checkstack(L, L1, 1);\n  lua_xmove(L, L1, 1);\n  var name = lua_setlocal(L1, ar, nvar);\n  if (name === null) lua_pop(L1, 1);\n  /* pop value (if not popped by \'lua_setlocal\') */\n\n  lua_pushstring(L, name);\n  return 1;\n};\n/*\n** get (if \'get\' is true) or set an upvalue from a closure\n*/\n\n\nvar auxupvalue = function auxupvalue(L, get) {\n  var n = luaL_checkinteger(L, 2);\n  /* upvalue index */\n\n  luaL_checktype(L, 1, LUA_TFUNCTION);\n  /* closure */\n\n  var name = get ? lua_getupvalue(L, 1, n) : lua_setupvalue(L, 1, n);\n  if (name === null) return 0;\n  lua_pushstring(L, name);\n  lua_insert(L, -(get + 1));\n  /* no-op if get is false */\n\n  return get + 1;\n};\n\nvar db_getupvalue = function db_getupvalue(L) {\n  return auxupvalue(L, 1);\n};\n\nvar db_setupvalue = function db_setupvalue(L) {\n  luaL_checkany(L, 3);\n  return auxupvalue(L, 0);\n};\n/*\n** Check whether a given upvalue from a given closure exists and\n** returns its index\n*/\n\n\nvar checkupval = function checkupval(L, argf, argnup) {\n  var nup = luaL_checkinteger(L, argnup);\n  /* upvalue index */\n\n  luaL_checktype(L, argf, LUA_TFUNCTION);\n  /* closure */\n\n  luaL_argcheck(L, lua_getupvalue(L, argf, nup) !== null, argnup, "invalid upvalue index");\n  return nup;\n};\n\nvar db_upvalueid = function db_upvalueid(L) {\n  var n = checkupval(L, 1, 2);\n  lua_pushlightuserdata(L, lua_upvalueid(L, 1, n));\n  return 1;\n};\n\nvar db_upvaluejoin = function db_upvaluejoin(L) {\n  var n1 = checkupval(L, 1, 2);\n  var n2 = checkupval(L, 3, 4);\n  luaL_argcheck(L, !lua_iscfunction(L, 1), 1, "Lua function expected");\n  luaL_argcheck(L, !lua_iscfunction(L, 3), 3, "Lua function expected");\n  lua_upvaluejoin(L, 1, n1, 3, n2);\n  return 0;\n};\n/*\n** The hook table at registry[HOOKKEY] maps threads to their current\n** hook function. (We only need the unique address of \'HOOKKEY\'.)\n*/\n\n\nvar HOOKKEY = to_luastring("__hooks__", true);\nvar hooknames = ["call", "return", "line", "count", "tail call"].map(function (e) {\n  return to_luastring(e);\n});\n/*\n** Call hook function registered at hook table for the current\n** thread (if there is one)\n*/\n\nvar hookf = function hookf(L, ar) {\n  lua_rawgetp(L, LUA_REGISTRYINDEX, HOOKKEY);\n  var hooktable = lua_touserdata(L, -1);\n  var proxy = hooktable.get(L);\n\n  if (proxy) {\n    /* is there a hook function? */\n    proxy(L);\n    lua_pushstring(L, hooknames[ar.event]);\n    /* push event name */\n\n    if (ar.currentline >= 0) lua_pushinteger(L, ar.currentline);\n    /* push current line */\n    else lua_pushnil(L);\n    lualib.lua_assert(lua_getinfo(L, to_luastring("lS"), ar));\n    lua_call(L, 2, 0);\n    /* call hook function */\n  }\n};\n/*\n** Convert a string mask (for \'sethook\') into a bit mask\n*/\n\n\nvar makemask = function makemask(smask, count) {\n  var mask = 0;\n  if (luastring_indexOf(smask, 99\n  /* \'c\'.charCodeAt(0) */\n  ) > -1) mask |= LUA_MASKCALL;\n  if (luastring_indexOf(smask, 114\n  /* \'r\'.charCodeAt(0) */\n  ) > -1) mask |= LUA_MASKRET;\n  if (luastring_indexOf(smask, 108\n  /* \'l\'.charCodeAt(0) */\n  ) > -1) mask |= LUA_MASKLINE;\n  if (count > 0) mask |= LUA_MASKCOUNT;\n  return mask;\n};\n/*\n** Convert a bit mask (for \'gethook\') into a string mask\n*/\n\n\nvar unmakemask = function unmakemask(mask, smask) {\n  var i = 0;\n  if (mask & LUA_MASKCALL) smask[i++] = 99\n  /* \'c\'.charCodeAt(0) */\n  ;\n  if (mask & LUA_MASKRET) smask[i++] = 114\n  /* \'r\'.charCodeAt(0) */\n  ;\n  if (mask & LUA_MASKLINE) smask[i++] = 108\n  /* \'l\'.charCodeAt(0) */\n  ;\n  return smask.subarray(0, i);\n};\n\nvar db_sethook = function db_sethook(L) {\n  var mask, count, func;\n  var thread = getthread(L);\n  var L1 = thread.thread;\n  var arg = thread.arg;\n\n  if (lua_isnoneornil(L, arg + 1)) {\n    /* no hook? */\n    lua_settop(L, arg + 1);\n    func = null;\n    mask = 0;\n    count = 0;\n    /* turn off hooks */\n  } else {\n    var smask = luaL_checkstring(L, arg + 2);\n    luaL_checktype(L, arg + 1, LUA_TFUNCTION);\n    count = luaL_optinteger(L, arg + 3, 0);\n    func = hookf;\n    mask = makemask(smask, count);\n  }\n  /* as weak tables are not supported; use a JS weak-map */\n\n\n  var hooktable;\n\n  if (lua_rawgetp(L, LUA_REGISTRYINDEX, HOOKKEY) === LUA_TNIL) {\n    hooktable = new WeakMap();\n    lua_pushlightuserdata(L, hooktable);\n    lua_rawsetp(L, LUA_REGISTRYINDEX, HOOKKEY);\n    /* set it in position */\n  } else {\n    hooktable = lua_touserdata(L, -1);\n  }\n\n  var proxy = lua_toproxy(L, arg + 1);\n  /* value (hook function) */\n\n  hooktable.set(L1, proxy);\n  lua_sethook(L1, func, mask, count);\n  return 0;\n};\n\nvar db_gethook = function db_gethook(L) {\n  var thread = getthread(L);\n  var L1 = thread.thread;\n  var buff = new Uint8Array(5);\n  var mask = lua_gethookmask(L1);\n  var hook = lua_gethook(L1);\n  if (hook === null)\n    /* no hook? */\n    lua_pushnil(L);else if (hook !== hookf)\n    /* external hook? */\n    lua_pushliteral(L, "external hook");else {\n    /* hook table must exist */\n    lua_rawgetp(L, LUA_REGISTRYINDEX, HOOKKEY);\n    var hooktable = lua_touserdata(L, -1);\n    var proxy = hooktable.get(L1);\n    proxy(L);\n  }\n  lua_pushstring(L, unmakemask(mask, buff));\n  /* 2nd result = mask */\n\n  lua_pushinteger(L, lua_gethookcount(L1));\n  /* 3rd result = count */\n\n  return 3;\n};\n\nvar db_traceback = function db_traceback(L) {\n  var thread = getthread(L);\n  var L1 = thread.thread;\n  var arg = thread.arg;\n  var msg = lua_tostring(L, arg + 1);\n  if (msg === null && !lua_isnoneornil(L, arg + 1))\n    /* non-string \'msg\'? */\n    lua_pushvalue(L, arg + 1);\n    /* return it untouched */\n  else {\n      var level = luaL_optinteger(L, arg + 2, L === L1 ? 1 : 0);\n      luaL_traceback(L, L1, msg, level);\n    }\n  return 1;\n};\n\nvar dblib = {\n  "gethook": db_gethook,\n  "getinfo": db_getinfo,\n  "getlocal": db_getlocal,\n  "getmetatable": db_getmetatable,\n  "getregistry": db_getregistry,\n  "getupvalue": db_getupvalue,\n  "getuservalue": db_getuservalue,\n  "sethook": db_sethook,\n  "setlocal": db_setlocal,\n  "setmetatable": db_setmetatable,\n  "setupvalue": db_setupvalue,\n  "setuservalue": db_setuservalue,\n  "traceback": db_traceback,\n  "upvalueid": db_upvalueid,\n  "upvaluejoin": db_upvaluejoin\n};\nvar getinput;\n\nif (false) { var readlineSync; } else if (typeof window !== "undefined") {\n  /* if in browser use window.prompt. Doesn\'t work from web workers.\n     See https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt\n  */\n  getinput = function getinput() {\n    var input = prompt("lua_debug>", "");\n    return input !== null ? input : "";\n  };\n}\n\nif (getinput) {\n  dblib.debug = function (L) {\n    for (;;) {\n      var input = getinput();\n      if (input === "cont") return 0;\n      if (input.length === 0) continue;\n      var buffer = to_luastring(input);\n\n      if (luaL_loadbuffer(L, buffer, buffer.length, to_luastring("=(debug command)", true)) || lua_pcall(L, 0, 0, 0)) {\n        lua_writestringerror(lua_tojsstring(L, -1), "\\n");\n      }\n\n      lua_settop(L, 0);\n      /* remove eventual returns */\n    }\n  };\n}\n\nvar luaopen_debug = function luaopen_debug(L) {\n  luaL_newlib(L, dblib);\n  return 1;\n};\n\nmodule.exports.luaopen_debug = luaopen_debug;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///31\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nfunction _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\n\nvar _require = __webpack_require__(3),\n    LUA_DIRSEP = _require.LUA_DIRSEP,\n    LUA_EXEC_DIR = _require.LUA_EXEC_DIR,\n    LUA_JSPATH_DEFAULT = _require.LUA_JSPATH_DEFAULT,\n    LUA_PATH_DEFAULT = _require.LUA_PATH_DEFAULT,\n    LUA_PATH_MARK = _require.LUA_PATH_MARK,\n    LUA_PATH_SEP = _require.LUA_PATH_SEP;\n\nvar _require2 = __webpack_require__(2),\n    LUA_OK = _require2.LUA_OK,\n    LUA_REGISTRYINDEX = _require2.LUA_REGISTRYINDEX,\n    LUA_TNIL = _require2.LUA_TNIL,\n    LUA_TTABLE = _require2.LUA_TTABLE,\n    lua_callk = _require2.lua_callk,\n    lua_createtable = _require2.lua_createtable,\n    lua_getfield = _require2.lua_getfield,\n    lua_insert = _require2.lua_insert,\n    lua_isfunction = _require2.lua_isfunction,\n    lua_isnil = _require2.lua_isnil,\n    lua_isstring = _require2.lua_isstring,\n    lua_newtable = _require2.lua_newtable,\n    lua_pop = _require2.lua_pop,\n    lua_pushboolean = _require2.lua_pushboolean,\n    lua_pushcclosure = _require2.lua_pushcclosure,\n    lua_pushcfunction = _require2.lua_pushcfunction,\n    lua_pushfstring = _require2.lua_pushfstring,\n    lua_pushglobaltable = _require2.lua_pushglobaltable,\n    lua_pushlightuserdata = _require2.lua_pushlightuserdata,\n    lua_pushliteral = _require2.lua_pushliteral,\n    lua_pushlstring = _require2.lua_pushlstring,\n    lua_pushnil = _require2.lua_pushnil,\n    lua_pushstring = _require2.lua_pushstring,\n    lua_pushvalue = _require2.lua_pushvalue,\n    lua_rawgeti = _require2.lua_rawgeti,\n    lua_rawgetp = _require2.lua_rawgetp,\n    lua_rawseti = _require2.lua_rawseti,\n    lua_rawsetp = _require2.lua_rawsetp,\n    lua_remove = _require2.lua_remove,\n    lua_setfield = _require2.lua_setfield,\n    lua_setmetatable = _require2.lua_setmetatable,\n    lua_settop = _require2.lua_settop,\n    lua_toboolean = _require2.lua_toboolean,\n    lua_tostring = _require2.lua_tostring,\n    lua_touserdata = _require2.lua_touserdata,\n    lua_upvalueindex = _require2.lua_upvalueindex;\n\nvar _require3 = __webpack_require__(7),\n    LUA_LOADED_TABLE = _require3.LUA_LOADED_TABLE,\n    LUA_PRELOAD_TABLE = _require3.LUA_PRELOAD_TABLE,\n    luaL_Buffer = _require3.luaL_Buffer,\n    luaL_addvalue = _require3.luaL_addvalue,\n    luaL_buffinit = _require3.luaL_buffinit,\n    luaL_checkstring = _require3.luaL_checkstring,\n    luaL_error = _require3.luaL_error,\n    luaL_getsubtable = _require3.luaL_getsubtable,\n    luaL_gsub = _require3.luaL_gsub,\n    luaL_len = _require3.luaL_len,\n    luaL_loadfile = _require3.luaL_loadfile,\n    luaL_newlib = _require3.luaL_newlib,\n    luaL_optstring = _require3.luaL_optstring,\n    luaL_pushresult = _require3.luaL_pushresult,\n    luaL_setfuncs = _require3.luaL_setfuncs;\n\nvar lualib = __webpack_require__(17);\n\nvar _require4 = __webpack_require__(5),\n    luastring_indexOf = _require4.luastring_indexOf,\n    to_jsstring = _require4.to_jsstring,\n    to_luastring = _require4.to_luastring,\n    to_uristring = _require4.to_uristring;\n\nvar fengari = __webpack_require__(0);\n\nvar global_env = function () {\n  if (false) {} else if (typeof window !== "undefined") {\n    /* browser window */\n    return window;\n  } else if (typeof WorkerGlobalScope !== \'undefined\' && self instanceof WorkerGlobalScope) {\n    /* web worker */\n    return self;\n  } else {\n    /* unknown global env */\n    return (0, eval)(\'this\');\n    /* use non-strict mode to get global env */\n  }\n}();\n\nvar JSLIBS = to_luastring("__JSLIBS__");\nvar LUA_PATH_VAR = "LUA_PATH";\nvar LUA_JSPATH_VAR = "LUA_JSPATH";\nvar LUA_IGMARK = "-";\n/*\n** LUA_CSUBSEP is the character that replaces dots in submodule names\n** when searching for a JS loader.\n** LUA_LSUBSEP is the character that replaces dots in submodule names\n** when searching for a Lua loader.\n*/\n\nvar LUA_CSUBSEP = LUA_DIRSEP;\nvar LUA_LSUBSEP = LUA_DIRSEP;\n/* prefix for open functions in JS libraries */\n\nvar LUA_POF = to_luastring("luaopen_");\n/* separator for open functions in JS libraries */\n\nvar LUA_OFSEP = to_luastring("_");\nvar LIB_FAIL = "open";\nvar AUXMARK = to_luastring("\\x01");\n/*\n** load JS library in file \'path\'. If \'seeglb\', load with all names in\n** the library global.\n** Returns the library; in case of error, returns NULL plus an\n** error string in the stack.\n*/\n\nvar lsys_load;\n\nif (true) {\n  lsys_load = function lsys_load(L, path, seeglb) {\n    path = to_uristring(path);\n    var xhr = new XMLHttpRequest();\n    xhr.open("GET", path, false);\n    xhr.send();\n\n    if (xhr.status < 200 || xhr.status >= 300) {\n      lua_pushstring(L, to_luastring("".concat(xhr.status, ": ").concat(xhr.statusText)));\n      return null;\n    }\n\n    var code = xhr.response;\n    /* Add sourceURL comment to get path in debugger+tracebacks */\n\n    if (!/\\/\\/[#@] sourceURL=/.test(code)) code += " //# sourceURL=" + path;\n    var func;\n\n    try {\n      func = Function("fengari", code);\n    } catch (e) {\n      lua_pushstring(L, to_luastring("".concat(e.name, ": ").concat(e.message)));\n      return null;\n    }\n\n    var res = func(fengari);\n\n    if (typeof res === "function" || _typeof(res) === "object" && res !== null) {\n      return res;\n    } else if (res === void 0) {\n      /* assume library added symbols to global environment */\n      return global_env;\n    } else {\n      lua_pushstring(L, to_luastring("library returned unexpected type (".concat(_typeof(res), ")")));\n      return null;\n    }\n  };\n} else { var pathlib; }\n/*\n** Try to find a function named \'sym\' in library \'lib\'.\n** Returns the function; in case of error, returns NULL plus an\n** error string in the stack.\n*/\n\n\nvar lsys_sym = function lsys_sym(L, lib, sym) {\n  var f = lib[to_jsstring(sym)];\n  if (f && typeof f === \'function\') return f;else {\n    lua_pushfstring(L, to_luastring("undefined symbol: %s"), sym);\n    return null;\n  }\n};\n/*\n** return registry.LUA_NOENV as a boolean\n*/\n\n\nvar noenv = function noenv(L) {\n  lua_getfield(L, LUA_REGISTRYINDEX, to_luastring("LUA_NOENV"));\n  var b = lua_toboolean(L, -1);\n  lua_pop(L, 1);\n  /* remove value */\n\n  return b;\n};\n\nvar readable;\n\nif (false) { var fs; } else {\n  readable = function readable(path) {\n    path = to_uristring(path);\n    var xhr = new XMLHttpRequest();\n    /* Following GET request done by searcher_Web will be cached */\n\n    xhr.open("GET", path, false);\n    xhr.send();\n    return xhr.status >= 200 && xhr.status <= 299;\n  };\n}\n/* error codes for \'lookforfunc\' */\n\n\nvar ERRLIB = 1;\nvar ERRFUNC = 2;\n/*\n** Look for a C function named \'sym\' in a dynamically loaded library\n** \'path\'.\n** First, check whether the library is already loaded; if not, try\n** to load it.\n** Then, if \'sym\' is \'*\', return true (as library has been loaded).\n** Otherwise, look for symbol \'sym\' in the library and push a\n** C function with that symbol.\n** Return 0 and \'true\' or a function in the stack; in case of\n** errors, return an error code and an error message in the stack.\n*/\n\nvar lookforfunc = function lookforfunc(L, path, sym) {\n  var reg = checkjslib(L, path);\n  /* check loaded JS libraries */\n\n  if (reg === null) {\n    /* must load library? */\n    reg = lsys_load(L, path, sym[0] === \'*\'.charCodeAt(0));\n    /* a global symbols if \'sym\'==\'*\' */\n\n    if (reg === null) return ERRLIB;\n    /* unable to load library */\n\n    addtojslib(L, path, reg);\n  }\n\n  if (sym[0] === \'*\'.charCodeAt(0)) {\n    /* loading only library (no function)? */\n    lua_pushboolean(L, 1);\n    /* return \'true\' */\n\n    return 0;\n    /* no errors */\n  } else {\n    var f = lsys_sym(L, reg, sym);\n    if (f === null) return ERRFUNC;\n    /* unable to find function */\n\n    lua_pushcfunction(L, f);\n    /* else create new function */\n\n    return 0;\n    /* no errors */\n  }\n};\n\nvar ll_loadlib = function ll_loadlib(L) {\n  var path = luaL_checkstring(L, 1);\n  var init = luaL_checkstring(L, 2);\n  var stat = lookforfunc(L, path, init);\n  if (stat === 0)\n    /* no errors? */\n    return 1;\n    /* return the loaded function */\n  else {\n      /* error; error message is on stack top */\n      lua_pushnil(L);\n      lua_insert(L, -2);\n      lua_pushliteral(L, stat === ERRLIB ? LIB_FAIL : "init");\n      return 3;\n      /* return nil, error message, and where */\n    }\n};\n\nvar env = function () {\n  if (false) {} else {\n    return global_env;\n  }\n}();\n/*\n** Set a path\n*/\n\n\nvar setpath = function setpath(L, fieldname, envname, dft) {\n  var nver = "".concat(envname).concat(lualib.LUA_VERSUFFIX);\n  lua_pushstring(L, to_luastring(nver));\n  var path = env[nver];\n  /* use versioned name */\n\n  if (path === undefined)\n    /* no environment variable? */\n    path = env[envname];\n  /* try unversioned name */\n\n  if (path === undefined || noenv(L))\n    /* no environment variable? */\n    lua_pushstring(L, dft);\n    /* use default */\n  else {\n      /* replace ";;" by ";AUXMARK;" and then AUXMARK by default path */\n      path = luaL_gsub(L, to_luastring(path), to_luastring(LUA_PATH_SEP + LUA_PATH_SEP, true), to_luastring(LUA_PATH_SEP + to_jsstring(AUXMARK) + LUA_PATH_SEP, true));\n      luaL_gsub(L, path, AUXMARK, dft);\n      lua_remove(L, -2);\n      /* remove result from 1st \'gsub\' */\n    }\n  lua_setfield(L, -3, fieldname);\n  /* package[fieldname] = path value */\n\n  lua_pop(L, 1);\n  /* pop versioned variable name */\n};\n/*\n** return registry.JSLIBS[path]\n*/\n\n\nvar checkjslib = function checkjslib(L, path) {\n  lua_rawgetp(L, LUA_REGISTRYINDEX, JSLIBS);\n  lua_getfield(L, -1, path);\n  var plib = lua_touserdata(L, -1);\n  /* plib = JSLIBS[path] */\n\n  lua_pop(L, 2);\n  /* pop JSLIBS table and \'plib\' */\n\n  return plib;\n};\n/*\n** registry.JSLIBS[path] = plib        -- for queries\n** registry.JSLIBS[#JSLIBS + 1] = plib  -- also keep a list of all libraries\n*/\n\n\nvar addtojslib = function addtojslib(L, path, plib) {\n  lua_rawgetp(L, LUA_REGISTRYINDEX, JSLIBS);\n  lua_pushlightuserdata(L, plib);\n  lua_pushvalue(L, -1);\n  lua_setfield(L, -3, path);\n  /* JSLIBS[path] = plib */\n\n  lua_rawseti(L, -2, luaL_len(L, -2) + 1);\n  /* JSLIBS[#JSLIBS + 1] = plib */\n\n  lua_pop(L, 1);\n  /* pop JSLIBS table */\n};\n\nvar pushnexttemplate = function pushnexttemplate(L, path) {\n  while (path[0] === LUA_PATH_SEP.charCodeAt(0)) {\n    path = path.subarray(1);\n  }\n  /* skip separators */\n\n\n  if (path.length === 0) return null;\n  /* no more templates */\n\n  var l = luastring_indexOf(path, LUA_PATH_SEP.charCodeAt(0));\n  /* find next separator */\n\n  if (l < 0) l = path.length;\n  lua_pushlstring(L, path, l);\n  /* template */\n\n  return path.subarray(l);\n};\n\nvar searchpath = function searchpath(L, name, path, sep, dirsep) {\n  var msg = new luaL_Buffer();\n  /* to build error message */\n\n  luaL_buffinit(L, msg);\n  if (sep[0] !== 0)\n    /* non-empty separator? */\n    name = luaL_gsub(L, name, sep, dirsep);\n  /* replace it by \'dirsep\' */\n\n  while ((path = pushnexttemplate(L, path)) !== null) {\n    var filename = luaL_gsub(L, lua_tostring(L, -1), to_luastring(LUA_PATH_MARK, true), name);\n    lua_remove(L, -2);\n    /* remove path template */\n\n    if (readable(filename))\n      /* does file exist and is readable? */\n      return filename;\n    /* return that file name */\n\n    lua_pushfstring(L, to_luastring("\\n\\tno file \'%s\'"), filename);\n    lua_remove(L, -2);\n    /* remove file name */\n\n    luaL_addvalue(msg);\n  }\n\n  luaL_pushresult(msg);\n  /* create error message */\n\n  return null;\n  /* not found */\n};\n\nvar ll_searchpath = function ll_searchpath(L) {\n  var f = searchpath(L, luaL_checkstring(L, 1), luaL_checkstring(L, 2), luaL_optstring(L, 3, "."), luaL_optstring(L, 4, LUA_DIRSEP));\n  if (f !== null) return 1;else {\n    /* error message is on top of the stack */\n    lua_pushnil(L);\n    lua_insert(L, -2);\n    return 2;\n    /* return nil + error message */\n  }\n};\n\nvar findfile = function findfile(L, name, pname, dirsep) {\n  lua_getfield(L, lua_upvalueindex(1), pname);\n  var path = lua_tostring(L, -1);\n  if (path === null) luaL_error(L, to_luastring("\'package.%s\' must be a string"), pname);\n  return searchpath(L, name, path, to_luastring("."), dirsep);\n};\n\nvar checkload = function checkload(L, stat, filename) {\n  if (stat) {\n    /* module loaded successfully? */\n    lua_pushstring(L, filename);\n    /* will be 2nd argument to module */\n\n    return 2;\n    /* return open function and file name */\n  } else return luaL_error(L, to_luastring("error loading module \'%s\' from file \'%s\':\\n\\t%s"), lua_tostring(L, 1), filename, lua_tostring(L, -1));\n};\n\nvar searcher_Lua = function searcher_Lua(L) {\n  var name = luaL_checkstring(L, 1);\n  var filename = findfile(L, name, to_luastring("path", true), to_luastring(LUA_LSUBSEP, true));\n  if (filename === null) return 1;\n  /* module not found in this path */\n\n  return checkload(L, luaL_loadfile(L, filename) === LUA_OK, filename);\n};\n/*\n** Try to find a load function for module \'modname\' at file \'filename\'.\n** First, change \'.\' to \'_\' in \'modname\'; then, if \'modname\' has\n** the form X-Y (that is, it has an "ignore mark"), build a function\n** name "luaopen_X" and look for it. (For compatibility, if that\n** fails, it also tries "luaopen_Y".) If there is no ignore mark,\n** look for a function named "luaopen_modname".\n*/\n\n\nvar loadfunc = function loadfunc(L, filename, modname) {\n  var openfunc;\n  modname = luaL_gsub(L, modname, to_luastring("."), LUA_OFSEP);\n  var mark = luastring_indexOf(modname, LUA_IGMARK.charCodeAt(0));\n\n  if (mark >= 0) {\n    openfunc = lua_pushlstring(L, modname, mark);\n    openfunc = lua_pushfstring(L, to_luastring("%s%s"), LUA_POF, openfunc);\n    var stat = lookforfunc(L, filename, openfunc);\n    if (stat !== ERRFUNC) return stat;\n    modname = mark + 1;\n    /* else go ahead and try old-style name */\n  }\n\n  openfunc = lua_pushfstring(L, to_luastring("%s%s"), LUA_POF, modname);\n  return lookforfunc(L, filename, openfunc);\n};\n\nvar searcher_C = function searcher_C(L) {\n  var name = luaL_checkstring(L, 1);\n  var filename = findfile(L, name, to_luastring("jspath", true), to_luastring(LUA_CSUBSEP, true));\n  if (filename === null) return 1;\n  /* module not found in this path */\n\n  return checkload(L, loadfunc(L, filename, name) === 0, filename);\n};\n\nvar searcher_Croot = function searcher_Croot(L) {\n  var name = luaL_checkstring(L, 1);\n  var p = luastring_indexOf(name, \'.\'.charCodeAt(0));\n  var stat;\n  if (p < 0) return 0;\n  /* is root */\n\n  lua_pushlstring(L, name, p);\n  var filename = findfile(L, lua_tostring(L, -1), to_luastring("jspath", true), to_luastring(LUA_CSUBSEP, true));\n  if (filename === null) return 1;\n  /* root not found */\n\n  if ((stat = loadfunc(L, filename, name)) !== 0) {\n    if (stat != ERRFUNC) return checkload(L, 0, filename);\n    /* real error */\n    else {\n        /* open function not found */\n        lua_pushstring(L, to_luastring("\\n\\tno module \'%s\' in file \'%s\'"), name, filename);\n        return 1;\n      }\n  }\n\n  lua_pushstring(L, filename);\n  /* will be 2nd argument to module */\n\n  return 2;\n};\n\nvar searcher_preload = function searcher_preload(L) {\n  var name = luaL_checkstring(L, 1);\n  lua_getfield(L, LUA_REGISTRYINDEX, LUA_PRELOAD_TABLE);\n  if (lua_getfield(L, -1, name) === LUA_TNIL)\n    /* not found? */\n    lua_pushfstring(L, to_luastring("\\n\\tno field package.preload[\'%s\']"), name);\n  return 1;\n};\n\nvar findloader = function findloader(L, name, ctx, k) {\n  var msg = new luaL_Buffer();\n  /* to build error message */\n\n  luaL_buffinit(L, msg);\n  /* push \'package.searchers\' to index 3 in the stack */\n\n  if (lua_getfield(L, lua_upvalueindex(1), to_luastring("searchers", true)) !== LUA_TTABLE) luaL_error(L, to_luastring("\'package.searchers\' must be a table"));\n  var ctx2 = {\n    name: name,\n    i: 1,\n    msg: msg,\n    ctx: ctx,\n    k: k\n  };\n  return findloader_cont(L, LUA_OK, ctx2);\n};\n\nvar findloader_cont = function findloader_cont(L, status, ctx) {\n  /*  iterate over available searchers to find a loader */\n  for (;; ctx.i++) {\n    if (status === LUA_OK) {\n      if (lua_rawgeti(L, 3, ctx.i) === LUA_TNIL) {\n        /* no more searchers? */\n        lua_pop(L, 1);\n        /* remove nil */\n\n        luaL_pushresult(ctx.msg);\n        /* create error message */\n\n        luaL_error(L, to_luastring("module \'%s\' not found:%s"), ctx.name, lua_tostring(L, -1));\n      }\n\n      lua_pushstring(L, ctx.name);\n      lua_callk(L, 1, 2, ctx, findloader_cont);\n      /* call it */\n    } else {\n      status = LUA_OK;\n    }\n\n    if (lua_isfunction(L, -2))\n      /* did it find a loader? */\n      break;\n      /* module loader found */\n    else if (lua_isstring(L, -2)) {\n        /* searcher returned error message? */\n        lua_pop(L, 1);\n        /* remove extra return */\n\n        luaL_addvalue(ctx.msg);\n        /* concatenate error message */\n      } else lua_pop(L, 2);\n    /* remove both returns */\n  }\n\n  return ctx.k(L, LUA_OK, ctx.ctx);\n};\n\nvar ll_require = function ll_require(L) {\n  var name = luaL_checkstring(L, 1);\n  lua_settop(L, 1);\n  /* LOADED table will be at index 2 */\n\n  lua_getfield(L, LUA_REGISTRYINDEX, LUA_LOADED_TABLE);\n  lua_getfield(L, 2, name);\n  /* LOADED[name] */\n\n  if (lua_toboolean(L, -1))\n    /* is it there? */\n    return 1;\n  /* package is already loaded */\n\n  /* else must load package */\n\n  lua_pop(L, 1);\n  /* remove \'getfield\' result */\n\n  var ctx = name;\n  return findloader(L, name, ctx, ll_require_cont);\n};\n\nvar ll_require_cont = function ll_require_cont(L, status, ctx) {\n  var name = ctx;\n  lua_pushstring(L, name);\n  /* pass name as argument to module loader */\n\n  lua_insert(L, -2);\n  /* name is 1st argument (before search data) */\n\n  lua_callk(L, 2, 1, ctx, ll_require_cont2);\n  return ll_require_cont2(L, LUA_OK, ctx);\n  /* run loader to load module */\n};\n\nvar ll_require_cont2 = function ll_require_cont2(L, status, ctx) {\n  var name = ctx;\n  if (!lua_isnil(L, -1))\n    /* non-nil return? */\n    lua_setfield(L, 2, name);\n  /* LOADED[name] = returned value */\n\n  if (lua_getfield(L, 2, name) == LUA_TNIL) {\n    /* module set no value? */\n    lua_pushboolean(L, 1);\n    /* use true as result */\n\n    lua_pushvalue(L, -1);\n    /* extra copy to be returned */\n\n    lua_setfield(L, 2, name);\n    /* LOADED[name] = true */\n  }\n\n  return 1;\n};\n\nvar pk_funcs = {\n  "loadlib": ll_loadlib,\n  "searchpath": ll_searchpath\n};\nvar ll_funcs = {\n  "require": ll_require\n};\n\nvar createsearcherstable = function createsearcherstable(L) {\n  var searchers = [searcher_preload, searcher_Lua, searcher_C, searcher_Croot, null];\n  /* create \'searchers\' table */\n\n  lua_createtable(L);\n  /* fill it with predefined searchers */\n\n  for (var i = 0; searchers[i]; i++) {\n    lua_pushvalue(L, -2);\n    /* set \'package\' as upvalue for all searchers */\n\n    lua_pushcclosure(L, searchers[i], 1);\n    lua_rawseti(L, -2, i + 1);\n  }\n\n  lua_setfield(L, -2, to_luastring("searchers", true));\n  /* put it in field \'searchers\' */\n};\n/*\n** create table JSLIBS to keep track of loaded JS libraries,\n** setting a finalizer to close all libraries when closing state.\n*/\n\n\nvar createjslibstable = function createjslibstable(L) {\n  lua_newtable(L);\n  /* create JSLIBS table */\n\n  lua_createtable(L, 0, 1);\n  /* create metatable for JSLIBS */\n\n  lua_setmetatable(L, -2);\n  lua_rawsetp(L, LUA_REGISTRYINDEX, JSLIBS);\n  /* set JSLIBS table in registry */\n};\n\nvar luaopen_package = function luaopen_package(L) {\n  createjslibstable(L);\n  luaL_newlib(L, pk_funcs);\n  /* create \'package\' table */\n\n  createsearcherstable(L);\n  /* set paths */\n\n  setpath(L, to_luastring("path", true), LUA_PATH_VAR, LUA_PATH_DEFAULT);\n  setpath(L, to_luastring("jspath", true), LUA_JSPATH_VAR, LUA_JSPATH_DEFAULT);\n  /* store config information */\n\n  lua_pushliteral(L, LUA_DIRSEP + "\\n" + LUA_PATH_SEP + "\\n" + LUA_PATH_MARK + "\\n" + LUA_EXEC_DIR + "\\n" + LUA_IGMARK + "\\n");\n  lua_setfield(L, -2, to_luastring("config", true));\n  /* set field \'loaded\' */\n\n  luaL_getsubtable(L, LUA_REGISTRYINDEX, LUA_LOADED_TABLE);\n  lua_setfield(L, -2, to_luastring("loaded", true));\n  /* set field \'preload\' */\n\n  luaL_getsubtable(L, LUA_REGISTRYINDEX, LUA_PRELOAD_TABLE);\n  lua_setfield(L, -2, to_luastring("preload", true));\n  lua_pushglobaltable(L);\n  lua_pushvalue(L, -2);\n  /* set \'package\' as upvalue for next lib */\n\n  luaL_setfuncs(L, ll_funcs, 1);\n  /* open lib into global table */\n\n  lua_pop(L, 1);\n  /* pop global table */\n\n  return 1;\n  /* return \'package\' table */\n};\n\nmodule.exports.luaopen_package = luaopen_package;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///32\n')},function(module,exports,__webpack_require__){eval('var _require = __webpack_require__(2),\n    lua_pushinteger = _require.lua_pushinteger,\n    lua_pushliteral = _require.lua_pushliteral,\n    lua_setfield = _require.lua_setfield;\n\nvar _require2 = __webpack_require__(7),\n    luaL_newlib = _require2.luaL_newlib;\n\nvar _require3 = __webpack_require__(5),\n    FENGARI_AUTHORS = _require3.FENGARI_AUTHORS,\n    FENGARI_COPYRIGHT = _require3.FENGARI_COPYRIGHT,\n    FENGARI_RELEASE = _require3.FENGARI_RELEASE,\n    FENGARI_VERSION = _require3.FENGARI_VERSION,\n    FENGARI_VERSION_MAJOR = _require3.FENGARI_VERSION_MAJOR,\n    FENGARI_VERSION_MINOR = _require3.FENGARI_VERSION_MINOR,\n    FENGARI_VERSION_NUM = _require3.FENGARI_VERSION_NUM,\n    FENGARI_VERSION_RELEASE = _require3.FENGARI_VERSION_RELEASE,\n    to_luastring = _require3.to_luastring;\n\nvar luaopen_fengari = function luaopen_fengari(L) {\n  luaL_newlib(L, {});\n  lua_pushliteral(L, FENGARI_AUTHORS);\n  lua_setfield(L, -2, to_luastring("AUTHORS"));\n  lua_pushliteral(L, FENGARI_COPYRIGHT);\n  lua_setfield(L, -2, to_luastring("COPYRIGHT"));\n  lua_pushliteral(L, FENGARI_RELEASE);\n  lua_setfield(L, -2, to_luastring("RELEASE"));\n  lua_pushliteral(L, FENGARI_VERSION);\n  lua_setfield(L, -2, to_luastring("VERSION"));\n  lua_pushliteral(L, FENGARI_VERSION_MAJOR);\n  lua_setfield(L, -2, to_luastring("VERSION_MAJOR"));\n  lua_pushliteral(L, FENGARI_VERSION_MINOR);\n  lua_setfield(L, -2, to_luastring("VERSION_MINOR"));\n  lua_pushinteger(L, FENGARI_VERSION_NUM);\n  lua_setfield(L, -2, to_luastring("VERSION_NUM"));\n  lua_pushliteral(L, FENGARI_VERSION_RELEASE);\n  lua_setfield(L, -2, to_luastring("VERSION_RELEASE"));\n  return 1;\n};\n\nmodule.exports.luaopen_fengari = luaopen_fengari;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mZW5nYXJpLy4vbm9kZV9tb2R1bGVzL2Zlbmdhcmkvc3JjL2ZlbmdhcmlsaWIuanM/ODY3ZCJdLCJuYW1lcyI6WyJyZXF1aXJlIiwibHVhX3B1c2hpbnRlZ2VyIiwibHVhX3B1c2hsaXRlcmFsIiwibHVhX3NldGZpZWxkIiwibHVhTF9uZXdsaWIiLCJGRU5HQVJJX0FVVEhPUlMiLCJGRU5HQVJJX0NPUFlSSUdIVCIsIkZFTkdBUklfUkVMRUFTRSIsIkZFTkdBUklfVkVSU0lPTiIsIkZFTkdBUklfVkVSU0lPTl9NQUpPUiIsIkZFTkdBUklfVkVSU0lPTl9NSU5PUiIsIkZFTkdBUklfVkVSU0lPTl9OVU0iLCJGRU5HQVJJX1ZFUlNJT05fUkVMRUFTRSIsInRvX2x1YXN0cmluZyIsImx1YW9wZW5fZmVuZ2FyaSIsIkwiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiZUFJSUEsbUJBQU8sQ0FBQyxDQUFELEM7SUFIUEMsZSxZQUFBQSxlO0lBQ0FDLGUsWUFBQUEsZTtJQUNBQyxZLFlBQUFBLFk7O2dCQUlBSCxtQkFBTyxDQUFDLENBQUQsQztJQURQSSxXLGFBQUFBLFc7O2dCQVlBSixtQkFBTyxDQUFDLENBQUQsQztJQVRQSyxlLGFBQUFBLGU7SUFDQUMsaUIsYUFBQUEsaUI7SUFDQUMsZSxhQUFBQSxlO0lBQ0FDLGUsYUFBQUEsZTtJQUNBQyxxQixhQUFBQSxxQjtJQUNBQyxxQixhQUFBQSxxQjtJQUNBQyxtQixhQUFBQSxtQjtJQUNBQyx1QixhQUFBQSx1QjtJQUNBQyxZLGFBQUFBLFk7O0FBR0osSUFBTUMsZUFBZSxHQUFHLFNBQWxCQSxlQUFrQixDQUFTQyxDQUFULEVBQVk7QUFDaENYLGFBQVcsQ0FBQ1csQ0FBRCxFQUFJLEVBQUosQ0FBWDtBQUNBYixpQkFBZSxDQUFDYSxDQUFELEVBQUlWLGVBQUosQ0FBZjtBQUNBRixjQUFZLENBQUNZLENBQUQsRUFBSSxDQUFDLENBQUwsRUFBUUYsWUFBWSxDQUFDLFNBQUQsQ0FBcEIsQ0FBWjtBQUNBWCxpQkFBZSxDQUFDYSxDQUFELEVBQUlULGlCQUFKLENBQWY7QUFDQUgsY0FBWSxDQUFDWSxDQUFELEVBQUksQ0FBQyxDQUFMLEVBQVFGLFlBQVksQ0FBQyxXQUFELENBQXBCLENBQVo7QUFDQVgsaUJBQWUsQ0FBQ2EsQ0FBRCxFQUFJUixlQUFKLENBQWY7QUFDQUosY0FBWSxDQUFDWSxDQUFELEVBQUksQ0FBQyxDQUFMLEVBQVFGLFlBQVksQ0FBQyxTQUFELENBQXBCLENBQVo7QUFDQVgsaUJBQWUsQ0FBQ2EsQ0FBRCxFQUFJUCxlQUFKLENBQWY7QUFDQUwsY0FBWSxDQUFDWSxDQUFELEVBQUksQ0FBQyxDQUFMLEVBQVFGLFlBQVksQ0FBQyxTQUFELENBQXBCLENBQVo7QUFDQVgsaUJBQWUsQ0FBQ2EsQ0FBRCxFQUFJTixxQkFBSixDQUFmO0FBQ0FOLGNBQVksQ0FBQ1ksQ0FBRCxFQUFJLENBQUMsQ0FBTCxFQUFRRixZQUFZLENBQUMsZUFBRCxDQUFwQixDQUFaO0FBQ0FYLGlCQUFlLENBQUNhLENBQUQsRUFBSUwscUJBQUosQ0FBZjtBQUNBUCxjQUFZLENBQUNZLENBQUQsRUFBSSxDQUFDLENBQUwsRUFBUUYsWUFBWSxDQUFDLGVBQUQsQ0FBcEIsQ0FBWjtBQUNBWixpQkFBZSxDQUFDYyxDQUFELEVBQUlKLG1CQUFKLENBQWY7QUFDQVIsY0FBWSxDQUFDWSxDQUFELEVBQUksQ0FBQyxDQUFMLEVBQVFGLFlBQVksQ0FBQyxhQUFELENBQXBCLENBQVo7QUFDQVgsaUJBQWUsQ0FBQ2EsQ0FBRCxFQUFJSCx1QkFBSixDQUFmO0FBQ0FULGNBQVksQ0FBQ1ksQ0FBRCxFQUFJLENBQUMsQ0FBTCxFQUFRRixZQUFZLENBQUMsaUJBQUQsQ0FBcEIsQ0FBWjtBQUNBLFNBQU8sQ0FBUDtBQUNILENBbkJEOztBQXFCQUcsTUFBTSxDQUFDQyxPQUFQLENBQWVILGVBQWYsR0FBaUNBLGVBQWpDIiwiZmlsZSI6IjMzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3Qge1xuICAgIGx1YV9wdXNoaW50ZWdlcixcbiAgICBsdWFfcHVzaGxpdGVyYWwsXG4gICAgbHVhX3NldGZpZWxkXG59ID0gcmVxdWlyZSgnLi9sdWEuanMnKTtcbmNvbnN0IHtcbiAgICBsdWFMX25ld2xpYlxufSA9IHJlcXVpcmUoJy4vbGF1eGxpYi5qcycpO1xuY29uc3Qge1xuICAgIEZFTkdBUklfQVVUSE9SUyxcbiAgICBGRU5HQVJJX0NPUFlSSUdIVCxcbiAgICBGRU5HQVJJX1JFTEVBU0UsXG4gICAgRkVOR0FSSV9WRVJTSU9OLFxuICAgIEZFTkdBUklfVkVSU0lPTl9NQUpPUixcbiAgICBGRU5HQVJJX1ZFUlNJT05fTUlOT1IsXG4gICAgRkVOR0FSSV9WRVJTSU9OX05VTSxcbiAgICBGRU5HQVJJX1ZFUlNJT05fUkVMRUFTRSxcbiAgICB0b19sdWFzdHJpbmdcbn0gPSByZXF1aXJlKFwiLi9mZW5nYXJpY29yZS5qc1wiKTtcblxuY29uc3QgbHVhb3Blbl9mZW5nYXJpID0gZnVuY3Rpb24oTCkge1xuICAgIGx1YUxfbmV3bGliKEwsIHt9KTtcbiAgICBsdWFfcHVzaGxpdGVyYWwoTCwgRkVOR0FSSV9BVVRIT1JTKTtcbiAgICBsdWFfc2V0ZmllbGQoTCwgLTIsIHRvX2x1YXN0cmluZyhcIkFVVEhPUlNcIikpO1xuICAgIGx1YV9wdXNobGl0ZXJhbChMLCBGRU5HQVJJX0NPUFlSSUdIVCk7XG4gICAgbHVhX3NldGZpZWxkKEwsIC0yLCB0b19sdWFzdHJpbmcoXCJDT1BZUklHSFRcIikpO1xuICAgIGx1YV9wdXNobGl0ZXJhbChMLCBGRU5HQVJJX1JFTEVBU0UpO1xuICAgIGx1YV9zZXRmaWVsZChMLCAtMiwgdG9fbHVhc3RyaW5nKFwiUkVMRUFTRVwiKSk7XG4gICAgbHVhX3B1c2hsaXRlcmFsKEwsIEZFTkdBUklfVkVSU0lPTik7XG4gICAgbHVhX3NldGZpZWxkKEwsIC0yLCB0b19sdWFzdHJpbmcoXCJWRVJTSU9OXCIpKTtcbiAgICBsdWFfcHVzaGxpdGVyYWwoTCwgRkVOR0FSSV9WRVJTSU9OX01BSk9SKTtcbiAgICBsdWFfc2V0ZmllbGQoTCwgLTIsIHRvX2x1YXN0cmluZyhcIlZFUlNJT05fTUFKT1JcIikpO1xuICAgIGx1YV9wdXNobGl0ZXJhbChMLCBGRU5HQVJJX1ZFUlNJT05fTUlOT1IpO1xuICAgIGx1YV9zZXRmaWVsZChMLCAtMiwgdG9fbHVhc3RyaW5nKFwiVkVSU0lPTl9NSU5PUlwiKSk7XG4gICAgbHVhX3B1c2hpbnRlZ2VyKEwsIEZFTkdBUklfVkVSU0lPTl9OVU0pO1xuICAgIGx1YV9zZXRmaWVsZChMLCAtMiwgdG9fbHVhc3RyaW5nKFwiVkVSU0lPTl9OVU1cIikpO1xuICAgIGx1YV9wdXNobGl0ZXJhbChMLCBGRU5HQVJJX1ZFUlNJT05fUkVMRUFTRSk7XG4gICAgbHVhX3NldGZpZWxkKEwsIC0yLCB0b19sdWFzdHJpbmcoXCJWRVJTSU9OX1JFTEVBU0VcIikpO1xuICAgIHJldHVybiAxO1xufTtcblxubW9kdWxlLmV4cG9ydHMubHVhb3Blbl9mZW5nYXJpID0gbHVhb3Blbl9mZW5nYXJpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///33\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "L", function() { return L; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "load", function() { return load; });\n/* harmony import */ var fengari__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);\n/* harmony import */ var fengari__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fengari__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FENGARI_AUTHORS", function() { return fengari__WEBPACK_IMPORTED_MODULE_0__["FENGARI_AUTHORS"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FENGARI_COPYRIGHT", function() { return fengari__WEBPACK_IMPORTED_MODULE_0__["FENGARI_COPYRIGHT"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FENGARI_RELEASE", function() { return fengari__WEBPACK_IMPORTED_MODULE_0__["FENGARI_RELEASE"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FENGARI_VERSION", function() { return fengari__WEBPACK_IMPORTED_MODULE_0__["FENGARI_VERSION"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FENGARI_VERSION_MAJOR", function() { return fengari__WEBPACK_IMPORTED_MODULE_0__["FENGARI_VERSION_MAJOR"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FENGARI_VERSION_MINOR", function() { return fengari__WEBPACK_IMPORTED_MODULE_0__["FENGARI_VERSION_MINOR"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FENGARI_VERSION_NUM", function() { return fengari__WEBPACK_IMPORTED_MODULE_0__["FENGARI_VERSION_NUM"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FENGARI_VERSION_RELEASE", function() { return fengari__WEBPACK_IMPORTED_MODULE_0__["FENGARI_VERSION_RELEASE"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "luastring_eq", function() { return fengari__WEBPACK_IMPORTED_MODULE_0__["luastring_eq"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "luastring_indexOf", function() { return fengari__WEBPACK_IMPORTED_MODULE_0__["luastring_indexOf"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "luastring_of", function() { return fengari__WEBPACK_IMPORTED_MODULE_0__["luastring_of"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "to_jsstring", function() { return fengari__WEBPACK_IMPORTED_MODULE_0__["to_jsstring"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "to_luastring", function() { return fengari__WEBPACK_IMPORTED_MODULE_0__["to_luastring"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "to_uristring", function() { return fengari__WEBPACK_IMPORTED_MODULE_0__["to_uristring"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "lua", function() { return fengari__WEBPACK_IMPORTED_MODULE_0__["lua"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "lauxlib", function() { return fengari__WEBPACK_IMPORTED_MODULE_0__["lauxlib"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "lualib", function() { return fengari__WEBPACK_IMPORTED_MODULE_0__["lualib"]; });\n\n/* harmony import */ var fengari_interop__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(18);\n/* harmony import */ var fengari_interop__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(fengari_interop__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "interop", function() { return fengari_interop__WEBPACK_IMPORTED_MODULE_1__; });\n\n\n\n\nvar LUA_ERRRUN = fengari__WEBPACK_IMPORTED_MODULE_0__["lua"].LUA_ERRRUN,\n    LUA_ERRSYNTAX = fengari__WEBPACK_IMPORTED_MODULE_0__["lua"].LUA_ERRSYNTAX,\n    LUA_OK = fengari__WEBPACK_IMPORTED_MODULE_0__["lua"].LUA_OK,\n    LUA_VERSION_MAJOR = fengari__WEBPACK_IMPORTED_MODULE_0__["lua"].LUA_VERSION_MAJOR,\n    LUA_VERSION_MINOR = fengari__WEBPACK_IMPORTED_MODULE_0__["lua"].LUA_VERSION_MINOR,\n    lua_Debug = fengari__WEBPACK_IMPORTED_MODULE_0__["lua"].lua_Debug,\n    lua_getinfo = fengari__WEBPACK_IMPORTED_MODULE_0__["lua"].lua_getinfo,\n    lua_getstack = fengari__WEBPACK_IMPORTED_MODULE_0__["lua"].lua_getstack,\n    lua_gettop = fengari__WEBPACK_IMPORTED_MODULE_0__["lua"].lua_gettop,\n    lua_insert = fengari__WEBPACK_IMPORTED_MODULE_0__["lua"].lua_insert,\n    lua_pcall = fengari__WEBPACK_IMPORTED_MODULE_0__["lua"].lua_pcall,\n    lua_pop = fengari__WEBPACK_IMPORTED_MODULE_0__["lua"].lua_pop,\n    lua_pushcfunction = fengari__WEBPACK_IMPORTED_MODULE_0__["lua"].lua_pushcfunction,\n    lua_pushstring = fengari__WEBPACK_IMPORTED_MODULE_0__["lua"].lua_pushstring,\n    lua_remove = fengari__WEBPACK_IMPORTED_MODULE_0__["lua"].lua_remove,\n    lua_setglobal = fengari__WEBPACK_IMPORTED_MODULE_0__["lua"].lua_setglobal,\n    lua_tojsstring = fengari__WEBPACK_IMPORTED_MODULE_0__["lua"].lua_tojsstring;\nvar luaL_loadbuffer = fengari__WEBPACK_IMPORTED_MODULE_0__["lauxlib"].luaL_loadbuffer,\n    luaL_newstate = fengari__WEBPACK_IMPORTED_MODULE_0__["lauxlib"].luaL_newstate,\n    luaL_requiref = fengari__WEBPACK_IMPORTED_MODULE_0__["lauxlib"].luaL_requiref;\nvar checkjs = fengari_interop__WEBPACK_IMPORTED_MODULE_1__["checkjs"],\n    luaopen_js = fengari_interop__WEBPACK_IMPORTED_MODULE_1__["luaopen_js"],\n    push = fengari_interop__WEBPACK_IMPORTED_MODULE_1__["push"],\n    tojs = fengari_interop__WEBPACK_IMPORTED_MODULE_1__["tojs"];\n\nvar L = luaL_newstate();\n/* open standard libraries */\n\nfengari__WEBPACK_IMPORTED_MODULE_0__["lualib"].luaL_openlibs(L);\nluaL_requiref(L, Object(fengari__WEBPACK_IMPORTED_MODULE_0__["to_luastring"])("js"), luaopen_js, 1);\nlua_pop(L, 1);\n/* remove lib */\n\nlua_pushstring(L, Object(fengari__WEBPACK_IMPORTED_MODULE_0__["to_luastring"])(fengari__WEBPACK_IMPORTED_MODULE_0__["FENGARI_COPYRIGHT"]));\nlua_setglobal(L, Object(fengari__WEBPACK_IMPORTED_MODULE_0__["to_luastring"])("_COPYRIGHT"));\n/* Helper function to load a JS string of Lua source */\n\nfunction load(source, chunkname) {\n  if (typeof source == "string") source = Object(fengari__WEBPACK_IMPORTED_MODULE_0__["to_luastring"])(source);else if (!(source instanceof Uint8Array)) throw new TypeError("expects an array of bytes or javascript string");\n  chunkname = chunkname ? Object(fengari__WEBPACK_IMPORTED_MODULE_0__["to_luastring"])(chunkname) : null;\n  var ok = luaL_loadbuffer(L, source, null, chunkname);\n  var res;\n\n  if (ok === LUA_ERRSYNTAX) {\n    res = new SyntaxError(lua_tojsstring(L, -1));\n  } else {\n    res = tojs(L, -1);\n  }\n\n  lua_pop(L, 1);\n\n  if (ok !== LUA_OK) {\n    throw res;\n  }\n\n  return res;\n}\n\nif (typeof document !== \'undefined\' && document instanceof HTMLDocument) {\n  /* Have a document, e.g. we are in main browser window */\n  var crossorigin_to_credentials = function crossorigin_to_credentials(crossorigin) {\n    switch (crossorigin) {\n      case "anonymous":\n        return "omit";\n\n      case "use-credentials":\n        return "include";\n\n      default:\n        return "same-origin";\n    }\n  };\n\n  var msghandler = function msghandler(L) {\n    var ar = new lua_Debug();\n    if (lua_getstack(L, 2, ar)) lua_getinfo(L, Object(fengari__WEBPACK_IMPORTED_MODULE_0__["to_luastring"])("Sl"), ar);\n    push(L, new ErrorEvent("error", {\n      bubbles: true,\n      cancelable: true,\n      message: lua_tojsstring(L, 1),\n      error: tojs(L, 1),\n      filename: ar.short_src ? Object(fengari__WEBPACK_IMPORTED_MODULE_0__["to_jsstring"])(ar.short_src) : void 0,\n      lineno: ar.currentline > 0 ? ar.currentline : void 0\n    }));\n    return 1;\n  };\n\n  var run_lua_script = function run_lua_script(tag, code, chunkname) {\n    var ok = luaL_loadbuffer(L, code, null, chunkname);\n    var e;\n\n    if (ok === LUA_ERRSYNTAX) {\n      var msg = lua_tojsstring(L, -1);\n      var filename = tag.src ? tag.src : document.location;\n      var lineno = void 0;\n      /* TODO: extract out of msg */\n\n      var syntaxerror = new SyntaxError(msg, filename, lineno);\n      e = new ErrorEvent("error", {\n        message: msg,\n        error: syntaxerror,\n        filename: filename,\n        lineno: lineno\n      });\n    } else if (ok === LUA_OK) {\n      /* insert message handler below function */\n      var base = lua_gettop(L);\n      lua_pushcfunction(L, msghandler);\n      lua_insert(L, base);\n      /* set document.currentScript.\n         We can\'t set it normally; but we can create a getter for it, then remove the getter */\n\n      Object.defineProperty(document, \'currentScript\', {\n        value: tag,\n        configurable: true\n      });\n      ok = lua_pcall(L, 0, 0, base);\n      /* Remove the currentScript getter installed above; this restores normal behaviour */\n\n      delete document.currentScript;\n      /* Remove message handler */\n\n      lua_remove(L, base);\n      /* Check if normal error that msghandler would have handled */\n\n      if (ok === LUA_ERRRUN) {\n        e = checkjs(L, -1);\n      }\n    }\n\n    if (ok !== LUA_OK) {\n      if (e === void 0) {\n        e = new ErrorEvent("error", {\n          message: lua_tojsstring(L, -1),\n          error: tojs(L, -1)\n        });\n      }\n\n      lua_pop(L, 1);\n\n      if (window.dispatchEvent(e)) {\n        console.error("uncaught exception", e.error);\n      }\n    }\n  };\n\n  var process_xhr_response = function process_xhr_response(xhr, tag, chunkname) {\n    if (xhr.status >= 200 && xhr.status < 300) {\n      var code = xhr.response;\n\n      if (typeof code === "string") {\n        code = Object(fengari__WEBPACK_IMPORTED_MODULE_0__["to_luastring"])(xhr.response);\n      } else {\n        /* is an array buffer */\n        code = new Uint8Array(code);\n      }\n      /* TODO: subresource integrity check? */\n\n\n      run_lua_script(tag, code, chunkname);\n    } else {\n      tag.dispatchEvent(new Event("error"));\n    }\n  };\n\n  var run_lua_script_tag = function run_lua_script_tag(tag) {\n    if (tag.src) {\n      var chunkname = Object(fengari__WEBPACK_IMPORTED_MODULE_0__["to_luastring"])("@" + tag.src);\n      /* JS script tags are async after document has loaded */\n\n      if (document.readyState === "complete" || tag.async) {\n        if (typeof fetch === "function") {\n          fetch(tag.src, {\n            method: "GET",\n            credentials: crossorigin_to_credentials(tag.crossorigin),\n            redirect: "follow",\n            integrity: tag.integrity\n          }).then(function (resp) {\n            if (resp.ok) {\n              return resp.arrayBuffer();\n            } else {\n              throw new Error("unable to fetch");\n            }\n          }).then(function (buffer) {\n            var code = new Uint8Array(buffer);\n            run_lua_script(tag, code, chunkname);\n          }).catch(function (reason) {\n            tag.dispatchEvent(new Event("error"));\n          });\n        } else {\n          var xhr = new XMLHttpRequest();\n          xhr.open("GET", tag.src, true);\n          xhr.responseType = "arraybuffer";\n\n          xhr.onreadystatechange = function () {\n            if (xhr.readyState === 4) process_xhr_response(xhr, tag, chunkname);\n          };\n\n          xhr.send();\n        }\n      } else {\n        /* Needs to be synchronous: use an XHR */\n        var _xhr = new XMLHttpRequest();\n\n        _xhr.open("GET", tag.src, false);\n\n        _xhr.send();\n\n        process_xhr_response(_xhr, tag, chunkname);\n      }\n    } else {\n      var code = Object(fengari__WEBPACK_IMPORTED_MODULE_0__["to_luastring"])(tag.innerHTML);\n\n      var _chunkname = tag.id ? Object(fengari__WEBPACK_IMPORTED_MODULE_0__["to_luastring"])("=" + tag.id) : code;\n\n      run_lua_script(tag, code, _chunkname);\n    }\n  };\n\n  var contentTypeRegexp = /^(.*?\\/.*?)([\\t ]*;.*)?$/;\n  var luaVersionRegex = /^(\\d+)\\.(\\d+)$/;\n\n  var try_tag = function try_tag(tag) {\n    if (tag.tagName !== "SCRIPT") return;\n    /* strip off mime type parameters */\n\n    var contentTypeMatch = contentTypeRegexp.exec(tag.type);\n    if (!contentTypeMatch) return;\n    var mimetype = contentTypeMatch[1];\n    if (mimetype !== "application/lua" && mimetype !== "text/lua") return;\n\n    if (tag.hasAttribute("lua-version")) {\n      var lua_version = luaVersionRegex.exec(tag.getAttribute("lua-version"));\n      if (!lua_version || lua_version[1] !== LUA_VERSION_MAJOR || lua_version[2] !== LUA_VERSION_MINOR) return;\n    }\n\n    run_lua_script_tag(tag);\n  };\n\n  if (typeof MutationObserver !== \'undefined\') {\n    /* watch for new script tags added to document */\n    new MutationObserver(function (records, observer) {\n      for (var i = 0; i < records.length; i++) {\n        var record = records[i];\n\n        for (var j = 0; j < record.addedNodes.length; j++) {\n          try_tag(record.addedNodes[j]);\n        }\n      }\n    }).observe(document, {\n      childList: true,\n      subtree: true\n    });\n  } else if (console.warn) {\n    console.warn("fengari-web: MutationObserver not found; lua script tags will not be run when inserted");\n  }\n  /* the query selector here is slightly liberal,\n     more checks occur in try_tag */\n\n\n  var selector = \'script[type^="application/lua"], script[type^="text/lua"]\';\n  /* try to run existing script tags */\n\n  Array.prototype.forEach.call(document.querySelectorAll(selector), try_tag);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///34\n')},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _require = __webpack_require__(1),\n    LUA_MULTRET = _require.LUA_MULTRET,\n    LUA_OPADD = _require.LUA_OPADD,\n    LUA_OPBAND = _require.LUA_OPBAND,\n    LUA_OPBNOT = _require.LUA_OPBNOT,\n    LUA_OPBOR = _require.LUA_OPBOR,\n    LUA_OPBXOR = _require.LUA_OPBXOR,\n    LUA_OPDIV = _require.LUA_OPDIV,\n    LUA_OPIDIV = _require.LUA_OPIDIV,\n    LUA_OPMOD = _require.LUA_OPMOD,\n    LUA_OPSHL = _require.LUA_OPSHL,\n    LUA_OPSHR = _require.LUA_OPSHR,\n    LUA_OPUNM = _require.LUA_OPUNM,\n    _require$constant_typ = _require.constant_types,\n    LUA_TBOOLEAN = _require$constant_typ.LUA_TBOOLEAN,\n    LUA_TLIGHTUSERDATA = _require$constant_typ.LUA_TLIGHTUSERDATA,\n    LUA_TLNGSTR = _require$constant_typ.LUA_TLNGSTR,\n    LUA_TNIL = _require$constant_typ.LUA_TNIL,\n    LUA_TNUMFLT = _require$constant_typ.LUA_TNUMFLT,\n    LUA_TNUMINT = _require$constant_typ.LUA_TNUMINT,\n    LUA_TTABLE = _require$constant_typ.LUA_TTABLE,\n    to_luastring = _require.to_luastring;\n\nvar _require2 = __webpack_require__(4),\n    lua_assert = _require2.lua_assert;\n\nvar llex = __webpack_require__(21);\n\nvar lobject = __webpack_require__(6);\n\nvar lopcodes = __webpack_require__(16);\n\nvar lparser = __webpack_require__(23);\n\nvar ltable = __webpack_require__(9);\n\nvar lvm = __webpack_require__(15);\n\nvar OpCodesI = lopcodes.OpCodesI;\nvar TValue = lobject.TValue;\n/* Maximum number of registers in a Lua function (must fit in 8 bits) */\n\nvar MAXREGS = 255;\n/*\n** Marks the end of a patch list. It is an invalid value both as an absolute\n** address, and as a list link (would link an element to itself).\n*/\n\nvar NO_JUMP = -1;\nvar BinOpr = {\n  OPR_ADD: 0,\n  OPR_SUB: 1,\n  OPR_MUL: 2,\n  OPR_MOD: 3,\n  OPR_POW: 4,\n  OPR_DIV: 5,\n  OPR_IDIV: 6,\n  OPR_BAND: 7,\n  OPR_BOR: 8,\n  OPR_BXOR: 9,\n  OPR_SHL: 10,\n  OPR_SHR: 11,\n  OPR_CONCAT: 12,\n  OPR_EQ: 13,\n  OPR_LT: 14,\n  OPR_LE: 15,\n  OPR_NE: 16,\n  OPR_GT: 17,\n  OPR_GE: 18,\n  OPR_AND: 19,\n  OPR_OR: 20,\n  OPR_NOBINOPR: 21\n};\nvar UnOpr = {\n  OPR_MINUS: 0,\n  OPR_BNOT: 1,\n  OPR_NOT: 2,\n  OPR_LEN: 3,\n  OPR_NOUNOPR: 4\n};\n\nvar hasjumps = function hasjumps(e) {\n  return e.t !== e.f;\n};\n/*\n** If expression is a numeric constant returns either true or a new TValue\n** (depending on 'make_tvalue'). Otherwise, returns false.\n*/\n\n\nvar tonumeral = function tonumeral(e, make_tvalue) {\n  var ek = lparser.expkind;\n  if (hasjumps(e)) return false;\n  /* not a numeral */\n\n  switch (e.k) {\n    case ek.VKINT:\n      if (make_tvalue) {\n        return new TValue(LUA_TNUMINT, e.u.ival);\n      }\n\n      return true;\n\n    case ek.VKFLT:\n      if (make_tvalue) {\n        return new TValue(LUA_TNUMFLT, e.u.nval);\n      }\n\n      return true;\n\n    default:\n      return false;\n  }\n};\n/*\n** Create a OP_LOADNIL instruction, but try to optimize: if the previous\n** instruction is also OP_LOADNIL and ranges are compatible, adjust\n** range of previous instruction instead of emitting a new one. (For\n** instance, 'local a; local b' will generate a single opcode.)\n*/\n\n\nvar luaK_nil = function luaK_nil(fs, from, n) {\n  var previous;\n  var l = from + n - 1;\n  /* last register to set nil */\n\n  if (fs.pc > fs.lasttarget) {\n    /* no jumps to current position? */\n    previous = fs.f.code[fs.pc - 1];\n\n    if (previous.opcode === OpCodesI.OP_LOADNIL) {\n      /* previous is LOADNIL? */\n      var pfrom = previous.A;\n      /* get previous range */\n\n      var pl = pfrom + previous.B;\n\n      if (pfrom <= from && from <= pl + 1 || from <= pfrom && pfrom <= l + 1) {\n        /* can connect both? */\n        if (pfrom < from) from = pfrom;\n        /* from = min(from, pfrom) */\n\n        if (pl > l) l = pl;\n        /* l = max(l, pl) */\n\n        lopcodes.SETARG_A(previous, from);\n        lopcodes.SETARG_B(previous, l - from);\n        return;\n      }\n    }\n    /* else go through */\n\n  }\n\n  luaK_codeABC(fs, OpCodesI.OP_LOADNIL, from, n - 1, 0);\n  /* else no optimization */\n};\n\nvar getinstruction = function getinstruction(fs, e) {\n  return fs.f.code[e.u.info];\n};\n/*\n** Gets the destination address of a jump instruction. Used to traverse\n** a list of jumps.\n*/\n\n\nvar getjump = function getjump(fs, pc) {\n  var offset = fs.f.code[pc].sBx;\n  if (offset === NO_JUMP)\n    /* point to itself represents end of list */\n    return NO_JUMP;\n    /* end of list */\n  else return pc + 1 + offset;\n  /* turn offset into absolute position */\n};\n/*\n** Fix jump instruction at position 'pc' to jump to 'dest'.\n** (Jump addresses are relative in Lua)\n*/\n\n\nvar fixjump = function fixjump(fs, pc, dest) {\n  var jmp = fs.f.code[pc];\n  var offset = dest - (pc + 1);\n  lua_assert(dest !== NO_JUMP);\n  if (Math.abs(offset) > lopcodes.MAXARG_sBx) llex.luaX_syntaxerror(fs.ls, to_luastring(\"control structure too long\", true));\n  lopcodes.SETARG_sBx(jmp, offset);\n};\n/*\n** Concatenate jump-list 'l2' into jump-list 'l1'\n*/\n\n\nvar luaK_concat = function luaK_concat(fs, l1, l2) {\n  if (l2 === NO_JUMP) return l1;\n  /* nothing to concatenate? */\n  else if (l1 === NO_JUMP)\n      /* no original list? */\n      l1 = l2;else {\n      var list = l1;\n      var next = getjump(fs, list);\n\n      while (next !== NO_JUMP) {\n        /* find last element */\n        list = next;\n        next = getjump(fs, list);\n      }\n\n      fixjump(fs, list, l2);\n    }\n  return l1;\n};\n/*\n** Create a jump instruction and return its position, so its destination\n** can be fixed later (with 'fixjump'). If there are jumps to\n** this position (kept in 'jpc'), link them all together so that\n** 'patchlistaux' will fix all them directly to the final destination.\n*/\n\n\nvar luaK_jump = function luaK_jump(fs) {\n  var jpc = fs.jpc;\n  /* save list of jumps to here */\n\n  fs.jpc = NO_JUMP;\n  /* no more jumps to here */\n\n  var j = luaK_codeAsBx(fs, OpCodesI.OP_JMP, 0, NO_JUMP);\n  j = luaK_concat(fs, j, jpc);\n  /* keep them on hold */\n\n  return j;\n};\n\nvar luaK_jumpto = function luaK_jumpto(fs, t) {\n  return luaK_patchlist(fs, luaK_jump(fs), t);\n};\n/*\n** Code a 'return' instruction\n*/\n\n\nvar luaK_ret = function luaK_ret(fs, first, nret) {\n  luaK_codeABC(fs, OpCodesI.OP_RETURN, first, nret + 1, 0);\n};\n/*\n** Code a \"conditional jump\", that is, a test or comparison opcode\n** followed by a jump. Return jump position.\n*/\n\n\nvar condjump = function condjump(fs, op, A, B, C) {\n  luaK_codeABC(fs, op, A, B, C);\n  return luaK_jump(fs);\n};\n/*\n** returns current 'pc' and marks it as a jump target (to avoid wrong\n** optimizations with consecutive instructions not in the same basic block).\n*/\n\n\nvar luaK_getlabel = function luaK_getlabel(fs) {\n  fs.lasttarget = fs.pc;\n  return fs.pc;\n};\n/*\n** Returns the position of the instruction \"controlling\" a given\n** jump (that is, its condition), or the jump itself if it is\n** unconditional.\n*/\n\n\nvar getjumpcontroloffset = function getjumpcontroloffset(fs, pc) {\n  if (pc >= 1 && lopcodes.testTMode(fs.f.code[pc - 1].opcode)) return pc - 1;else return pc;\n};\n\nvar getjumpcontrol = function getjumpcontrol(fs, pc) {\n  return fs.f.code[getjumpcontroloffset(fs, pc)];\n};\n/*\n** Patch destination register for a TESTSET instruction.\n** If instruction in position 'node' is not a TESTSET, return 0 (\"fails\").\n** Otherwise, if 'reg' is not 'NO_REG', set it as the destination\n** register. Otherwise, change instruction to a simple 'TEST' (produces\n** no register value)\n*/\n\n\nvar patchtestreg = function patchtestreg(fs, node, reg) {\n  var pc = getjumpcontroloffset(fs, node);\n  var i = fs.f.code[pc];\n  if (i.opcode !== OpCodesI.OP_TESTSET) return false;\n  /* cannot patch other instructions */\n\n  if (reg !== lopcodes.NO_REG && reg !== i.B) lopcodes.SETARG_A(i, reg);else {\n    /* no register to put value or register already has the value;\n       change instruction to simple test */\n    fs.f.code[pc] = lopcodes.CREATE_ABC(OpCodesI.OP_TEST, i.B, 0, i.C);\n  }\n  return true;\n};\n/*\n** Traverse a list of tests ensuring no one produces a value\n*/\n\n\nvar removevalues = function removevalues(fs, list) {\n  for (; list !== NO_JUMP; list = getjump(fs, list)) {\n    patchtestreg(fs, list, lopcodes.NO_REG);\n  }\n};\n/*\n** Traverse a list of tests, patching their destination address and\n** registers: tests producing values jump to 'vtarget' (and put their\n** values in 'reg'), other tests jump to 'dtarget'.\n*/\n\n\nvar patchlistaux = function patchlistaux(fs, list, vtarget, reg, dtarget) {\n  while (list !== NO_JUMP) {\n    var next = getjump(fs, list);\n    if (patchtestreg(fs, list, reg)) fixjump(fs, list, vtarget);else fixjump(fs, list, dtarget);\n    /* jump to default target */\n\n    list = next;\n  }\n};\n/*\n** Ensure all pending jumps to current position are fixed (jumping\n** to current position with no values) and reset list of pending\n** jumps\n*/\n\n\nvar dischargejpc = function dischargejpc(fs) {\n  patchlistaux(fs, fs.jpc, fs.pc, lopcodes.NO_REG, fs.pc);\n  fs.jpc = NO_JUMP;\n};\n/*\n** Add elements in 'list' to list of pending jumps to \"here\"\n** (current position)\n*/\n\n\nvar luaK_patchtohere = function luaK_patchtohere(fs, list) {\n  luaK_getlabel(fs);\n  /* mark \"here\" as a jump target */\n\n  fs.jpc = luaK_concat(fs, fs.jpc, list);\n};\n/*\n** Path all jumps in 'list' to jump to 'target'.\n** (The assert means that we cannot fix a jump to a forward address\n** because we only know addresses once code is generated.)\n*/\n\n\nvar luaK_patchlist = function luaK_patchlist(fs, list, target) {\n  if (target === fs.pc)\n    /* 'target' is current position? */\n    luaK_patchtohere(fs, list);\n    /* add list to pending jumps */\n  else {\n      lua_assert(target < fs.pc);\n      patchlistaux(fs, list, target, lopcodes.NO_REG, target);\n    }\n};\n/*\n** Path all jumps in 'list' to close upvalues up to given 'level'\n** (The assertion checks that jumps either were closing nothing\n** or were closing higher levels, from inner blocks.)\n*/\n\n\nvar luaK_patchclose = function luaK_patchclose(fs, list, level) {\n  level++;\n  /* argument is +1 to reserve 0 as non-op */\n\n  for (; list !== NO_JUMP; list = getjump(fs, list)) {\n    var ins = fs.f.code[list];\n    lua_assert(ins.opcode === OpCodesI.OP_JMP && (ins.A === 0 || ins.A >= level));\n    lopcodes.SETARG_A(ins, level);\n  }\n};\n/*\n** Emit instruction 'i', checking for array sizes and saving also its\n** line information. Return 'i' position.\n*/\n\n\nvar luaK_code = function luaK_code(fs, i) {\n  var f = fs.f;\n  dischargejpc(fs);\n  /* 'pc' will change */\n\n  /* put new instruction in code array */\n\n  f.code[fs.pc] = i;\n  f.lineinfo[fs.pc] = fs.ls.lastline;\n  return fs.pc++;\n};\n/*\n** Format and emit an 'iABC' instruction. (Assertions check consistency\n** of parameters versus opcode.)\n*/\n\n\nvar luaK_codeABC = function luaK_codeABC(fs, o, a, b, c) {\n  lua_assert(lopcodes.getOpMode(o) === lopcodes.iABC);\n  lua_assert(lopcodes.getBMode(o) !== lopcodes.OpArgN || b === 0);\n  lua_assert(lopcodes.getCMode(o) !== lopcodes.OpArgN || c === 0);\n  lua_assert(a <= lopcodes.MAXARG_A && b <= lopcodes.MAXARG_B && c <= lopcodes.MAXARG_C);\n  return luaK_code(fs, lopcodes.CREATE_ABC(o, a, b, c));\n};\n/*\n** Format and emit an 'iABx' instruction.\n*/\n\n\nvar luaK_codeABx = function luaK_codeABx(fs, o, a, bc) {\n  lua_assert(lopcodes.getOpMode(o) === lopcodes.iABx || lopcodes.getOpMode(o) === lopcodes.iAsBx);\n  lua_assert(lopcodes.getCMode(o) === lopcodes.OpArgN);\n  lua_assert(a <= lopcodes.MAXARG_A && bc <= lopcodes.MAXARG_Bx);\n  return luaK_code(fs, lopcodes.CREATE_ABx(o, a, bc));\n};\n\nvar luaK_codeAsBx = function luaK_codeAsBx(fs, o, A, sBx) {\n  return luaK_codeABx(fs, o, A, sBx + lopcodes.MAXARG_sBx);\n};\n/*\n** Emit an \"extra argument\" instruction (format 'iAx')\n*/\n\n\nvar codeextraarg = function codeextraarg(fs, a) {\n  lua_assert(a <= lopcodes.MAXARG_Ax);\n  return luaK_code(fs, lopcodes.CREATE_Ax(OpCodesI.OP_EXTRAARG, a));\n};\n/*\n** Emit a \"load constant\" instruction, using either 'OP_LOADK'\n** (if constant index 'k' fits in 18 bits) or an 'OP_LOADKX'\n** instruction with \"extra argument\".\n*/\n\n\nvar luaK_codek = function luaK_codek(fs, reg, k) {\n  if (k <= lopcodes.MAXARG_Bx) return luaK_codeABx(fs, OpCodesI.OP_LOADK, reg, k);else {\n    var p = luaK_codeABx(fs, OpCodesI.OP_LOADKX, reg, 0);\n    codeextraarg(fs, k);\n    return p;\n  }\n};\n/*\n** Check register-stack level, keeping track of its maximum size\n** in field 'maxstacksize'\n*/\n\n\nvar luaK_checkstack = function luaK_checkstack(fs, n) {\n  var newstack = fs.freereg + n;\n\n  if (newstack > fs.f.maxstacksize) {\n    if (newstack >= MAXREGS) llex.luaX_syntaxerror(fs.ls, to_luastring(\"function or expression needs too many registers\", true));\n    fs.f.maxstacksize = newstack;\n  }\n};\n/*\n** Reserve 'n' registers in register stack\n*/\n\n\nvar luaK_reserveregs = function luaK_reserveregs(fs, n) {\n  luaK_checkstack(fs, n);\n  fs.freereg += n;\n};\n/*\n** Free register 'reg', if it is neither a constant index nor\n** a local variable.\n*/\n\n\nvar freereg = function freereg(fs, reg) {\n  if (!lopcodes.ISK(reg) && reg >= fs.nactvar) {\n    fs.freereg--;\n    lua_assert(reg === fs.freereg);\n  }\n};\n/*\n** Free register used by expression 'e' (if any)\n*/\n\n\nvar freeexp = function freeexp(fs, e) {\n  if (e.k === lparser.expkind.VNONRELOC) freereg(fs, e.u.info);\n};\n/*\n** Free registers used by expressions 'e1' and 'e2' (if any) in proper\n** order.\n*/\n\n\nvar freeexps = function freeexps(fs, e1, e2) {\n  var r1 = e1.k === lparser.expkind.VNONRELOC ? e1.u.info : -1;\n  var r2 = e2.k === lparser.expkind.VNONRELOC ? e2.u.info : -1;\n\n  if (r1 > r2) {\n    freereg(fs, r1);\n    freereg(fs, r2);\n  } else {\n    freereg(fs, r2);\n    freereg(fs, r1);\n  }\n};\n/*\n** Add constant 'v' to prototype's list of constants (field 'k').\n** Use scanner's table to cache position of constants in constant list\n** and try to reuse constants. Because some values should not be used\n** as keys (nil cannot be a key, integer keys can collapse with float\n** keys), the caller must provide a useful 'key' for indexing the cache.\n*/\n\n\nvar addk = function addk(fs, key, v) {\n  var f = fs.f;\n  var idx = ltable.luaH_get(fs.L, fs.ls.h, key);\n  /* index scanner table */\n\n  if (idx.ttisinteger()) {\n    /* is there an index there? */\n    var _k = idx.value;\n    /* correct value? (warning: must distinguish floats from integers!) */\n\n    if (_k < fs.nk && f.k[_k].ttype() === v.ttype() && f.k[_k].value === v.value) return _k;\n    /* reuse index */\n  }\n  /* constant not found; create a new entry */\n\n\n  var k = fs.nk;\n  ltable.luaH_setfrom(fs.L, fs.ls.h, key, new lobject.TValue(LUA_TNUMINT, k));\n  f.k[k] = v;\n  fs.nk++;\n  return k;\n};\n/*\n** Add a string to list of constants and return its index.\n*/\n\n\nvar luaK_stringK = function luaK_stringK(fs, s) {\n  var o = new TValue(LUA_TLNGSTR, s);\n  return addk(fs, o, o);\n  /* use string itself as key */\n};\n/*\n** Add an integer to list of constants and return its index.\n** Integers use userdata as keys to avoid collision with floats with\n** same value.\n*/\n\n\nvar luaK_intK = function luaK_intK(fs, n) {\n  var k = new TValue(LUA_TLIGHTUSERDATA, n);\n  var o = new TValue(LUA_TNUMINT, n);\n  return addk(fs, k, o);\n};\n/*\n** Add a float to list of constants and return its index.\n*/\n\n\nvar luaK_numberK = function luaK_numberK(fs, r) {\n  var o = new TValue(LUA_TNUMFLT, r);\n  return addk(fs, o, o);\n  /* use number itself as key */\n};\n/*\n** Add a boolean to list of constants and return its index.\n*/\n\n\nvar boolK = function boolK(fs, b) {\n  var o = new TValue(LUA_TBOOLEAN, b);\n  return addk(fs, o, o);\n  /* use boolean itself as key */\n};\n/*\n** Add nil to list of constants and return its index.\n*/\n\n\nvar nilK = function nilK(fs) {\n  var v = new TValue(LUA_TNIL, null);\n  var k = new TValue(LUA_TTABLE, fs.ls.h);\n  /* cannot use nil as key; instead use table itself to represent nil */\n\n  return addk(fs, k, v);\n};\n/*\n** Fix an expression to return the number of results 'nresults'.\n** Either 'e' is a multi-ret expression (function call or vararg)\n** or 'nresults' is LUA_MULTRET (as any expression can satisfy that).\n*/\n\n\nvar luaK_setreturns = function luaK_setreturns(fs, e, nresults) {\n  var ek = lparser.expkind;\n\n  if (e.k === ek.VCALL) {\n    /* expression is an open function call? */\n    lopcodes.SETARG_C(getinstruction(fs, e), nresults + 1);\n  } else if (e.k === ek.VVARARG) {\n    var pc = getinstruction(fs, e);\n    lopcodes.SETARG_B(pc, nresults + 1);\n    lopcodes.SETARG_A(pc, fs.freereg);\n    luaK_reserveregs(fs, 1);\n  } else lua_assert(nresults === LUA_MULTRET);\n};\n\nvar luaK_setmultret = function luaK_setmultret(fs, e) {\n  luaK_setreturns(fs, e, LUA_MULTRET);\n};\n/*\n** Fix an expression to return one result.\n** If expression is not a multi-ret expression (function call or\n** vararg), it already returns one result, so nothing needs to be done.\n** Function calls become VNONRELOC expressions (as its result comes\n** fixed in the base register of the call), while vararg expressions\n** become VRELOCABLE (as OP_VARARG puts its results where it wants).\n** (Calls are created returning one result, so that does not need\n** to be fixed.)\n*/\n\n\nvar luaK_setoneret = function luaK_setoneret(fs, e) {\n  var ek = lparser.expkind;\n\n  if (e.k === ek.VCALL) {\n    /* expression is an open function call? */\n\n    /* already returns 1 value */\n    lua_assert(getinstruction(fs, e).C === 2);\n    e.k = ek.VNONRELOC;\n    /* result has fixed position */\n\n    e.u.info = getinstruction(fs, e).A;\n  } else if (e.k === ek.VVARARG) {\n    lopcodes.SETARG_B(getinstruction(fs, e), 2);\n    e.k = ek.VRELOCABLE;\n    /* can relocate its simple result */\n  }\n};\n/*\n** Ensure that expression 'e' is not a variable.\n*/\n\n\nvar luaK_dischargevars = function luaK_dischargevars(fs, e) {\n  var ek = lparser.expkind;\n\n  switch (e.k) {\n    case ek.VLOCAL:\n      {\n        /* already in a register */\n        e.k = ek.VNONRELOC;\n        /* becomes a non-relocatable value */\n\n        break;\n      }\n\n    case ek.VUPVAL:\n      {\n        /* move value to some (pending) register */\n        e.u.info = luaK_codeABC(fs, OpCodesI.OP_GETUPVAL, 0, e.u.info, 0);\n        e.k = ek.VRELOCABLE;\n        break;\n      }\n\n    case ek.VINDEXED:\n      {\n        var op;\n        freereg(fs, e.u.ind.idx);\n\n        if (e.u.ind.vt === ek.VLOCAL) {\n          /* is 't' in a register? */\n          freereg(fs, e.u.ind.t);\n          op = OpCodesI.OP_GETTABLE;\n        } else {\n          lua_assert(e.u.ind.vt === ek.VUPVAL);\n          op = OpCodesI.OP_GETTABUP;\n          /* 't' is in an upvalue */\n        }\n\n        e.u.info = luaK_codeABC(fs, op, 0, e.u.ind.t, e.u.ind.idx);\n        e.k = ek.VRELOCABLE;\n        break;\n      }\n\n    case ek.VVARARG:\n    case ek.VCALL:\n      {\n        luaK_setoneret(fs, e);\n        break;\n      }\n\n    default:\n      break;\n\n    /* there is one value available (somewhere) */\n  }\n};\n\nvar code_loadbool = function code_loadbool(fs, A, b, jump) {\n  luaK_getlabel(fs);\n  /* those instructions may be jump targets */\n\n  return luaK_codeABC(fs, OpCodesI.OP_LOADBOOL, A, b, jump);\n};\n/*\n** Ensures expression value is in register 'reg' (and therefore\n** 'e' will become a non-relocatable expression).\n*/\n\n\nvar discharge2reg = function discharge2reg(fs, e, reg) {\n  var ek = lparser.expkind;\n  luaK_dischargevars(fs, e);\n\n  switch (e.k) {\n    case ek.VNIL:\n      {\n        luaK_nil(fs, reg, 1);\n        break;\n      }\n\n    case ek.VFALSE:\n    case ek.VTRUE:\n      {\n        luaK_codeABC(fs, OpCodesI.OP_LOADBOOL, reg, e.k === ek.VTRUE, 0);\n        break;\n      }\n\n    case ek.VK:\n      {\n        luaK_codek(fs, reg, e.u.info);\n        break;\n      }\n\n    case ek.VKFLT:\n      {\n        luaK_codek(fs, reg, luaK_numberK(fs, e.u.nval));\n        break;\n      }\n\n    case ek.VKINT:\n      {\n        luaK_codek(fs, reg, luaK_intK(fs, e.u.ival));\n        break;\n      }\n\n    case ek.VRELOCABLE:\n      {\n        var pc = getinstruction(fs, e);\n        lopcodes.SETARG_A(pc, reg);\n        /* instruction will put result in 'reg' */\n\n        break;\n      }\n\n    case ek.VNONRELOC:\n      {\n        if (reg !== e.u.info) luaK_codeABC(fs, OpCodesI.OP_MOVE, reg, e.u.info, 0);\n        break;\n      }\n\n    default:\n      {\n        lua_assert(e.k === ek.VJMP);\n        return;\n        /* nothing to do... */\n      }\n  }\n\n  e.u.info = reg;\n  e.k = ek.VNONRELOC;\n};\n/*\n** Ensures expression value is in any register.\n*/\n\n\nvar discharge2anyreg = function discharge2anyreg(fs, e) {\n  if (e.k !== lparser.expkind.VNONRELOC) {\n    /* no fixed register yet? */\n    luaK_reserveregs(fs, 1);\n    /* get a register */\n\n    discharge2reg(fs, e, fs.freereg - 1);\n    /* put value there */\n  }\n};\n/*\n** check whether list has any jump that do not produce a value\n** or produce an inverted value\n*/\n\n\nvar need_value = function need_value(fs, list) {\n  for (; list !== NO_JUMP; list = getjump(fs, list)) {\n    var i = getjumpcontrol(fs, list);\n    if (i.opcode !== OpCodesI.OP_TESTSET) return true;\n  }\n\n  return false;\n  /* not found */\n};\n/*\n** Ensures final expression result (including results from its jump\n** lists) is in register 'reg'.\n** If expression has jumps, need to patch these jumps either to\n** its final position or to \"load\" instructions (for those tests\n** that do not produce values).\n*/\n\n\nvar exp2reg = function exp2reg(fs, e, reg) {\n  var ek = lparser.expkind;\n  discharge2reg(fs, e, reg);\n  if (e.k === ek.VJMP)\n    /* expression itself is a test? */\n    e.t = luaK_concat(fs, e.t, e.u.info);\n  /* put this jump in 't' list */\n\n  if (hasjumps(e)) {\n    var final;\n    /* position after whole expression */\n\n    var p_f = NO_JUMP;\n    /* position of an eventual LOAD false */\n\n    var p_t = NO_JUMP;\n    /* position of an eventual LOAD true */\n\n    if (need_value(fs, e.t) || need_value(fs, e.f)) {\n      var fj = e.k === ek.VJMP ? NO_JUMP : luaK_jump(fs);\n      p_f = code_loadbool(fs, reg, 0, 1);\n      p_t = code_loadbool(fs, reg, 1, 0);\n      luaK_patchtohere(fs, fj);\n    }\n\n    final = luaK_getlabel(fs);\n    patchlistaux(fs, e.f, final, reg, p_f);\n    patchlistaux(fs, e.t, final, reg, p_t);\n  }\n\n  e.f = e.t = NO_JUMP;\n  e.u.info = reg;\n  e.k = ek.VNONRELOC;\n};\n/*\n** Ensures final expression result (including results from its jump\n** lists) is in next available register.\n*/\n\n\nvar luaK_exp2nextreg = function luaK_exp2nextreg(fs, e) {\n  luaK_dischargevars(fs, e);\n  freeexp(fs, e);\n  luaK_reserveregs(fs, 1);\n  exp2reg(fs, e, fs.freereg - 1);\n};\n/*\n** Ensures final expression result (including results from its jump\n** lists) is in some (any) register and return that register.\n*/\n\n\nvar luaK_exp2anyreg = function luaK_exp2anyreg(fs, e) {\n  luaK_dischargevars(fs, e);\n\n  if (e.k === lparser.expkind.VNONRELOC) {\n    /* expression already has a register? */\n    if (!hasjumps(e))\n      /* no jumps? */\n      return e.u.info;\n    /* result is already in a register */\n\n    if (e.u.info >= fs.nactvar) {\n      /* reg. is not a local? */\n      exp2reg(fs, e, e.u.info);\n      /* put final result in it */\n\n      return e.u.info;\n    }\n  }\n\n  luaK_exp2nextreg(fs, e);\n  /* otherwise, use next available register */\n\n  return e.u.info;\n};\n/*\n** Ensures final expression result is either in a register or in an\n** upvalue.\n*/\n\n\nvar luaK_exp2anyregup = function luaK_exp2anyregup(fs, e) {\n  if (e.k !== lparser.expkind.VUPVAL || hasjumps(e)) luaK_exp2anyreg(fs, e);\n};\n/*\n** Ensures final expression result is either in a register or it is\n** a constant.\n*/\n\n\nvar luaK_exp2val = function luaK_exp2val(fs, e) {\n  if (hasjumps(e)) luaK_exp2anyreg(fs, e);else luaK_dischargevars(fs, e);\n};\n/*\n** Ensures final expression result is in a valid R/K index\n** (that is, it is either in a register or in 'k' with an index\n** in the range of R/K indices).\n** Returns R/K index.\n*/\n\n\nvar luaK_exp2RK = function luaK_exp2RK(fs, e) {\n  var ek = lparser.expkind;\n  var vk = false;\n  luaK_exp2val(fs, e);\n\n  switch (e.k) {\n    /* move constants to 'k' */\n    case ek.VTRUE:\n      e.u.info = boolK(fs, true);\n      vk = true;\n      break;\n\n    case ek.VFALSE:\n      e.u.info = boolK(fs, false);\n      vk = true;\n      break;\n\n    case ek.VNIL:\n      e.u.info = nilK(fs);\n      vk = true;\n      break;\n\n    case ek.VKINT:\n      e.u.info = luaK_intK(fs, e.u.ival);\n      vk = true;\n      break;\n\n    case ek.VKFLT:\n      e.u.info = luaK_numberK(fs, e.u.nval);\n      vk = true;\n      break;\n\n    case ek.VK:\n      vk = true;\n      break;\n\n    default:\n      break;\n  }\n\n  if (vk) {\n    e.k = ek.VK;\n    if (e.u.info <= lopcodes.MAXINDEXRK)\n      /* constant fits in 'argC'? */\n      return lopcodes.RKASK(e.u.info);\n  }\n  /* not a constant in the right range: put it in a register */\n\n\n  return luaK_exp2anyreg(fs, e);\n};\n/*\n** Generate code to store result of expression 'ex' into variable 'var'.\n*/\n\n\nvar luaK_storevar = function luaK_storevar(fs, vr, ex) {\n  var ek = lparser.expkind;\n\n  switch (vr.k) {\n    case ek.VLOCAL:\n      {\n        freeexp(fs, ex);\n        exp2reg(fs, ex, vr.u.info);\n        /* compute 'ex' into proper place */\n\n        return;\n      }\n\n    case ek.VUPVAL:\n      {\n        var e = luaK_exp2anyreg(fs, ex);\n        luaK_codeABC(fs, OpCodesI.OP_SETUPVAL, e, vr.u.info, 0);\n        break;\n      }\n\n    case ek.VINDEXED:\n      {\n        var op = vr.u.ind.vt === ek.VLOCAL ? OpCodesI.OP_SETTABLE : OpCodesI.OP_SETTABUP;\n\n        var _e = luaK_exp2RK(fs, ex);\n\n        luaK_codeABC(fs, op, vr.u.ind.t, vr.u.ind.idx, _e);\n        break;\n      }\n  }\n\n  freeexp(fs, ex);\n};\n/*\n** Emit SELF instruction (convert expression 'e' into 'e:key(e,').\n*/\n\n\nvar luaK_self = function luaK_self(fs, e, key) {\n  luaK_exp2anyreg(fs, e);\n  var ereg = e.u.info;\n  /* register where 'e' was placed */\n\n  freeexp(fs, e);\n  e.u.info = fs.freereg;\n  /* base register for op_self */\n\n  e.k = lparser.expkind.VNONRELOC;\n  /* self expression has a fixed register */\n\n  luaK_reserveregs(fs, 2);\n  /* function and 'self' produced by op_self */\n\n  luaK_codeABC(fs, OpCodesI.OP_SELF, e.u.info, ereg, luaK_exp2RK(fs, key));\n  freeexp(fs, key);\n};\n/*\n** Negate condition 'e' (where 'e' is a comparison).\n*/\n\n\nvar negatecondition = function negatecondition(fs, e) {\n  var pc = getjumpcontrol(fs, e.u.info);\n  lua_assert(lopcodes.testTMode(pc.opcode) && pc.opcode !== OpCodesI.OP_TESTSET && pc.opcode !== OpCodesI.OP_TEST);\n  lopcodes.SETARG_A(pc, !pc.A);\n};\n/*\n** Emit instruction to jump if 'e' is 'cond' (that is, if 'cond'\n** is true, code will jump if 'e' is true.) Return jump position.\n** Optimize when 'e' is 'not' something, inverting the condition\n** and removing the 'not'.\n*/\n\n\nvar jumponcond = function jumponcond(fs, e, cond) {\n  if (e.k === lparser.expkind.VRELOCABLE) {\n    var ie = getinstruction(fs, e);\n\n    if (ie.opcode === OpCodesI.OP_NOT) {\n      fs.pc--;\n      /* remove previous OP_NOT */\n\n      return condjump(fs, OpCodesI.OP_TEST, ie.B, 0, !cond);\n    }\n    /* else go through */\n\n  }\n\n  discharge2anyreg(fs, e);\n  freeexp(fs, e);\n  return condjump(fs, OpCodesI.OP_TESTSET, lopcodes.NO_REG, e.u.info, cond);\n};\n/*\n** Emit code to go through if 'e' is true, jump otherwise.\n*/\n\n\nvar luaK_goiftrue = function luaK_goiftrue(fs, e) {\n  var ek = lparser.expkind;\n  var pc;\n  /* pc of new jump */\n\n  luaK_dischargevars(fs, e);\n\n  switch (e.k) {\n    case ek.VJMP:\n      {\n        /* condition? */\n        negatecondition(fs, e);\n        /* jump when it is false */\n\n        pc = e.u.info;\n        /* save jump position */\n\n        break;\n      }\n\n    case ek.VK:\n    case ek.VKFLT:\n    case ek.VKINT:\n    case ek.VTRUE:\n      {\n        pc = NO_JUMP;\n        /* always true; do nothing */\n\n        break;\n      }\n\n    default:\n      {\n        pc = jumponcond(fs, e, 0);\n        /* jump when false */\n\n        break;\n      }\n  }\n\n  e.f = luaK_concat(fs, e.f, pc);\n  /* insert new jump in false list */\n\n  luaK_patchtohere(fs, e.t);\n  /* true list jumps to here (to go through) */\n\n  e.t = NO_JUMP;\n};\n/*\n** Emit code to go through if 'e' is false, jump otherwise.\n*/\n\n\nvar luaK_goiffalse = function luaK_goiffalse(fs, e) {\n  var ek = lparser.expkind;\n  var pc;\n  /* pc of new jump */\n\n  luaK_dischargevars(fs, e);\n\n  switch (e.k) {\n    case ek.VJMP:\n      {\n        pc = e.u.info;\n        /* already jump if true */\n\n        break;\n      }\n\n    case ek.VNIL:\n    case ek.VFALSE:\n      {\n        pc = NO_JUMP;\n        /* always false; do nothing */\n\n        break;\n      }\n\n    default:\n      {\n        pc = jumponcond(fs, e, 1);\n        /* jump if true */\n\n        break;\n      }\n  }\n\n  e.t = luaK_concat(fs, e.t, pc);\n  /* insert new jump in 't' list */\n\n  luaK_patchtohere(fs, e.f);\n  /* false list jumps to here (to go through) */\n\n  e.f = NO_JUMP;\n};\n/*\n** Code 'not e', doing constant folding.\n*/\n\n\nvar codenot = function codenot(fs, e) {\n  var ek = lparser.expkind;\n  luaK_dischargevars(fs, e);\n\n  switch (e.k) {\n    case ek.VNIL:\n    case ek.VFALSE:\n      {\n        e.k = ek.VTRUE;\n        /* true === not nil === not false */\n\n        break;\n      }\n\n    case ek.VK:\n    case ek.VKFLT:\n    case ek.VKINT:\n    case ek.VTRUE:\n      {\n        e.k = ek.VFALSE;\n        /* false === not \"x\" === not 0.5 === not 1 === not true */\n\n        break;\n      }\n\n    case ek.VJMP:\n      {\n        negatecondition(fs, e);\n        break;\n      }\n\n    case ek.VRELOCABLE:\n    case ek.VNONRELOC:\n      {\n        discharge2anyreg(fs, e);\n        freeexp(fs, e);\n        e.u.info = luaK_codeABC(fs, OpCodesI.OP_NOT, 0, e.u.info, 0);\n        e.k = ek.VRELOCABLE;\n        break;\n      }\n  }\n  /* interchange true and false lists */\n\n\n  {\n    var temp = e.f;\n    e.f = e.t;\n    e.t = temp;\n  }\n  removevalues(fs, e.f);\n  /* values are useless when negated */\n\n  removevalues(fs, e.t);\n};\n/*\n** Create expression 't[k]'. 't' must have its final result already in a\n** register or upvalue.\n*/\n\n\nvar luaK_indexed = function luaK_indexed(fs, t, k) {\n  var ek = lparser.expkind;\n  lua_assert(!hasjumps(t) && (lparser.vkisinreg(t.k) || t.k === ek.VUPVAL));\n  t.u.ind.t = t.u.info;\n  /* register or upvalue index */\n\n  t.u.ind.idx = luaK_exp2RK(fs, k);\n  /* R/K index for key */\n\n  t.u.ind.vt = t.k === ek.VUPVAL ? ek.VUPVAL : ek.VLOCAL;\n  t.k = ek.VINDEXED;\n};\n/*\n** Return false if folding can raise an error.\n** Bitwise operations need operands convertible to integers; division\n** operations cannot have 0 as divisor.\n*/\n\n\nvar validop = function validop(op, v1, v2) {\n  switch (op) {\n    case LUA_OPBAND:\n    case LUA_OPBOR:\n    case LUA_OPBXOR:\n    case LUA_OPSHL:\n    case LUA_OPSHR:\n    case LUA_OPBNOT:\n      {\n        /* conversion errors */\n        return lvm.tointeger(v1) !== false && lvm.tointeger(v2) !== false;\n      }\n\n    case LUA_OPDIV:\n    case LUA_OPIDIV:\n    case LUA_OPMOD:\n      /* division by 0 */\n      return v2.value !== 0;\n\n    default:\n      return 1;\n\n    /* everything else is valid */\n  }\n};\n/*\n** Try to \"constant-fold\" an operation; return 1 iff successful.\n** (In this case, 'e1' has the final result.)\n*/\n\n\nvar constfolding = function constfolding(op, e1, e2) {\n  var ek = lparser.expkind;\n  var v1, v2;\n  if (!(v1 = tonumeral(e1, true)) || !(v2 = tonumeral(e2, true)) || !validop(op, v1, v2)) return 0;\n  /* non-numeric operands or not safe to fold */\n\n  var res = new TValue();\n  /* FIXME */\n\n  lobject.luaO_arith(null, op, v1, v2, res);\n  /* does operation */\n\n  if (res.ttisinteger()) {\n    e1.k = ek.VKINT;\n    e1.u.ival = res.value;\n  } else {\n    /* folds neither NaN nor 0.0 (to avoid problems with -0.0) */\n    var n = res.value;\n    if (isNaN(n) || n === 0) return false;\n    e1.k = ek.VKFLT;\n    e1.u.nval = n;\n  }\n\n  return true;\n};\n/*\n** Emit code for unary expressions that \"produce values\"\n** (everything but 'not').\n** Expression to produce final result will be encoded in 'e'.\n*/\n\n\nvar codeunexpval = function codeunexpval(fs, op, e, line) {\n  var r = luaK_exp2anyreg(fs, e);\n  /* opcodes operate only on registers */\n\n  freeexp(fs, e);\n  e.u.info = luaK_codeABC(fs, op, 0, r, 0);\n  /* generate opcode */\n\n  e.k = lparser.expkind.VRELOCABLE;\n  /* all those operations are relocatable */\n\n  luaK_fixline(fs, line);\n};\n/*\n** Emit code for binary expressions that \"produce values\"\n** (everything but logical operators 'and'/'or' and comparison\n** operators).\n** Expression to produce final result will be encoded in 'e1'.\n** Because 'luaK_exp2RK' can free registers, its calls must be\n** in \"stack order\" (that is, first on 'e2', which may have more\n** recent registers to be released).\n*/\n\n\nvar codebinexpval = function codebinexpval(fs, op, e1, e2, line) {\n  var rk2 = luaK_exp2RK(fs, e2);\n  /* both operands are \"RK\" */\n\n  var rk1 = luaK_exp2RK(fs, e1);\n  freeexps(fs, e1, e2);\n  e1.u.info = luaK_codeABC(fs, op, 0, rk1, rk2);\n  /* generate opcode */\n\n  e1.k = lparser.expkind.VRELOCABLE;\n  /* all those operations are relocatable */\n\n  luaK_fixline(fs, line);\n};\n/*\n** Emit code for comparisons.\n** 'e1' was already put in R/K form by 'luaK_infix'.\n*/\n\n\nvar codecomp = function codecomp(fs, opr, e1, e2) {\n  var ek = lparser.expkind;\n  var rk1;\n  if (e1.k === ek.VK) rk1 = lopcodes.RKASK(e1.u.info);else {\n    lua_assert(e1.k === ek.VNONRELOC);\n    rk1 = e1.u.info;\n  }\n  var rk2 = luaK_exp2RK(fs, e2);\n  freeexps(fs, e1, e2);\n\n  switch (opr) {\n    case BinOpr.OPR_NE:\n      {\n        /* '(a ~= b)' ==> 'not (a === b)' */\n        e1.u.info = condjump(fs, OpCodesI.OP_EQ, 0, rk1, rk2);\n        break;\n      }\n\n    case BinOpr.OPR_GT:\n    case BinOpr.OPR_GE:\n      {\n        /* '(a > b)' ==> '(b < a)';  '(a >= b)' ==> '(b <= a)' */\n        var op = opr - BinOpr.OPR_NE + OpCodesI.OP_EQ;\n        e1.u.info = condjump(fs, op, 1, rk2, rk1);\n        /* invert operands */\n\n        break;\n      }\n\n    default:\n      {\n        /* '==', '<', '<=' use their own opcodes */\n        var _op = opr - BinOpr.OPR_EQ + OpCodesI.OP_EQ;\n\n        e1.u.info = condjump(fs, _op, 1, rk1, rk2);\n        break;\n      }\n  }\n\n  e1.k = ek.VJMP;\n};\n/*\n** Apply prefix operation 'op' to expression 'e'.\n*/\n\n\nvar luaK_prefix = function luaK_prefix(fs, op, e, line) {\n  var ef = new lparser.expdesc();\n  ef.k = lparser.expkind.VKINT;\n  ef.u.ival = ef.u.nval = ef.u.info = 0;\n  ef.t = NO_JUMP;\n  ef.f = NO_JUMP;\n\n  switch (op) {\n    case UnOpr.OPR_MINUS:\n    case UnOpr.OPR_BNOT:\n      /* use 'ef' as fake 2nd operand */\n      if (constfolding(op + LUA_OPUNM, e, ef)) break;\n\n    /* FALLTHROUGH */\n\n    case UnOpr.OPR_LEN:\n      codeunexpval(fs, op + OpCodesI.OP_UNM, e, line);\n      break;\n\n    case UnOpr.OPR_NOT:\n      codenot(fs, e);\n      break;\n  }\n};\n/*\n** Process 1st operand 'v' of binary operation 'op' before reading\n** 2nd operand.\n*/\n\n\nvar luaK_infix = function luaK_infix(fs, op, v) {\n  switch (op) {\n    case BinOpr.OPR_AND:\n      {\n        luaK_goiftrue(fs, v);\n        /* go ahead only if 'v' is true */\n\n        break;\n      }\n\n    case BinOpr.OPR_OR:\n      {\n        luaK_goiffalse(fs, v);\n        /* go ahead only if 'v' is false */\n\n        break;\n      }\n\n    case BinOpr.OPR_CONCAT:\n      {\n        luaK_exp2nextreg(fs, v);\n        /* operand must be on the 'stack' */\n\n        break;\n      }\n\n    case BinOpr.OPR_ADD:\n    case BinOpr.OPR_SUB:\n    case BinOpr.OPR_MUL:\n    case BinOpr.OPR_DIV:\n    case BinOpr.OPR_IDIV:\n    case BinOpr.OPR_MOD:\n    case BinOpr.OPR_POW:\n    case BinOpr.OPR_BAND:\n    case BinOpr.OPR_BOR:\n    case BinOpr.OPR_BXOR:\n    case BinOpr.OPR_SHL:\n    case BinOpr.OPR_SHR:\n      {\n        if (!tonumeral(v, false)) luaK_exp2RK(fs, v);\n        /* else keep numeral, which may be folded with 2nd operand */\n\n        break;\n      }\n\n    default:\n      {\n        luaK_exp2RK(fs, v);\n        break;\n      }\n  }\n};\n/*\n** Finalize code for binary operation, after reading 2nd operand.\n** For '(a .. b .. c)' (which is '(a .. (b .. c))', because\n** concatenation is right associative), merge second CONCAT into first\n** one.\n*/\n\n\nvar luaK_posfix = function luaK_posfix(fs, op, e1, e2, line) {\n  var ek = lparser.expkind;\n\n  switch (op) {\n    case BinOpr.OPR_AND:\n      {\n        lua_assert(e1.t === NO_JUMP);\n        /* list closed by 'luK_infix' */\n\n        luaK_dischargevars(fs, e2);\n        e2.f = luaK_concat(fs, e2.f, e1.f);\n        e1.to(e2);\n        break;\n      }\n\n    case BinOpr.OPR_OR:\n      {\n        lua_assert(e1.f === NO_JUMP);\n        /* list closed by 'luK_infix' */\n\n        luaK_dischargevars(fs, e2);\n        e2.t = luaK_concat(fs, e2.t, e1.t);\n        e1.to(e2);\n        break;\n      }\n\n    case BinOpr.OPR_CONCAT:\n      {\n        luaK_exp2val(fs, e2);\n        var ins = getinstruction(fs, e2);\n\n        if (e2.k === ek.VRELOCABLE && ins.opcode === OpCodesI.OP_CONCAT) {\n          lua_assert(e1.u.info === ins.B - 1);\n          freeexp(fs, e1);\n          lopcodes.SETARG_B(ins, e1.u.info);\n          e1.k = ek.VRELOCABLE;\n          e1.u.info = e2.u.info;\n        } else {\n          luaK_exp2nextreg(fs, e2);\n          /* operand must be on the 'stack' */\n\n          codebinexpval(fs, OpCodesI.OP_CONCAT, e1, e2, line);\n        }\n\n        break;\n      }\n\n    case BinOpr.OPR_ADD:\n    case BinOpr.OPR_SUB:\n    case BinOpr.OPR_MUL:\n    case BinOpr.OPR_DIV:\n    case BinOpr.OPR_IDIV:\n    case BinOpr.OPR_MOD:\n    case BinOpr.OPR_POW:\n    case BinOpr.OPR_BAND:\n    case BinOpr.OPR_BOR:\n    case BinOpr.OPR_BXOR:\n    case BinOpr.OPR_SHL:\n    case BinOpr.OPR_SHR:\n      {\n        if (!constfolding(op + LUA_OPADD, e1, e2)) codebinexpval(fs, op + OpCodesI.OP_ADD, e1, e2, line);\n        break;\n      }\n\n    case BinOpr.OPR_EQ:\n    case BinOpr.OPR_LT:\n    case BinOpr.OPR_LE:\n    case BinOpr.OPR_NE:\n    case BinOpr.OPR_GT:\n    case BinOpr.OPR_GE:\n      {\n        codecomp(fs, op, e1, e2);\n        break;\n      }\n  }\n\n  return e1;\n};\n/*\n** Change line information associated with current position.\n*/\n\n\nvar luaK_fixline = function luaK_fixline(fs, line) {\n  fs.f.lineinfo[fs.pc - 1] = line;\n};\n/*\n** Emit a SETLIST instruction.\n** 'base' is register that keeps table;\n** 'nelems' is #table plus those to be stored now;\n** 'tostore' is number of values (in registers 'base + 1',...) to add to\n** table (or LUA_MULTRET to add up to stack top).\n*/\n\n\nvar luaK_setlist = function luaK_setlist(fs, base, nelems, tostore) {\n  var c = (nelems - 1) / lopcodes.LFIELDS_PER_FLUSH + 1;\n  var b = tostore === LUA_MULTRET ? 0 : tostore;\n  lua_assert(tostore !== 0 && tostore <= lopcodes.LFIELDS_PER_FLUSH);\n  if (c <= lopcodes.MAXARG_C) luaK_codeABC(fs, OpCodesI.OP_SETLIST, base, b, c);else if (c <= lopcodes.MAXARG_Ax) {\n    luaK_codeABC(fs, OpCodesI.OP_SETLIST, base, b, 0);\n    codeextraarg(fs, c);\n  } else llex.luaX_syntaxerror(fs.ls, to_luastring(\"constructor too long\", true));\n  fs.freereg = base + 1;\n  /* free registers with list values */\n};\n\nmodule.exports.BinOpr = BinOpr;\nmodule.exports.NO_JUMP = NO_JUMP;\nmodule.exports.UnOpr = UnOpr;\nmodule.exports.getinstruction = getinstruction;\nmodule.exports.luaK_checkstack = luaK_checkstack;\nmodule.exports.luaK_code = luaK_code;\nmodule.exports.luaK_codeABC = luaK_codeABC;\nmodule.exports.luaK_codeABx = luaK_codeABx;\nmodule.exports.luaK_codeAsBx = luaK_codeAsBx;\nmodule.exports.luaK_codek = luaK_codek;\nmodule.exports.luaK_concat = luaK_concat;\nmodule.exports.luaK_dischargevars = luaK_dischargevars;\nmodule.exports.luaK_exp2RK = luaK_exp2RK;\nmodule.exports.luaK_exp2anyreg = luaK_exp2anyreg;\nmodule.exports.luaK_exp2anyregup = luaK_exp2anyregup;\nmodule.exports.luaK_exp2nextreg = luaK_exp2nextreg;\nmodule.exports.luaK_exp2val = luaK_exp2val;\nmodule.exports.luaK_fixline = luaK_fixline;\nmodule.exports.luaK_getlabel = luaK_getlabel;\nmodule.exports.luaK_goiffalse = luaK_goiffalse;\nmodule.exports.luaK_goiftrue = luaK_goiftrue;\nmodule.exports.luaK_indexed = luaK_indexed;\nmodule.exports.luaK_infix = luaK_infix;\nmodule.exports.luaK_intK = luaK_intK;\nmodule.exports.luaK_jump = luaK_jump;\nmodule.exports.luaK_jumpto = luaK_jumpto;\nmodule.exports.luaK_nil = luaK_nil;\nmodule.exports.luaK_numberK = luaK_numberK;\nmodule.exports.luaK_patchclose = luaK_patchclose;\nmodule.exports.luaK_patchlist = luaK_patchlist;\nmodule.exports.luaK_patchtohere = luaK_patchtohere;\nmodule.exports.luaK_posfix = luaK_posfix;\nmodule.exports.luaK_prefix = luaK_prefix;\nmodule.exports.luaK_reserveregs = luaK_reserveregs;\nmodule.exports.luaK_ret = luaK_ret;\nmodule.exports.luaK_self = luaK_self;\nmodule.exports.luaK_setlist = luaK_setlist;\nmodule.exports.luaK_setmultret = luaK_setmultret;\nmodule.exports.luaK_setoneret = luaK_setoneret;\nmodule.exports.luaK_setreturns = luaK_setreturns;\nmodule.exports.luaK_storevar = luaK_storevar;\nmodule.exports.luaK_stringK = luaK_stringK;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///35\n")},function(module,exports,__webpack_require__){"use strict";eval('\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar _require = __webpack_require__(1),\n    LUA_SIGNATURE = _require.LUA_SIGNATURE,\n    _require$constant_typ = _require.constant_types,\n    LUA_TBOOLEAN = _require$constant_typ.LUA_TBOOLEAN,\n    LUA_TLNGSTR = _require$constant_typ.LUA_TLNGSTR,\n    LUA_TNIL = _require$constant_typ.LUA_TNIL,\n    LUA_TNUMFLT = _require$constant_typ.LUA_TNUMFLT,\n    LUA_TNUMINT = _require$constant_typ.LUA_TNUMINT,\n    LUA_TSHRSTR = _require$constant_typ.LUA_TSHRSTR,\n    LUA_ERRSYNTAX = _require.thread_status.LUA_ERRSYNTAX,\n    is_luastring = _require.is_luastring,\n    luastring_eq = _require.luastring_eq,\n    to_luastring = _require.to_luastring;\n\nvar ldo = __webpack_require__(8);\n\nvar lfunc = __webpack_require__(13);\n\nvar lobject = __webpack_require__(6);\n\nvar _require2 = __webpack_require__(16),\n    MAXARG_sBx = _require2.MAXARG_sBx,\n    POS_A = _require2.POS_A,\n    POS_Ax = _require2.POS_Ax,\n    POS_B = _require2.POS_B,\n    POS_Bx = _require2.POS_Bx,\n    POS_C = _require2.POS_C,\n    POS_OP = _require2.POS_OP,\n    SIZE_A = _require2.SIZE_A,\n    SIZE_Ax = _require2.SIZE_Ax,\n    SIZE_B = _require2.SIZE_B,\n    SIZE_Bx = _require2.SIZE_Bx,\n    SIZE_C = _require2.SIZE_C,\n    SIZE_OP = _require2.SIZE_OP;\n\nvar _require3 = __webpack_require__(4),\n    lua_assert = _require3.lua_assert;\n\nvar _require4 = __webpack_require__(10),\n    luaS_bless = _require4.luaS_bless;\n\nvar _require5 = __webpack_require__(20),\n    luaZ_read = _require5.luaZ_read,\n    ZIO = _require5.ZIO;\n\nvar LUAC_DATA = [0x19, 0x93, 13, 10, 0x1a, 10];\n\nvar BytecodeParser =\n/*#__PURE__*/\nfunction () {\n  function BytecodeParser(L, Z, name) {\n    _classCallCheck(this, BytecodeParser);\n\n    this.intSize = 4;\n    this.size_tSize = 4;\n    this.instructionSize = 4;\n    this.integerSize = 4;\n    this.numberSize = 8;\n    lua_assert(Z instanceof ZIO, "BytecodeParser only operates on a ZIO");\n    lua_assert(is_luastring(name));\n    if (name[0] === 64\n    /* (\'@\').charCodeAt(0) */\n    || name[0] === 61\n    /* (\'=\').charCodeAt(0) */\n    ) this.name = name.subarray(1);else if (name[0] == LUA_SIGNATURE[0]) this.name = to_luastring("binary string", true);else this.name = name;\n    this.L = L;\n    this.Z = Z; // Used to do buffer to number conversions\n\n    this.arraybuffer = new ArrayBuffer(Math.max(this.intSize, this.size_tSize, this.instructionSize, this.integerSize, this.numberSize));\n    this.dv = new DataView(this.arraybuffer);\n    this.u8 = new Uint8Array(this.arraybuffer);\n  }\n\n  _createClass(BytecodeParser, [{\n    key: "read",\n    value: function read(size) {\n      var u8 = new Uint8Array(size);\n      if (luaZ_read(this.Z, u8, 0, size) !== 0) this.error("truncated");\n      return u8;\n    }\n  }, {\n    key: "LoadByte",\n    value: function LoadByte() {\n      if (luaZ_read(this.Z, this.u8, 0, 1) !== 0) this.error("truncated");\n      return this.u8[0];\n    }\n  }, {\n    key: "LoadInt",\n    value: function LoadInt() {\n      if (luaZ_read(this.Z, this.u8, 0, this.intSize) !== 0) this.error("truncated");\n      return this.dv.getInt32(0, true);\n    }\n  }, {\n    key: "LoadNumber",\n    value: function LoadNumber() {\n      if (luaZ_read(this.Z, this.u8, 0, this.numberSize) !== 0) this.error("truncated");\n      return this.dv.getFloat64(0, true);\n    }\n  }, {\n    key: "LoadInteger",\n    value: function LoadInteger() {\n      if (luaZ_read(this.Z, this.u8, 0, this.integerSize) !== 0) this.error("truncated");\n      return this.dv.getInt32(0, true);\n    }\n  }, {\n    key: "LoadSize_t",\n    value: function LoadSize_t() {\n      return this.LoadInteger();\n    }\n  }, {\n    key: "LoadString",\n    value: function LoadString() {\n      var size = this.LoadByte();\n      if (size === 0xFF) size = this.LoadSize_t();\n      if (size === 0) return null;\n      return luaS_bless(this.L, this.read(size - 1));\n    }\n    /* creates a mask with \'n\' 1 bits at position \'p\' */\n\n  }, {\n    key: "LoadCode",\n    value: function LoadCode(f) {\n      var n = this.LoadInt();\n      var p = BytecodeParser;\n\n      for (var i = 0; i < n; i++) {\n        if (luaZ_read(this.Z, this.u8, 0, this.instructionSize) !== 0) this.error("truncated");\n        var ins = this.dv.getUint32(0, true);\n        f.code[i] = {\n          code: ins,\n          opcode: ins >> POS_OP & p.MASK1(SIZE_OP, 0),\n          A: ins >> POS_A & p.MASK1(SIZE_A, 0),\n          B: ins >> POS_B & p.MASK1(SIZE_B, 0),\n          C: ins >> POS_C & p.MASK1(SIZE_C, 0),\n          Bx: ins >> POS_Bx & p.MASK1(SIZE_Bx, 0),\n          Ax: ins >> POS_Ax & p.MASK1(SIZE_Ax, 0),\n          sBx: (ins >> POS_Bx & p.MASK1(SIZE_Bx, 0)) - MAXARG_sBx\n        };\n      }\n    }\n  }, {\n    key: "LoadConstants",\n    value: function LoadConstants(f) {\n      var n = this.LoadInt();\n\n      for (var i = 0; i < n; i++) {\n        var t = this.LoadByte();\n\n        switch (t) {\n          case LUA_TNIL:\n            f.k.push(new lobject.TValue(LUA_TNIL, null));\n            break;\n\n          case LUA_TBOOLEAN:\n            f.k.push(new lobject.TValue(LUA_TBOOLEAN, this.LoadByte() !== 0));\n            break;\n\n          case LUA_TNUMFLT:\n            f.k.push(new lobject.TValue(LUA_TNUMFLT, this.LoadNumber()));\n            break;\n\n          case LUA_TNUMINT:\n            f.k.push(new lobject.TValue(LUA_TNUMINT, this.LoadInteger()));\n            break;\n\n          case LUA_TSHRSTR:\n          case LUA_TLNGSTR:\n            f.k.push(new lobject.TValue(LUA_TLNGSTR, this.LoadString()));\n            break;\n\n          default:\n            this.error("unrecognized constant \'".concat(t, "\'"));\n        }\n      }\n    }\n  }, {\n    key: "LoadProtos",\n    value: function LoadProtos(f) {\n      var n = this.LoadInt();\n\n      for (var i = 0; i < n; i++) {\n        f.p[i] = new lfunc.Proto(this.L);\n        this.LoadFunction(f.p[i], f.source);\n      }\n    }\n  }, {\n    key: "LoadUpvalues",\n    value: function LoadUpvalues(f) {\n      var n = this.LoadInt();\n\n      for (var i = 0; i < n; i++) {\n        f.upvalues[i] = {\n          name: null,\n          instack: this.LoadByte(),\n          idx: this.LoadByte()\n        };\n      }\n    }\n  }, {\n    key: "LoadDebug",\n    value: function LoadDebug(f) {\n      var n = this.LoadInt();\n\n      for (var i = 0; i < n; i++) {\n        f.lineinfo[i] = this.LoadInt();\n      }\n\n      n = this.LoadInt();\n\n      for (var _i = 0; _i < n; _i++) {\n        f.locvars[_i] = {\n          varname: this.LoadString(),\n          startpc: this.LoadInt(),\n          endpc: this.LoadInt()\n        };\n      }\n\n      n = this.LoadInt();\n\n      for (var _i2 = 0; _i2 < n; _i2++) {\n        f.upvalues[_i2].name = this.LoadString();\n      }\n    }\n  }, {\n    key: "LoadFunction",\n    value: function LoadFunction(f, psource) {\n      f.source = this.LoadString();\n      if (f.source === null)\n        /* no source in dump? */\n        f.source = psource;\n      /* reuse parent\'s source */\n\n      f.linedefined = this.LoadInt();\n      f.lastlinedefined = this.LoadInt();\n      f.numparams = this.LoadByte();\n      f.is_vararg = this.LoadByte() !== 0;\n      f.maxstacksize = this.LoadByte();\n      this.LoadCode(f);\n      this.LoadConstants(f);\n      this.LoadUpvalues(f);\n      this.LoadProtos(f);\n      this.LoadDebug(f);\n    }\n  }, {\n    key: "checkliteral",\n    value: function checkliteral(s, msg) {\n      var buff = this.read(s.length);\n      if (!luastring_eq(buff, s)) this.error(msg);\n    }\n  }, {\n    key: "checkHeader",\n    value: function checkHeader() {\n      this.checkliteral(LUA_SIGNATURE.subarray(1), "not a");\n      /* 1st char already checked */\n\n      if (this.LoadByte() !== 0x53) this.error("version mismatch in");\n      if (this.LoadByte() !== 0) this.error("format mismatch in");\n      this.checkliteral(LUAC_DATA, "corrupted");\n      this.intSize = this.LoadByte();\n      this.size_tSize = this.LoadByte();\n      this.instructionSize = this.LoadByte();\n      this.integerSize = this.LoadByte();\n      this.numberSize = this.LoadByte();\n      this.checksize(this.intSize, 4, "int");\n      this.checksize(this.size_tSize, 4, "size_t");\n      this.checksize(this.instructionSize, 4, "instruction");\n      this.checksize(this.integerSize, 4, "integer");\n      this.checksize(this.numberSize, 8, "number");\n      if (this.LoadInteger() !== 0x5678) this.error("endianness mismatch in");\n      if (this.LoadNumber() !== 370.5) this.error("float format mismatch in");\n    }\n  }, {\n    key: "error",\n    value: function error(why) {\n      lobject.luaO_pushfstring(this.L, to_luastring("%s: %s precompiled chunk"), this.name, to_luastring(why));\n      ldo.luaD_throw(this.L, LUA_ERRSYNTAX);\n    }\n  }, {\n    key: "checksize",\n    value: function checksize(byte, size, tname) {\n      if (byte !== size) this.error("".concat(tname, " size mismatch in"));\n    }\n  }], [{\n    key: "MASK1",\n    value: function MASK1(n, p) {\n      return ~(~0 << n) << p;\n    }\n  }]);\n\n  return BytecodeParser;\n}();\n\nvar luaU_undump = function luaU_undump(L, Z, name) {\n  var S = new BytecodeParser(L, Z, name);\n  S.checkHeader();\n  var cl = lfunc.luaF_newLclosure(L, S.LoadByte());\n  ldo.luaD_inctop(L);\n  L.stack[L.top - 1].setclLvalue(cl);\n  cl.p = new lfunc.Proto(L);\n  S.LoadFunction(cl.p, null);\n  lua_assert(cl.nupvalues === cl.p.upvalues.length);\n  /* luai_verifycode */\n\n  return cl;\n};\n\nmodule.exports.luaU_undump = luaU_undump;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///36\n')},function(module,exports,__webpack_require__){"use strict";eval("\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar _require = __webpack_require__(1),\n    LUA_SIGNATURE = _require.LUA_SIGNATURE,\n    LUA_VERSION_MAJOR = _require.LUA_VERSION_MAJOR,\n    LUA_VERSION_MINOR = _require.LUA_VERSION_MINOR,\n    _require$constant_typ = _require.constant_types,\n    LUA_TBOOLEAN = _require$constant_typ.LUA_TBOOLEAN,\n    LUA_TLNGSTR = _require$constant_typ.LUA_TLNGSTR,\n    LUA_TNIL = _require$constant_typ.LUA_TNIL,\n    LUA_TNUMFLT = _require$constant_typ.LUA_TNUMFLT,\n    LUA_TNUMINT = _require$constant_typ.LUA_TNUMINT,\n    LUA_TSHRSTR = _require$constant_typ.LUA_TSHRSTR,\n    luastring_of = _require.luastring_of;\n\nvar LUAC_DATA = luastring_of(25, 147, 13, 10, 26, 10);\nvar LUAC_INT = 0x5678;\nvar LUAC_NUM = 370.5;\nvar LUAC_VERSION = Number(LUA_VERSION_MAJOR) * 16 + Number(LUA_VERSION_MINOR);\nvar LUAC_FORMAT = 0;\n/* this is the official format */\n\nvar DumpState = function DumpState() {\n  _classCallCheck(this, DumpState);\n\n  this.L = null;\n  this.write = null;\n  this.data = null;\n  this.strip = NaN;\n  this.status = NaN;\n};\n\nvar DumpBlock = function DumpBlock(b, size, D) {\n  if (D.status === 0 && size > 0) D.status = D.writer(D.L, b, size, D.data);\n};\n\nvar DumpByte = function DumpByte(y, D) {\n  DumpBlock(luastring_of(y), 1, D);\n};\n\nvar DumpInt = function DumpInt(x, D) {\n  var ab = new ArrayBuffer(4);\n  var dv = new DataView(ab);\n  dv.setInt32(0, x, true);\n  var t = new Uint8Array(ab);\n  DumpBlock(t, 4, D);\n};\n\nvar DumpInteger = function DumpInteger(x, D) {\n  var ab = new ArrayBuffer(4);\n  var dv = new DataView(ab);\n  dv.setInt32(0, x, true);\n  var t = new Uint8Array(ab);\n  DumpBlock(t, 4, D);\n};\n\nvar DumpNumber = function DumpNumber(x, D) {\n  var ab = new ArrayBuffer(8);\n  var dv = new DataView(ab);\n  dv.setFloat64(0, x, true);\n  var t = new Uint8Array(ab);\n  DumpBlock(t, 8, D);\n};\n\nvar DumpString = function DumpString(s, D) {\n  if (s === null) DumpByte(0, D);else {\n    var size = s.tsslen() + 1;\n    var str = s.getstr();\n    if (size < 0xFF) DumpByte(size, D);else {\n      DumpByte(0xFF, D);\n      DumpInteger(size, D);\n    }\n    DumpBlock(str, size - 1, D);\n    /* no need to save '\\0' */\n  }\n};\n\nvar DumpCode = function DumpCode(f, D) {\n  var s = f.code.map(function (e) {\n    return e.code;\n  });\n  DumpInt(s.length, D);\n\n  for (var i = 0; i < s.length; i++) {\n    DumpInt(s[i], D);\n  }\n};\n\nvar DumpConstants = function DumpConstants(f, D) {\n  var n = f.k.length;\n  DumpInt(n, D);\n\n  for (var i = 0; i < n; i++) {\n    var o = f.k[i];\n    DumpByte(o.ttype(), D);\n\n    switch (o.ttype()) {\n      case LUA_TNIL:\n        break;\n\n      case LUA_TBOOLEAN:\n        DumpByte(o.value ? 1 : 0, D);\n        break;\n\n      case LUA_TNUMFLT:\n        DumpNumber(o.value, D);\n        break;\n\n      case LUA_TNUMINT:\n        DumpInteger(o.value, D);\n        break;\n\n      case LUA_TSHRSTR:\n      case LUA_TLNGSTR:\n        DumpString(o.tsvalue(), D);\n        break;\n    }\n  }\n};\n\nvar DumpProtos = function DumpProtos(f, D) {\n  var n = f.p.length;\n  DumpInt(n, D);\n\n  for (var i = 0; i < n; i++) {\n    DumpFunction(f.p[i], f.source, D);\n  }\n};\n\nvar DumpUpvalues = function DumpUpvalues(f, D) {\n  var n = f.upvalues.length;\n  DumpInt(n, D);\n\n  for (var i = 0; i < n; i++) {\n    DumpByte(f.upvalues[i].instack ? 1 : 0, D);\n    DumpByte(f.upvalues[i].idx, D);\n  }\n};\n\nvar DumpDebug = function DumpDebug(f, D) {\n  var n = D.strip ? 0 : f.lineinfo.length;\n  DumpInt(n, D);\n\n  for (var i = 0; i < n; i++) {\n    DumpInt(f.lineinfo[i], D);\n  }\n\n  n = D.strip ? 0 : f.locvars.length;\n  DumpInt(n, D);\n\n  for (var _i = 0; _i < n; _i++) {\n    DumpString(f.locvars[_i].varname, D);\n    DumpInt(f.locvars[_i].startpc, D);\n    DumpInt(f.locvars[_i].endpc, D);\n  }\n\n  n = D.strip ? 0 : f.upvalues.length;\n  DumpInt(n, D);\n\n  for (var _i2 = 0; _i2 < n; _i2++) {\n    DumpString(f.upvalues[_i2].name, D);\n  }\n};\n\nvar DumpFunction = function DumpFunction(f, psource, D) {\n  if (D.strip || f.source === psource) DumpString(null, D);\n  /* no debug info or same source as its parent */\n  else DumpString(f.source, D);\n  DumpInt(f.linedefined, D);\n  DumpInt(f.lastlinedefined, D);\n  DumpByte(f.numparams, D);\n  DumpByte(f.is_vararg ? 1 : 0, D);\n  DumpByte(f.maxstacksize, D);\n  DumpCode(f, D);\n  DumpConstants(f, D);\n  DumpUpvalues(f, D);\n  DumpProtos(f, D);\n  DumpDebug(f, D);\n};\n\nvar DumpHeader = function DumpHeader(D) {\n  DumpBlock(LUA_SIGNATURE, LUA_SIGNATURE.length, D);\n  DumpByte(LUAC_VERSION, D);\n  DumpByte(LUAC_FORMAT, D);\n  DumpBlock(LUAC_DATA, LUAC_DATA.length, D);\n  DumpByte(4, D); // intSize\n\n  DumpByte(4, D); // size_tSize\n\n  DumpByte(4, D); // instructionSize\n\n  DumpByte(4, D); // integerSize\n\n  DumpByte(8, D); // numberSize\n\n  DumpInteger(LUAC_INT, D);\n  DumpNumber(LUAC_NUM, D);\n};\n/*\n** dump Lua function as precompiled chunk\n*/\n\n\nvar luaU_dump = function luaU_dump(L, f, w, data, strip) {\n  var D = new DumpState();\n  D.L = L;\n  D.writer = w;\n  D.data = data;\n  D.strip = strip;\n  D.status = 0;\n  DumpHeader(D);\n  DumpByte(f.upvalues.length, D);\n  DumpFunction(f, null, D);\n  return D.status;\n};\n\nmodule.exports.luaU_dump = luaU_dump;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///37\n")},function(module,exports,__webpack_require__){eval("var __WEBPACK_AMD_DEFINE_RESULT__;/* global window, exports, define */\n!function () {\n  'use strict';\n\n  var re = {\n    not_string: /[^s]/,\n    not_bool: /[^t]/,\n    not_type: /[^T]/,\n    not_primitive: /[^v]/,\n    number: /[diefg]/,\n    numeric_arg: /[bcdiefguxX]/,\n    json: /[j]/,\n    not_json: /[^j]/,\n    text: /^[^\\x25]+/,\n    modulo: /^\\x25{2}/,\n    placeholder: /^\\x25(?:([1-9]\\d*)\\$|\\(([^\\)]+)\\))?(\\+)?(0|'[^$])?(-)?(\\d+)?(?:\\.(\\d+))?([b-gijostTuvxX])/,\n    key: /^([a-z_][a-z_\\d]*)/i,\n    key_access: /^\\.([a-z_][a-z_\\d]*)/i,\n    index_access: /^\\[(\\d+)\\]/,\n    sign: /^[\\+\\-]/\n  };\n\n  function sprintf(key) {\n    // `arguments` is not an array, but should be fine for this call\n    return sprintf_format(sprintf_parse(key), arguments);\n  }\n\n  function vsprintf(fmt, argv) {\n    return sprintf.apply(null, [fmt].concat(argv || []));\n  }\n\n  function sprintf_format(parse_tree, argv) {\n    var cursor = 1,\n        tree_length = parse_tree.length,\n        arg,\n        output = '',\n        i,\n        k,\n        match,\n        pad,\n        pad_character,\n        pad_length,\n        is_positive,\n        sign;\n\n    for (i = 0; i < tree_length; i++) {\n      if (typeof parse_tree[i] === 'string') {\n        output += parse_tree[i];\n      } else if (Array.isArray(parse_tree[i])) {\n        match = parse_tree[i]; // convenience purposes only\n\n        if (match[2]) {\n          // keyword argument\n          arg = argv[cursor];\n\n          for (k = 0; k < match[2].length; k++) {\n            if (!arg.hasOwnProperty(match[2][k])) {\n              throw new Error(sprintf('[sprintf] property \"%s\" does not exist', match[2][k]));\n            }\n\n            arg = arg[match[2][k]];\n          }\n        } else if (match[1]) {\n          // positional argument (explicit)\n          arg = argv[match[1]];\n        } else {\n          // positional argument (implicit)\n          arg = argv[cursor++];\n        }\n\n        if (re.not_type.test(match[8]) && re.not_primitive.test(match[8]) && arg instanceof Function) {\n          arg = arg();\n        }\n\n        if (re.numeric_arg.test(match[8]) && typeof arg !== 'number' && isNaN(arg)) {\n          throw new TypeError(sprintf('[sprintf] expecting number but found %T', arg));\n        }\n\n        if (re.number.test(match[8])) {\n          is_positive = arg >= 0;\n        }\n\n        switch (match[8]) {\n          case 'b':\n            arg = parseInt(arg, 10).toString(2);\n            break;\n\n          case 'c':\n            arg = String.fromCharCode(parseInt(arg, 10));\n            break;\n\n          case 'd':\n          case 'i':\n            arg = parseInt(arg, 10);\n            break;\n\n          case 'j':\n            arg = JSON.stringify(arg, null, match[6] ? parseInt(match[6]) : 0);\n            break;\n\n          case 'e':\n            arg = match[7] ? parseFloat(arg).toExponential(match[7]) : parseFloat(arg).toExponential();\n            break;\n\n          case 'f':\n            arg = match[7] ? parseFloat(arg).toFixed(match[7]) : parseFloat(arg);\n            break;\n\n          case 'g':\n            arg = match[7] ? String(Number(arg.toPrecision(match[7]))) : parseFloat(arg);\n            break;\n\n          case 'o':\n            arg = (parseInt(arg, 10) >>> 0).toString(8);\n            break;\n\n          case 's':\n            arg = String(arg);\n            arg = match[7] ? arg.substring(0, match[7]) : arg;\n            break;\n\n          case 't':\n            arg = String(!!arg);\n            arg = match[7] ? arg.substring(0, match[7]) : arg;\n            break;\n\n          case 'T':\n            arg = Object.prototype.toString.call(arg).slice(8, -1).toLowerCase();\n            arg = match[7] ? arg.substring(0, match[7]) : arg;\n            break;\n\n          case 'u':\n            arg = parseInt(arg, 10) >>> 0;\n            break;\n\n          case 'v':\n            arg = arg.valueOf();\n            arg = match[7] ? arg.substring(0, match[7]) : arg;\n            break;\n\n          case 'x':\n            arg = (parseInt(arg, 10) >>> 0).toString(16);\n            break;\n\n          case 'X':\n            arg = (parseInt(arg, 10) >>> 0).toString(16).toUpperCase();\n            break;\n        }\n\n        if (re.json.test(match[8])) {\n          output += arg;\n        } else {\n          if (re.number.test(match[8]) && (!is_positive || match[3])) {\n            sign = is_positive ? '+' : '-';\n            arg = arg.toString().replace(re.sign, '');\n          } else {\n            sign = '';\n          }\n\n          pad_character = match[4] ? match[4] === '0' ? '0' : match[4].charAt(1) : ' ';\n          pad_length = match[6] - (sign + arg).length;\n          pad = match[6] ? pad_length > 0 ? pad_character.repeat(pad_length) : '' : '';\n          output += match[5] ? sign + arg + pad : pad_character === '0' ? sign + pad + arg : pad + sign + arg;\n        }\n      }\n    }\n\n    return output;\n  }\n\n  var sprintf_cache = Object.create(null);\n\n  function sprintf_parse(fmt) {\n    if (sprintf_cache[fmt]) {\n      return sprintf_cache[fmt];\n    }\n\n    var _fmt = fmt,\n        match,\n        parse_tree = [],\n        arg_names = 0;\n\n    while (_fmt) {\n      if ((match = re.text.exec(_fmt)) !== null) {\n        parse_tree.push(match[0]);\n      } else if ((match = re.modulo.exec(_fmt)) !== null) {\n        parse_tree.push('%');\n      } else if ((match = re.placeholder.exec(_fmt)) !== null) {\n        if (match[2]) {\n          arg_names |= 1;\n          var field_list = [],\n              replacement_field = match[2],\n              field_match = [];\n\n          if ((field_match = re.key.exec(replacement_field)) !== null) {\n            field_list.push(field_match[1]);\n\n            while ((replacement_field = replacement_field.substring(field_match[0].length)) !== '') {\n              if ((field_match = re.key_access.exec(replacement_field)) !== null) {\n                field_list.push(field_match[1]);\n              } else if ((field_match = re.index_access.exec(replacement_field)) !== null) {\n                field_list.push(field_match[1]);\n              } else {\n                throw new SyntaxError('[sprintf] failed to parse named argument key');\n              }\n            }\n          } else {\n            throw new SyntaxError('[sprintf] failed to parse named argument key');\n          }\n\n          match[2] = field_list;\n        } else {\n          arg_names |= 2;\n        }\n\n        if (arg_names === 3) {\n          throw new Error('[sprintf] mixing positional and named placeholders is not (yet) supported');\n        }\n\n        parse_tree.push(match);\n      } else {\n        throw new SyntaxError('[sprintf] unexpected placeholder');\n      }\n\n      _fmt = _fmt.substring(match[0].length);\n    }\n\n    return sprintf_cache[fmt] = parse_tree;\n  }\n  /**\n   * export to either browser or node.js\n   */\n\n  /* eslint-disable quote-props */\n\n\n  if (true) {\n    exports['sprintf'] = sprintf;\n    exports['vsprintf'] = vsprintf;\n  }\n\n  if (typeof window !== 'undefined') {\n    window['sprintf'] = sprintf;\n    window['vsprintf'] = vsprintf;\n\n    if (true) {\n      !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n        return {\n          'sprintf': sprintf,\n          'vsprintf': vsprintf\n        };\n      }).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    }\n  }\n  /* eslint-enable quote-props */\n\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///38\n")},function(module,exports,__webpack_require__){"use strict";eval('\n\nvar _require = __webpack_require__(2),\n    lua_pop = _require.lua_pop;\n\nvar _require2 = __webpack_require__(7),\n    luaL_requiref = _require2.luaL_requiref;\n\nvar _require3 = __webpack_require__(5),\n    to_luastring = _require3.to_luastring;\n\nvar loadedlibs = {};\n/* export before requiring lualib.js */\n\nvar luaL_openlibs = function luaL_openlibs(L) {\n  /* "require" functions from \'loadedlibs\' and set results to global table */\n  for (var lib in loadedlibs) {\n    luaL_requiref(L, to_luastring(lib), loadedlibs[lib], 1);\n    lua_pop(L, 1);\n    /* remove lib */\n  }\n};\n\nmodule.exports.luaL_openlibs = luaL_openlibs;\n\nvar lualib = __webpack_require__(17);\n\nvar _require4 = __webpack_require__(24),\n    luaopen_base = _require4.luaopen_base;\n\nvar _require5 = __webpack_require__(25),\n    luaopen_coroutine = _require5.luaopen_coroutine;\n\nvar _require6 = __webpack_require__(31),\n    luaopen_debug = _require6.luaopen_debug;\n\nvar _require7 = __webpack_require__(30),\n    luaopen_math = _require7.luaopen_math;\n\nvar _require8 = __webpack_require__(32),\n    luaopen_package = _require8.luaopen_package;\n\nvar _require9 = __webpack_require__(27),\n    luaopen_os = _require9.luaopen_os;\n\nvar _require10 = __webpack_require__(28),\n    luaopen_string = _require10.luaopen_string;\n\nvar _require11 = __webpack_require__(26),\n    luaopen_table = _require11.luaopen_table;\n\nvar _require12 = __webpack_require__(29),\n    luaopen_utf8 = _require12.luaopen_utf8;\n\nloadedlibs["_G"] = luaopen_base, loadedlibs[lualib.LUA_LOADLIBNAME] = luaopen_package;\nloadedlibs[lualib.LUA_COLIBNAME] = luaopen_coroutine;\nloadedlibs[lualib.LUA_TABLIBNAME] = luaopen_table;\nloadedlibs[lualib.LUA_OSLIBNAME] = luaopen_os;\nloadedlibs[lualib.LUA_STRLIBNAME] = luaopen_string;\nloadedlibs[lualib.LUA_MATHLIBNAME] = luaopen_math;\nloadedlibs[lualib.LUA_UTF8LIBNAME] = luaopen_utf8;\nloadedlibs[lualib.LUA_DBLIBNAME] = luaopen_debug;\nif (false) {}\n/* Extension: fengari library */\n\nvar _require13 = __webpack_require__(33),\n    luaopen_fengari = _require13.luaopen_fengari;\n\nloadedlibs[lualib.LUA_FENGARILIBNAME] = luaopen_fengari;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mZW5nYXJpLy4vbm9kZV9tb2R1bGVzL2Zlbmdhcmkvc3JjL2xpbml0LmpzPzliYTgiXSwibmFtZXMiOlsicmVxdWlyZSIsImx1YV9wb3AiLCJsdWFMX3JlcXVpcmVmIiwidG9fbHVhc3RyaW5nIiwibG9hZGVkbGlicyIsImx1YUxfb3BlbmxpYnMiLCJMIiwibGliIiwibW9kdWxlIiwiZXhwb3J0cyIsImx1YWxpYiIsImx1YW9wZW5fYmFzZSIsImx1YW9wZW5fY29yb3V0aW5lIiwibHVhb3Blbl9kZWJ1ZyIsImx1YW9wZW5fbWF0aCIsImx1YW9wZW5fcGFja2FnZSIsImx1YW9wZW5fb3MiLCJsdWFvcGVuX3N0cmluZyIsImx1YW9wZW5fdGFibGUiLCJsdWFvcGVuX3V0ZjgiLCJMVUFfTE9BRExJQk5BTUUiLCJMVUFfQ09MSUJOQU1FIiwiTFVBX1RBQkxJQk5BTUUiLCJMVUFfT1NMSUJOQU1FIiwiTFVBX1NUUkxJQk5BTUUiLCJMVUFfTUFUSExJQk5BTUUiLCJMVUFfVVRGOExJQk5BTUUiLCJMVUFfREJMSUJOQU1FIiwibHVhb3Blbl9mZW5nYXJpIiwiTFVBX0ZFTkdBUklMSUJOQU1FIl0sIm1hcHBpbmdzIjoiQUFBYTs7ZUFFT0EsbUJBQU8sQ0FBQyxDQUFELEM7SUFBbkJDLE8sWUFBQUEsTzs7Z0JBQ2tCRCxtQkFBTyxDQUFDLENBQUQsQztJQUF6QkUsYSxhQUFBQSxhOztnQkFDaUJGLG1CQUFPLENBQUMsQ0FBRCxDO0lBQXhCRyxZLGFBQUFBLFk7O0FBRVIsSUFBTUMsVUFBVSxHQUFHLEVBQW5CO0FBRUE7O0FBQ0EsSUFBTUMsYUFBYSxHQUFHLFNBQWhCQSxhQUFnQixDQUFTQyxDQUFULEVBQVk7QUFDOUI7QUFDQSxPQUFLLElBQUlDLEdBQVQsSUFBZ0JILFVBQWhCLEVBQTRCO0FBQ3hCRixpQkFBYSxDQUFDSSxDQUFELEVBQUlILFlBQVksQ0FBQ0ksR0FBRCxDQUFoQixFQUF1QkgsVUFBVSxDQUFDRyxHQUFELENBQWpDLEVBQXdDLENBQXhDLENBQWI7QUFDQU4sV0FBTyxDQUFDSyxDQUFELEVBQUksQ0FBSixDQUFQO0FBQWU7QUFDbEI7QUFDSixDQU5EOztBQU9BRSxNQUFNLENBQUNDLE9BQVAsQ0FBZUosYUFBZixHQUErQkEsYUFBL0I7O0FBRUEsSUFBTUssTUFBTSxHQUFHVixtQkFBTyxDQUFDLEVBQUQsQ0FBdEI7O2dCQUM4QkEsbUJBQU8sQ0FBQyxFQUFELEM7SUFBN0JXLFksYUFBQUEsWTs7Z0JBQ3NCWCxtQkFBTyxDQUFDLEVBQUQsQztJQUE3QlksaUIsYUFBQUEsaUI7O2dCQUNzQlosbUJBQU8sQ0FBQyxFQUFELEM7SUFBN0JhLGEsYUFBQUEsYTs7Z0JBQ3NCYixtQkFBTyxDQUFDLEVBQUQsQztJQUE3QmMsWSxhQUFBQSxZOztnQkFDc0JkLG1CQUFPLENBQUMsRUFBRCxDO0lBQTdCZSxlLGFBQUFBLGU7O2dCQUNzQmYsbUJBQU8sQ0FBQyxFQUFELEM7SUFBN0JnQixVLGFBQUFBLFU7O2lCQUNzQmhCLG1CQUFPLENBQUMsRUFBRCxDO0lBQTdCaUIsYyxjQUFBQSxjOztpQkFDc0JqQixtQkFBTyxDQUFDLEVBQUQsQztJQUE3QmtCLGEsY0FBQUEsYTs7aUJBQ3NCbEIsbUJBQU8sQ0FBQyxFQUFELEM7SUFBN0JtQixZLGNBQUFBLFk7O0FBRVJmLFVBQVUsQ0FBQyxJQUFELENBQVYsR0FBbUJPLFlBQW5CLEVBQ0FQLFVBQVUsQ0FBQ00sTUFBTSxDQUFDVSxlQUFSLENBQVYsR0FBcUNMLGVBRHJDO0FBRUFYLFVBQVUsQ0FBQ00sTUFBTSxDQUFDVyxhQUFSLENBQVYsR0FBbUNULGlCQUFuQztBQUNBUixVQUFVLENBQUNNLE1BQU0sQ0FBQ1ksY0FBUixDQUFWLEdBQW9DSixhQUFwQztBQUNBZCxVQUFVLENBQUNNLE1BQU0sQ0FBQ2EsYUFBUixDQUFWLEdBQW1DUCxVQUFuQztBQUNBWixVQUFVLENBQUNNLE1BQU0sQ0FBQ2MsY0FBUixDQUFWLEdBQW9DUCxjQUFwQztBQUNBYixVQUFVLENBQUNNLE1BQU0sQ0FBQ2UsZUFBUixDQUFWLEdBQXFDWCxZQUFyQztBQUNBVixVQUFVLENBQUNNLE1BQU0sQ0FBQ2dCLGVBQVIsQ0FBVixHQUFxQ1AsWUFBckM7QUFDQWYsVUFBVSxDQUFDTSxNQUFNLENBQUNpQixhQUFSLENBQVYsR0FBbUNkLGFBQW5DO0FBQ0EsSUFBSSxLQUFKLEVBQ0lULEVBQUE7QUFFSjs7aUJBQzRCSixtQkFBTyxDQUFDLEVBQUQsQztJQUEzQjRCLGUsY0FBQUEsZTs7QUFDUnhCLFVBQVUsQ0FBQ00sTUFBTSxDQUFDbUIsa0JBQVIsQ0FBVixHQUF3Q0QsZUFBeEMiLCJmaWxlIjoiMzkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgeyBsdWFfcG9wIH0gPSByZXF1aXJlKCcuL2x1YS5qcycpO1xuY29uc3QgeyBsdWFMX3JlcXVpcmVmIH0gPSByZXF1aXJlKCcuL2xhdXhsaWIuanMnKTtcbmNvbnN0IHsgdG9fbHVhc3RyaW5nIH0gPSByZXF1aXJlKFwiLi9mZW5nYXJpY29yZS5qc1wiKTtcblxuY29uc3QgbG9hZGVkbGlicyA9IHt9O1xuXG4vKiBleHBvcnQgYmVmb3JlIHJlcXVpcmluZyBsdWFsaWIuanMgKi9cbmNvbnN0IGx1YUxfb3BlbmxpYnMgPSBmdW5jdGlvbihMKSB7XG4gICAgLyogXCJyZXF1aXJlXCIgZnVuY3Rpb25zIGZyb20gJ2xvYWRlZGxpYnMnIGFuZCBzZXQgcmVzdWx0cyB0byBnbG9iYWwgdGFibGUgKi9cbiAgICBmb3IgKGxldCBsaWIgaW4gbG9hZGVkbGlicykge1xuICAgICAgICBsdWFMX3JlcXVpcmVmKEwsIHRvX2x1YXN0cmluZyhsaWIpLCBsb2FkZWRsaWJzW2xpYl0sIDEpO1xuICAgICAgICBsdWFfcG9wKEwsIDEpOyAvKiByZW1vdmUgbGliICovXG4gICAgfVxufTtcbm1vZHVsZS5leHBvcnRzLmx1YUxfb3BlbmxpYnMgPSBsdWFMX29wZW5saWJzO1xuXG5jb25zdCBsdWFsaWIgPSByZXF1aXJlKCcuL2x1YWxpYi5qcycpO1xuY29uc3QgeyBsdWFvcGVuX2Jhc2UgfSAgICAgID0gcmVxdWlyZSgnLi9sYmFzZWxpYi5qcycpO1xuY29uc3QgeyBsdWFvcGVuX2Nvcm91dGluZSB9ID0gcmVxdWlyZSgnLi9sY29yb2xpYi5qcycpO1xuY29uc3QgeyBsdWFvcGVuX2RlYnVnIH0gICAgID0gcmVxdWlyZSgnLi9sZGJsaWIuanMnKTtcbmNvbnN0IHsgbHVhb3Blbl9tYXRoIH0gICAgICA9IHJlcXVpcmUoJy4vbG1hdGhsaWIuanMnKTtcbmNvbnN0IHsgbHVhb3Blbl9wYWNrYWdlIH0gICA9IHJlcXVpcmUoJy4vbG9hZGxpYi5qcycpO1xuY29uc3QgeyBsdWFvcGVuX29zIH0gICAgICAgID0gcmVxdWlyZSgnLi9sb3NsaWIuanMnKTtcbmNvbnN0IHsgbHVhb3Blbl9zdHJpbmcgfSAgICA9IHJlcXVpcmUoJy4vbHN0cmxpYi5qcycpO1xuY29uc3QgeyBsdWFvcGVuX3RhYmxlIH0gICAgID0gcmVxdWlyZSgnLi9sdGFibGliLmpzJyk7XG5jb25zdCB7IGx1YW9wZW5fdXRmOCB9ICAgICAgPSByZXF1aXJlKCcuL2x1dGY4bGliLmpzJyk7XG5cbmxvYWRlZGxpYnNbXCJfR1wiXSA9IGx1YW9wZW5fYmFzZSxcbmxvYWRlZGxpYnNbbHVhbGliLkxVQV9MT0FETElCTkFNRV0gPSBsdWFvcGVuX3BhY2thZ2U7XG5sb2FkZWRsaWJzW2x1YWxpYi5MVUFfQ09MSUJOQU1FXSA9IGx1YW9wZW5fY29yb3V0aW5lO1xubG9hZGVkbGlic1tsdWFsaWIuTFVBX1RBQkxJQk5BTUVdID0gbHVhb3Blbl90YWJsZTtcbmxvYWRlZGxpYnNbbHVhbGliLkxVQV9PU0xJQk5BTUVdID0gbHVhb3Blbl9vcztcbmxvYWRlZGxpYnNbbHVhbGliLkxVQV9TVFJMSUJOQU1FXSA9IGx1YW9wZW5fc3RyaW5nO1xubG9hZGVkbGlic1tsdWFsaWIuTFVBX01BVEhMSUJOQU1FXSA9IGx1YW9wZW5fbWF0aDtcbmxvYWRlZGxpYnNbbHVhbGliLkxVQV9VVEY4TElCTkFNRV0gPSBsdWFvcGVuX3V0Zjg7XG5sb2FkZWRsaWJzW2x1YWxpYi5MVUFfREJMSUJOQU1FXSA9IGx1YW9wZW5fZGVidWc7XG5pZiAodHlwZW9mIHByb2Nlc3MgIT09IFwidW5kZWZpbmVkXCIpXG4gICAgbG9hZGVkbGlic1tsdWFsaWIuTFVBX0lPTElCTkFNRV0gPSByZXF1aXJlKCcuL2xpb2xpYi5qcycpLmx1YW9wZW5faW87XG5cbi8qIEV4dGVuc2lvbjogZmVuZ2FyaSBsaWJyYXJ5ICovXG5jb25zdCB7IGx1YW9wZW5fZmVuZ2FyaSB9ID0gcmVxdWlyZSgnLi9mZW5nYXJpbGliLmpzJyk7XG5sb2FkZWRsaWJzW2x1YWxpYi5MVUFfRkVOR0FSSUxJQk5BTUVdID0gbHVhb3Blbl9mZW5nYXJpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///39\n')}])});